// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: dnspb/dns.proto

package dnspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DNSMessageType int32

const (
	DNSMessageType_NOP               DNSMessageType = 0 // aka FINGERPRINT
	DNSMessageType_TOTP              DNSMessageType = 1
	DNSMessageType_INIT              DNSMessageType = 2
	DNSMessageType_POLL              DNSMessageType = 3
	DNSMessageType_CLOSE             DNSMessageType = 4
	DNSMessageType_MANIFEST          DNSMessageType = 6
	DNSMessageType_DATA_TO_IMPLANT   DNSMessageType = 7
	DNSMessageType_DATA_FROM_IMPLANT DNSMessageType = 8
	DNSMessageType_CLEAR             DNSMessageType = 9
)

// Enum value maps for DNSMessageType.
var (
	DNSMessageType_name = map[int32]string{
		0: "NOP",
		1: "TOTP",
		2: "INIT",
		3: "POLL",
		4: "CLOSE",
		6: "MANIFEST",
		7: "DATA_TO_IMPLANT",
		8: "DATA_FROM_IMPLANT",
		9: "CLEAR",
	}
	DNSMessageType_value = map[string]int32{
		"NOP":               0,
		"TOTP":              1,
		"INIT":              2,
		"POLL":              3,
		"CLOSE":             4,
		"MANIFEST":          6,
		"DATA_TO_IMPLANT":   7,
		"DATA_FROM_IMPLANT": 8,
		"CLEAR":             9,
	}
)

func (x DNSMessageType) Enum() *DNSMessageType {
	p := new(DNSMessageType)
	*p = x
	return p
}

func (x DNSMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_dnspb_dns_proto_enumTypes[0].Descriptor()
}

func (DNSMessageType) Type() protoreflect.EnumType {
	return &file_dnspb_dns_proto_enumTypes[0]
}

func (x DNSMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSMessageType.Descriptor instead.
func (DNSMessageType) EnumDescriptor() ([]byte, []int) {
	return file_dnspb_dns_proto_rawDescGZIP(), []int{0}
}

// NOTE: DNS is very space sensitive so certain fields are re-purposed
// depending on the DNSMessageType as noted below:
//
// [Type TOTP]: ID field is used for the TOTP code
type DNSMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          DNSMessageType         `protobuf:"varint,1,opt,name=Type,proto3,enum=dnspb.DNSMessageType" json:"Type,omitempty"`
	ID            uint32                 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`       // 8 bit message id + 24 bit dns session ID
	Start         uint32                 `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"` // Bytes start at
	Stop          uint32                 `protobuf:"varint,4,opt,name=Stop,proto3" json:"Stop,omitempty"`   // Bytes stop at
	Size          uint32                 `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`   // Total size
	Data          []byte                 `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`    // Actual data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSMessage) Reset() {
	*x = DNSMessage{}
	mi := &file_dnspb_dns_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSMessage) ProtoMessage() {}

func (x *DNSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dnspb_dns_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSMessage.ProtoReflect.Descriptor instead.
func (*DNSMessage) Descriptor() ([]byte, []int) {
	return file_dnspb_dns_proto_rawDescGZIP(), []int{0}
}

func (x *DNSMessage) GetType() DNSMessageType {
	if x != nil {
		return x.Type
	}
	return DNSMessageType_NOP
}

func (x *DNSMessage) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DNSMessage) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DNSMessage) GetStop() uint32 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *DNSMessage) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DNSMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_dnspb_dns_proto protoreflect.FileDescriptor

const file_dnspb_dns_proto_rawDesc = "" +
	"\n" +
	"\x0fdnspb/dns.proto\x12\x05dnspb\"\x99\x01\n" +
	"\n" +
	"DNSMessage\x12)\n" +
	"\x04Type\x18\x01 \x01(\x0e2\x15.dnspb.DNSMessageTypeR\x04Type\x12\x0e\n" +
	"\x02ID\x18\x02 \x01(\rR\x02ID\x12\x14\n" +
	"\x05Start\x18\x03 \x01(\rR\x05Start\x12\x12\n" +
	"\x04Stop\x18\x04 \x01(\rR\x04Stop\x12\x12\n" +
	"\x04Size\x18\x05 \x01(\rR\x04Size\x12\x12\n" +
	"\x04Data\x18\x06 \x01(\fR\x04Data*\x87\x01\n" +
	"\x0eDNSMessageType\x12\a\n" +
	"\x03NOP\x10\x00\x12\b\n" +
	"\x04TOTP\x10\x01\x12\b\n" +
	"\x04INIT\x10\x02\x12\b\n" +
	"\x04POLL\x10\x03\x12\t\n" +
	"\x05CLOSE\x10\x04\x12\f\n" +
	"\bMANIFEST\x10\x06\x12\x13\n" +
	"\x0fDATA_TO_IMPLANT\x10\a\x12\x15\n" +
	"\x11DATA_FROM_IMPLANT\x10\b\x12\t\n" +
	"\x05CLEAR\x10\tB,Z*github.com/bishopfox/sliver/protobuf/dnspbb\x06proto3"

var (
	file_dnspb_dns_proto_rawDescOnce sync.Once
	file_dnspb_dns_proto_rawDescData []byte
)

func file_dnspb_dns_proto_rawDescGZIP() []byte {
	file_dnspb_dns_proto_rawDescOnce.Do(func() {
		file_dnspb_dns_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dnspb_dns_proto_rawDesc), len(file_dnspb_dns_proto_rawDesc)))
	})
	return file_dnspb_dns_proto_rawDescData
}

var file_dnspb_dns_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dnspb_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_dnspb_dns_proto_goTypes = []any{
	(DNSMessageType)(0), // 0: dnspb.DNSMessageType
	(*DNSMessage)(nil),  // 1: dnspb.DNSMessage
}
var file_dnspb_dns_proto_depIdxs = []int32{
	0, // 0: dnspb.DNSMessage.Type:type_name -> dnspb.DNSMessageType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_dnspb_dns_proto_init() }
func file_dnspb_dns_proto_init() {
	if File_dnspb_dns_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dnspb_dns_proto_rawDesc), len(file_dnspb_dns_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dnspb_dns_proto_goTypes,
		DependencyIndexes: file_dnspb_dns_proto_depIdxs,
		EnumInfos:         file_dnspb_dns_proto_enumTypes,
		MessageInfos:      file_dnspb_dns_proto_msgTypes,
	}.Build()
	File_dnspb_dns_proto = out.File
	file_dnspb_dns_proto_goTypes = nil
	file_dnspb_dns_proto_depIdxs = nil
}
