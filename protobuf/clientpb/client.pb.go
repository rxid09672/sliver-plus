// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: clientpb/client.proto

package clientpb

import (
	commonpb "github.com/bishopfox/sliver/protobuf/commonpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OutputFormat int32

const (
	OutputFormat_SHARED_LIB  OutputFormat = 0
	OutputFormat_SHELLCODE   OutputFormat = 1
	OutputFormat_EXECUTABLE  OutputFormat = 2
	OutputFormat_SERVICE     OutputFormat = 3
	OutputFormat_THIRD_PARTY OutputFormat = 4
)

// Enum value maps for OutputFormat.
var (
	OutputFormat_name = map[int32]string{
		0: "SHARED_LIB",
		1: "SHELLCODE",
		2: "EXECUTABLE",
		3: "SERVICE",
		4: "THIRD_PARTY",
	}
	OutputFormat_value = map[string]int32{
		"SHARED_LIB":  0,
		"SHELLCODE":   1,
		"EXECUTABLE":  2,
		"SERVICE":     3,
		"THIRD_PARTY": 4,
	}
)

func (x OutputFormat) Enum() *OutputFormat {
	p := new(OutputFormat)
	*p = x
	return p
}

func (x OutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[0].Descriptor()
}

func (OutputFormat) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[0]
}

func (x OutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputFormat.Descriptor instead.
func (OutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{0}
}

type StageProtocol int32

const (
	StageProtocol_TCP   StageProtocol = 0
	StageProtocol_HTTP  StageProtocol = 1
	StageProtocol_HTTPS StageProtocol = 2
)

// Enum value maps for StageProtocol.
var (
	StageProtocol_name = map[int32]string{
		0: "TCP",
		1: "HTTP",
		2: "HTTPS",
	}
	StageProtocol_value = map[string]int32{
		"TCP":   0,
		"HTTP":  1,
		"HTTPS": 2,
	}
)

func (x StageProtocol) Enum() *StageProtocol {
	p := new(StageProtocol)
	*p = x
	return p
}

func (x StageProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[1].Descriptor()
}

func (StageProtocol) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[1]
}

func (x StageProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageProtocol.Descriptor instead.
func (StageProtocol) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{1}
}

// [ Loot ] ----------------------------------------
type FileType int32

const (
	FileType_NO_FILE FileType = 0
	FileType_BINARY  FileType = 1
	FileType_TEXT    FileType = 2
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "NO_FILE",
		1: "BINARY",
		2: "TEXT",
	}
	FileType_value = map[string]int32{
		"NO_FILE": 0,
		"BINARY":  1,
		"TEXT":    2,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[2].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[2]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{2}
}

// [ Shellcode ] ----------------------------------------
type ShellcodeEncoder int32

const (
	ShellcodeEncoder_NONE           ShellcodeEncoder = 0
	ShellcodeEncoder_SHIKATA_GA_NAI ShellcodeEncoder = 1
)

// Enum value maps for ShellcodeEncoder.
var (
	ShellcodeEncoder_name = map[int32]string{
		0: "NONE",
		1: "SHIKATA_GA_NAI",
	}
	ShellcodeEncoder_value = map[string]int32{
		"NONE":           0,
		"SHIKATA_GA_NAI": 1,
	}
)

func (x ShellcodeEncoder) Enum() *ShellcodeEncoder {
	p := new(ShellcodeEncoder)
	*p = x
	return p
}

func (x ShellcodeEncoder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellcodeEncoder) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[3].Descriptor()
}

func (ShellcodeEncoder) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[3]
}

func (x ShellcodeEncoder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShellcodeEncoder.Descriptor instead.
func (ShellcodeEncoder) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{3}
}

type HTTPC2SegmentType int32

const (
	HTTPC2SegmentType_POLL    HTTPC2SegmentType = 0
	HTTPC2SegmentType_SESSION HTTPC2SegmentType = 1
	HTTPC2SegmentType_CLOSE   HTTPC2SegmentType = 2
)

// Enum value maps for HTTPC2SegmentType.
var (
	HTTPC2SegmentType_name = map[int32]string{
		0: "POLL",
		1: "SESSION",
		2: "CLOSE",
	}
	HTTPC2SegmentType_value = map[string]int32{
		"POLL":    0,
		"SESSION": 1,
		"CLOSE":   2,
	}
)

func (x HTTPC2SegmentType) Enum() *HTTPC2SegmentType {
	p := new(HTTPC2SegmentType)
	*p = x
	return p
}

func (x HTTPC2SegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPC2SegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[4].Descriptor()
}

func (HTTPC2SegmentType) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[4]
}

func (x HTTPC2SegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPC2SegmentType.Descriptor instead.
func (HTTPC2SegmentType) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{4}
}

type HashType int32

const (
	HashType_MD5 HashType = 0   // MD5 - zero must come first in an enum
	HashType_MD4 HashType = 900 // MD4
	// MD5
	HashType_SHA1                         HashType = 100   // SHA1
	HashType_SHA2_224                     HashType = 1300  // SHA2-224
	HashType_SHA2_256                     HashType = 1400  // SHA2-256
	HashType_SHA2_384                     HashType = 10800 // SHA2-384
	HashType_SHA2_512                     HashType = 1700  // SHA2-512
	HashType_SHA3_224                     HashType = 17300 // SHA3-224
	HashType_SHA3_256                     HashType = 17400 // SHA3-256
	HashType_SHA3_384                     HashType = 17500 // SHA3-384
	HashType_SHA3_512                     HashType = 17600 // SHA3-512
	HashType_RIPEMD_160                   HashType = 6000  // RIPEMD-160
	HashType_BLAKE2B_256                  HashType = 600   // BLAKE2b-512
	HashType_GOST_R_32_11_2012_256        HashType = 11700 // GOST R 34.11-2012 (Streebog) 256-bit, big-endian
	HashType_GOST_R_32_11_2012_512        HashType = 11800 // GOST R 34.11-2012 (Streebog) 512-bit, big-endian
	HashType_GOST_R_34_11_94              HashType = 6900  // GOST R 34.11-94
	HashType_GPG                          HashType = 17010 // GPG (AES-128/AES-256 (SHA-1($pass)))
	HashType_HALF_MD5                     HashType = 5100  // Half MD5
	HashType_KECCAK_224                   HashType = 17700 // Keccak-224
	HashType_KECCAK_256                   HashType = 17800 // Keccak-256
	HashType_KECCAK_384                   HashType = 17900 // Keccak-384
	HashType_KECCAK_512                   HashType = 18000 // Keccak-512
	HashType_WHIRLPOOL                    HashType = 6100  // Whirlpool
	HashType_SIPHASH                      HashType = 10100 // SipHash
	HashType_MD5_UTF16LE                  HashType = 70    // md5(utf16le($pass))
	HashType_SHA1_UTF16LE                 HashType = 170   // sha1(utf16le($pass))
	HashType_SHA256_UTF16LE               HashType = 1470  // sha256(utf16le($pass))
	HashType_SHA384_UTF16LE               HashType = 10870 // sha384(utf16le($pass))
	HashType_SHA512_UTF16LE               HashType = 1770  // sha512(utf16le($pass))
	HashType_BLAKE2B_512_PW_SALT          HashType = 610   // BLAKE2b-512($pass.$salt)
	HashType_BLAKE2B_512_SALT_PW          HashType = 620   // BLAKE2b-512($salt.$pass)
	HashType_MD5_PW_SALT                  HashType = 10    // md5($pass.$salt)
	HashType_MD5_SALT_PW                  HashType = 20    // md5($salt.$pass)
	HashType_MD5_SALT_PW_SALT             HashType = 3800  // md5($salt.$pass.$salt)
	HashType_MD5_SALT_MD5_PW              HashType = 3710  // md5($salt.md5($pass))
	HashType_CRC32                        HashType = 11500 // CRC32
	HashType_CRC32C                       HashType = 27900 // CRC32B
	HashType_CRC64Jones                   HashType = 28000 // CRC64-Jones
	HashType_JAVA_OBJECT                  HashType = 18700
	HashType_MURMUR                       HashType = 25700 // MurmurHash
	HashType_MURMUR3                      HashType = 27800 // MurmurHash3
	HashType_THREE_DES                    HashType = 14100 // 3DES (PT = $salt, key = $pass)
	HashType_DES                          HashType = 14000 // DES (PT = $salt, key = $pass)
	HashType_AES_128_ECB                  HashType = 26401 // AES-128-ECB NOKDF (PT = $salt, key = $pass)
	HashType_AES_192_ECB                  HashType = 26402 //  AES-192-ECB NOKDF (PT = $salt, key = $pass)
	HashType_AES_256_ECB                  HashType = 26403 // AES-256-ECB NOKDF (PT = $salt, key = $pass)
	HashType_CHA_CHA_20                   HashType = 15400 // ChaCha20
	HashType_LINUX_KERNEL_CRYPTO_API_24   HashType = 14500 // Linux Kernel Crypto API (2.4)
	HashType_SKIP_32                      HashType = 14900 // Skip32 (PT = $salt, key = $pass)
	HashType_PBKDF2_HMAC_MD5              HashType = 11900 // PBKDF2-HMAC-MD5
	HashType_PBKDF2_HMAC_SHA1             HashType = 12000 // PBKDF2-HMAC-SHA1
	HashType_PBKDF2_HMAC_SHA256           HashType = 10900 // PBKDF2-HMAC-SHA256
	HashType_PBKDF2_HMAC_SHA512           HashType = 12100 // PBKDF2-HMAC-SHA512
	HashType_SCRYPT                       HashType = 8900  // scrypt
	HashType_PHPASS                       HashType = 400   // phpass
	HashType_TACACS_PLUS                  HashType = 16100 // TACACS+
	HashType_SIP_DIGEST                   HashType = 11400 // SIP digest authentication (MD5)
	HashType_IKE_MD5                      HashType = 5300  // IKE-PSK MD5
	HashType_IKE_SHA1                     HashType = 5400  // IKE-PSK SHA1
	HashType_SNMP_V3_HMAC_MD5_96          HashType = 25100 // SNMPv3 HMAC-MD5-96
	HashType_SNMP_V3_HMAC_MD5_96__SHA1_96 HashType = 25000 // SNMPv3 HMAC-MD5-96 / HMAC-SHA1-96
	HashType_SNMP_V3_HMAC_SHA1_96         HashType = 25200 // SNMPv3 HMAC-SHA1-96
	HashType_SNMP_V3_HMAC_SHA224_128      HashType = 26700 // SNMPv3 HMAC-SHA224-128
	HashType_SNMP_V3_HMAC_SHA256_192      HashType = 26800 // SNMPv3 HMAC-SHA256-192
	HashType_SNMP_V3_HMAC_SHA384_256      HashType = 26900 // SNMPv3 HMAC-SHA384-256
	HashType_SNMP_V3_HMAC_SHA512_384      HashType = 27300 // SNMPv3 HMAC-SHA512-384
	HashType_WPA_EAPOL_PBKDF2             HashType = 2500  // WPA-EAPOL-PBKDF2
	HashType_WPA_EAPOL_PMK                HashType = 2501  // WPA-EAPOL-PMK
	HashType_WPA_PBKDF2_PMKID_EAPOL       HashType = 22000 // WPA-PBKDF2-PMKID+EAPOL
	HashType_WPA_PMK_PMKID_EAPOL          HashType = 22001 // WPA-PMK-PMKID+EAPOL
	HashType_WPA_PMKID_PBKDF2             HashType = 16800 // WPA-PMKID-PBKDF2
	HashType_WPA_PMKID_PMK                HashType = 16801 // WPA-PMKID-PMK
	HashType_IPMI2_PAKP_HMAC_SHA1         HashType = 7300  // IPMI2 RAKP HMAC-SHA1
	HashType_CRAM_MD5                     HashType = 10200 // CRAM-MD5
	HashType_JWT                          HashType = 16500 // JWT (JSON Web Token)
	HashType_RADMIN_3                     HashType = 29200 // Radmin3
	HashType_KERBEROS_17_TGS_REP          HashType = 19600 // Kerberos 5, etype 17, TGS-REP
	HashType_KERBEROS_17_PREAUTH          HashType = 19800 // Kerberos 5, etype 17, Pre-Auth
	HashType_KERBEROS_17_DB               HashType = 28800 // Kerberos 5, etype 17, DB
	HashType_KERBEROS_18_TGS_REP          HashType = 19700 // Kerberos 5, etype 18, TGS-REP
	HashType_KERBEROS_18_PREAUTH          HashType = 19900 // Kerberos 5, etype 18, Pre-Auth
	HashType_KERBEROS_18_DB               HashType = 28900 // Kerberos 5, etype 18, DB
	HashType_KERBEROS_23_SA_REQ_PREAUTH   HashType = 7500  // Kerberos 5, etype 23, AS-REQ Pre-Auth
	HashType_KERBEROS_23_TGS_REP          HashType = 13100 // Kerberos 5, etype 23, TGS-REP
	HashType_KERBEROS_23_AS_REP           HashType = 18200 // Kerberos 5, etype 23, AS-REP
	HashType_NET_NTLM_V1                  HashType = 5500  // NetNTLMv1 / NetNTLMv1+ESS
	HashType_NET_NTLM_V1_NT               HashType = 27000 // NetNTLMv1 / NetNTLMv1+ESS (NT)
	HashType_NET_NTLM_V2                  HashType = 5600  // NetNTLMv2
	HashType_NET_NTLM_V2_NT               HashType = 27100 // NetNTLMv2 (NT)
	HashType_FLASK                        HashType = 29100 // Flask Session Cookie ($salt.$salt.$pass)
	HashType_ISCSI_CHAP                   HashType = 4800  // iSCSI CHAP authentication, MD5(CHAP)
	HashType_RACF                         HashType = 8500
	HashType_AIX_SMD5                     HashType = 6300
	HashType_AIX_SSHA1                    HashType = 6700
	HashType_AIX_SSHA256                  HashType = 6400
	HashType_AIX_SSHA512                  HashType = 6500
	HashType_LM                           HashType = 3000  // LM
	HashType_QNX_MD5                      HashType = 19000 // QNX /etc/shadow (MD5)
	HashType_QNX_SHA256                   HashType = 19100 // QNX /etc/shadow (SHA256)
	HashType_QNX_SHA512                   HashType = 19200 // QNX /etc/shadow (SHA512)
	HashType_DPAPI_V1_CTX_1_AND_2         HashType = 15300 // DPAPI masterkey file v1 (context 1 and 2)
	HashType_DPAPI_V1_CTX_3               HashType = 15310 // DPAPI masterkey file v1 (context 3)
	HashType_DPAPI_V2_CTX_1_AND_2         HashType = 15900 // DPAPI masterkey file v2 (context 1)
	HashType_DPAPI_V2_CTX_3               HashType = 15910 // DPAPI masterkey file v2 (context 3)
	HashType_GRUB_2                       HashType = 7200  // GRUB 2
	HashType_MS_AZURE_SYNC                HashType = 12800 // MS-AzureSync PBKDF2-HMAC-SHA256
	HashType_BSDI_CRYPT                   HashType = 12400 // BSDi Crypt, Extended DES
	HashType_NTLM                         HashType = 1000  // NTLM
	HashType_RADMIN2                      HashType = 9900  // Radmin2
	HashType_SAMSUNG_ANDROID              HashType = 5800  // Samsung Android Password/PIN
	HashType_WINDOWS_HELLO_PIN            HashType = 28100 // Windows Hello PIN/Password
	HashType_WINDOWS_PHONE                HashType = 13800 // Windows Phone 8+ PIN/Password
	HashType_CISCO_ASA_MD5                HashType = 2410  // Cisco-ASA MD5
	HashType_CISCO_IOS_PBKDF2_SHA256      HashType = 9200  // Cisco-IOS $8$ (PBKDF2-SHA256)
	HashType_CISCO_IOS_SCRYPT             HashType = 9300  // Cisco-IOS $9$ (scrypt)
	HashType_CISCO_PIX_MD5                HashType = 2400  // Cisco-Pix MD5
	HashType_CITRIX_NETSCALER_SHA1        HashType = 8100  // Citrix NetScaler (SHA1)
	HashType_CITRIX_NETSCALER_SHA512      HashType = 22200 // Citrix NetScaler (SHA512)
	HashType_DCC                          HashType = 1100  // Domain Cached Credentials (DCC), MS Cache
	HashType_DCC2                         HashType = 2100  // Domain Cached Credentials 2 (DCC2), MS Cache 2
	HashType_MACOS_10_8                   HashType = 7100  // macOS v10.8+ (PBKDF2-SHA512)
	HashType_INVALID                      HashType = 9999  // Invalid hash type
	// Out of order
	HashType_BCRYPT_UNIX       HashType = 3200 // bcrypt
	HashType_SHA512_CRYPT_UNIX HashType = 1800 // sha512crypt $6$, SHA512 (Unix)
)

// Enum value maps for HashType.
var (
	HashType_name = map[int32]string{
		0:     "MD5",
		900:   "MD4",
		100:   "SHA1",
		1300:  "SHA2_224",
		1400:  "SHA2_256",
		10800: "SHA2_384",
		1700:  "SHA2_512",
		17300: "SHA3_224",
		17400: "SHA3_256",
		17500: "SHA3_384",
		17600: "SHA3_512",
		6000:  "RIPEMD_160",
		600:   "BLAKE2B_256",
		11700: "GOST_R_32_11_2012_256",
		11800: "GOST_R_32_11_2012_512",
		6900:  "GOST_R_34_11_94",
		17010: "GPG",
		5100:  "HALF_MD5",
		17700: "KECCAK_224",
		17800: "KECCAK_256",
		17900: "KECCAK_384",
		18000: "KECCAK_512",
		6100:  "WHIRLPOOL",
		10100: "SIPHASH",
		70:    "MD5_UTF16LE",
		170:   "SHA1_UTF16LE",
		1470:  "SHA256_UTF16LE",
		10870: "SHA384_UTF16LE",
		1770:  "SHA512_UTF16LE",
		610:   "BLAKE2B_512_PW_SALT",
		620:   "BLAKE2B_512_SALT_PW",
		10:    "MD5_PW_SALT",
		20:    "MD5_SALT_PW",
		3800:  "MD5_SALT_PW_SALT",
		3710:  "MD5_SALT_MD5_PW",
		11500: "CRC32",
		27900: "CRC32C",
		28000: "CRC64Jones",
		18700: "JAVA_OBJECT",
		25700: "MURMUR",
		27800: "MURMUR3",
		14100: "THREE_DES",
		14000: "DES",
		26401: "AES_128_ECB",
		26402: "AES_192_ECB",
		26403: "AES_256_ECB",
		15400: "CHA_CHA_20",
		14500: "LINUX_KERNEL_CRYPTO_API_24",
		14900: "SKIP_32",
		11900: "PBKDF2_HMAC_MD5",
		12000: "PBKDF2_HMAC_SHA1",
		10900: "PBKDF2_HMAC_SHA256",
		12100: "PBKDF2_HMAC_SHA512",
		8900:  "SCRYPT",
		400:   "PHPASS",
		16100: "TACACS_PLUS",
		11400: "SIP_DIGEST",
		5300:  "IKE_MD5",
		5400:  "IKE_SHA1",
		25100: "SNMP_V3_HMAC_MD5_96",
		25000: "SNMP_V3_HMAC_MD5_96__SHA1_96",
		25200: "SNMP_V3_HMAC_SHA1_96",
		26700: "SNMP_V3_HMAC_SHA224_128",
		26800: "SNMP_V3_HMAC_SHA256_192",
		26900: "SNMP_V3_HMAC_SHA384_256",
		27300: "SNMP_V3_HMAC_SHA512_384",
		2500:  "WPA_EAPOL_PBKDF2",
		2501:  "WPA_EAPOL_PMK",
		22000: "WPA_PBKDF2_PMKID_EAPOL",
		22001: "WPA_PMK_PMKID_EAPOL",
		16800: "WPA_PMKID_PBKDF2",
		16801: "WPA_PMKID_PMK",
		7300:  "IPMI2_PAKP_HMAC_SHA1",
		10200: "CRAM_MD5",
		16500: "JWT",
		29200: "RADMIN_3",
		19600: "KERBEROS_17_TGS_REP",
		19800: "KERBEROS_17_PREAUTH",
		28800: "KERBEROS_17_DB",
		19700: "KERBEROS_18_TGS_REP",
		19900: "KERBEROS_18_PREAUTH",
		28900: "KERBEROS_18_DB",
		7500:  "KERBEROS_23_SA_REQ_PREAUTH",
		13100: "KERBEROS_23_TGS_REP",
		18200: "KERBEROS_23_AS_REP",
		5500:  "NET_NTLM_V1",
		27000: "NET_NTLM_V1_NT",
		5600:  "NET_NTLM_V2",
		27100: "NET_NTLM_V2_NT",
		29100: "FLASK",
		4800:  "ISCSI_CHAP",
		8500:  "RACF",
		6300:  "AIX_SMD5",
		6700:  "AIX_SSHA1",
		6400:  "AIX_SSHA256",
		6500:  "AIX_SSHA512",
		3000:  "LM",
		19000: "QNX_MD5",
		19100: "QNX_SHA256",
		19200: "QNX_SHA512",
		15300: "DPAPI_V1_CTX_1_AND_2",
		15310: "DPAPI_V1_CTX_3",
		15900: "DPAPI_V2_CTX_1_AND_2",
		15910: "DPAPI_V2_CTX_3",
		7200:  "GRUB_2",
		12800: "MS_AZURE_SYNC",
		12400: "BSDI_CRYPT",
		1000:  "NTLM",
		9900:  "RADMIN2",
		5800:  "SAMSUNG_ANDROID",
		28100: "WINDOWS_HELLO_PIN",
		13800: "WINDOWS_PHONE",
		2410:  "CISCO_ASA_MD5",
		9200:  "CISCO_IOS_PBKDF2_SHA256",
		9300:  "CISCO_IOS_SCRYPT",
		2400:  "CISCO_PIX_MD5",
		8100:  "CITRIX_NETSCALER_SHA1",
		22200: "CITRIX_NETSCALER_SHA512",
		1100:  "DCC",
		2100:  "DCC2",
		7100:  "MACOS_10_8",
		9999:  "INVALID",
		3200:  "BCRYPT_UNIX",
		1800:  "SHA512_CRYPT_UNIX",
	}
	HashType_value = map[string]int32{
		"MD5":                          0,
		"MD4":                          900,
		"SHA1":                         100,
		"SHA2_224":                     1300,
		"SHA2_256":                     1400,
		"SHA2_384":                     10800,
		"SHA2_512":                     1700,
		"SHA3_224":                     17300,
		"SHA3_256":                     17400,
		"SHA3_384":                     17500,
		"SHA3_512":                     17600,
		"RIPEMD_160":                   6000,
		"BLAKE2B_256":                  600,
		"GOST_R_32_11_2012_256":        11700,
		"GOST_R_32_11_2012_512":        11800,
		"GOST_R_34_11_94":              6900,
		"GPG":                          17010,
		"HALF_MD5":                     5100,
		"KECCAK_224":                   17700,
		"KECCAK_256":                   17800,
		"KECCAK_384":                   17900,
		"KECCAK_512":                   18000,
		"WHIRLPOOL":                    6100,
		"SIPHASH":                      10100,
		"MD5_UTF16LE":                  70,
		"SHA1_UTF16LE":                 170,
		"SHA256_UTF16LE":               1470,
		"SHA384_UTF16LE":               10870,
		"SHA512_UTF16LE":               1770,
		"BLAKE2B_512_PW_SALT":          610,
		"BLAKE2B_512_SALT_PW":          620,
		"MD5_PW_SALT":                  10,
		"MD5_SALT_PW":                  20,
		"MD5_SALT_PW_SALT":             3800,
		"MD5_SALT_MD5_PW":              3710,
		"CRC32":                        11500,
		"CRC32C":                       27900,
		"CRC64Jones":                   28000,
		"JAVA_OBJECT":                  18700,
		"MURMUR":                       25700,
		"MURMUR3":                      27800,
		"THREE_DES":                    14100,
		"DES":                          14000,
		"AES_128_ECB":                  26401,
		"AES_192_ECB":                  26402,
		"AES_256_ECB":                  26403,
		"CHA_CHA_20":                   15400,
		"LINUX_KERNEL_CRYPTO_API_24":   14500,
		"SKIP_32":                      14900,
		"PBKDF2_HMAC_MD5":              11900,
		"PBKDF2_HMAC_SHA1":             12000,
		"PBKDF2_HMAC_SHA256":           10900,
		"PBKDF2_HMAC_SHA512":           12100,
		"SCRYPT":                       8900,
		"PHPASS":                       400,
		"TACACS_PLUS":                  16100,
		"SIP_DIGEST":                   11400,
		"IKE_MD5":                      5300,
		"IKE_SHA1":                     5400,
		"SNMP_V3_HMAC_MD5_96":          25100,
		"SNMP_V3_HMAC_MD5_96__SHA1_96": 25000,
		"SNMP_V3_HMAC_SHA1_96":         25200,
		"SNMP_V3_HMAC_SHA224_128":      26700,
		"SNMP_V3_HMAC_SHA256_192":      26800,
		"SNMP_V3_HMAC_SHA384_256":      26900,
		"SNMP_V3_HMAC_SHA512_384":      27300,
		"WPA_EAPOL_PBKDF2":             2500,
		"WPA_EAPOL_PMK":                2501,
		"WPA_PBKDF2_PMKID_EAPOL":       22000,
		"WPA_PMK_PMKID_EAPOL":          22001,
		"WPA_PMKID_PBKDF2":             16800,
		"WPA_PMKID_PMK":                16801,
		"IPMI2_PAKP_HMAC_SHA1":         7300,
		"CRAM_MD5":                     10200,
		"JWT":                          16500,
		"RADMIN_3":                     29200,
		"KERBEROS_17_TGS_REP":          19600,
		"KERBEROS_17_PREAUTH":          19800,
		"KERBEROS_17_DB":               28800,
		"KERBEROS_18_TGS_REP":          19700,
		"KERBEROS_18_PREAUTH":          19900,
		"KERBEROS_18_DB":               28900,
		"KERBEROS_23_SA_REQ_PREAUTH":   7500,
		"KERBEROS_23_TGS_REP":          13100,
		"KERBEROS_23_AS_REP":           18200,
		"NET_NTLM_V1":                  5500,
		"NET_NTLM_V1_NT":               27000,
		"NET_NTLM_V2":                  5600,
		"NET_NTLM_V2_NT":               27100,
		"FLASK":                        29100,
		"ISCSI_CHAP":                   4800,
		"RACF":                         8500,
		"AIX_SMD5":                     6300,
		"AIX_SSHA1":                    6700,
		"AIX_SSHA256":                  6400,
		"AIX_SSHA512":                  6500,
		"LM":                           3000,
		"QNX_MD5":                      19000,
		"QNX_SHA256":                   19100,
		"QNX_SHA512":                   19200,
		"DPAPI_V1_CTX_1_AND_2":         15300,
		"DPAPI_V1_CTX_3":               15310,
		"DPAPI_V2_CTX_1_AND_2":         15900,
		"DPAPI_V2_CTX_3":               15910,
		"GRUB_2":                       7200,
		"MS_AZURE_SYNC":                12800,
		"BSDI_CRYPT":                   12400,
		"NTLM":                         1000,
		"RADMIN2":                      9900,
		"SAMSUNG_ANDROID":              5800,
		"WINDOWS_HELLO_PIN":            28100,
		"WINDOWS_PHONE":                13800,
		"CISCO_ASA_MD5":                2410,
		"CISCO_IOS_PBKDF2_SHA256":      9200,
		"CISCO_IOS_SCRYPT":             9300,
		"CISCO_PIX_MD5":                2400,
		"CITRIX_NETSCALER_SHA1":        8100,
		"CITRIX_NETSCALER_SHA512":      22200,
		"DCC":                          1100,
		"DCC2":                         2100,
		"MACOS_10_8":                   7100,
		"INVALID":                      9999,
		"BCRYPT_UNIX":                  3200,
		"SHA512_CRYPT_UNIX":            1800,
	}
)

func (x HashType) Enum() *HashType {
	p := new(HashType)
	*p = x
	return p
}

func (x HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[5].Descriptor()
}

func (HashType) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[5]
}

func (x HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashType.Descriptor instead.
func (HashType) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{5}
}

type States int32

const (
	States_IDLE         States = 0
	States_CRACKING     States = 1
	States_INITIALIZING States = 2
)

// Enum value maps for States.
var (
	States_name = map[int32]string{
		0: "IDLE",
		1: "CRACKING",
		2: "INITIALIZING",
	}
	States_value = map[string]int32{
		"IDLE":         0,
		"CRACKING":     1,
		"INITIALIZING": 2,
	}
)

func (x States) Enum() *States {
	p := new(States)
	*p = x
	return p
}

func (x States) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (States) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[6].Descriptor()
}

func (States) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[6]
}

func (x States) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use States.Descriptor instead.
func (States) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{6}
}

type CrackJobStatus int32

const (
	CrackJobStatus_IN_PROGRESS CrackJobStatus = 0
	CrackJobStatus_COMPLETED   CrackJobStatus = 1
	CrackJobStatus_FAILED      CrackJobStatus = 2
)

// Enum value maps for CrackJobStatus.
var (
	CrackJobStatus_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "COMPLETED",
		2: "FAILED",
	}
	CrackJobStatus_value = map[string]int32{
		"IN_PROGRESS": 0,
		"COMPLETED":   1,
		"FAILED":      2,
	}
)

func (x CrackJobStatus) Enum() *CrackJobStatus {
	p := new(CrackJobStatus)
	*p = x
	return p
}

func (x CrackJobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrackJobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[7].Descriptor()
}

func (CrackJobStatus) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[7]
}

func (x CrackJobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrackJobStatus.Descriptor instead.
func (CrackJobStatus) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{7}
}

type CrackAttackMode int32

const (
	CrackAttackMode_STRAIGHT             CrackAttackMode = 0
	CrackAttackMode_COMBINATION          CrackAttackMode = 1
	CrackAttackMode_BRUTEFORCE           CrackAttackMode = 3
	CrackAttackMode_HYBRID_WORDLIST_MASK CrackAttackMode = 6
	CrackAttackMode_HYBRID_MASK_WORDLIST CrackAttackMode = 7
	CrackAttackMode_ASSOCIATION          CrackAttackMode = 9
	CrackAttackMode_NO_ATTACK            CrackAttackMode = 10
)

// Enum value maps for CrackAttackMode.
var (
	CrackAttackMode_name = map[int32]string{
		0:  "STRAIGHT",
		1:  "COMBINATION",
		3:  "BRUTEFORCE",
		6:  "HYBRID_WORDLIST_MASK",
		7:  "HYBRID_MASK_WORDLIST",
		9:  "ASSOCIATION",
		10: "NO_ATTACK",
	}
	CrackAttackMode_value = map[string]int32{
		"STRAIGHT":             0,
		"COMBINATION":          1,
		"BRUTEFORCE":           3,
		"HYBRID_WORDLIST_MASK": 6,
		"HYBRID_MASK_WORDLIST": 7,
		"ASSOCIATION":          9,
		"NO_ATTACK":            10,
	}
)

func (x CrackAttackMode) Enum() *CrackAttackMode {
	p := new(CrackAttackMode)
	*p = x
	return p
}

func (x CrackAttackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrackAttackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[8].Descriptor()
}

func (CrackAttackMode) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[8]
}

func (x CrackAttackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrackAttackMode.Descriptor instead.
func (CrackAttackMode) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{8}
}

type CrackEncoding int32

const (
	CrackEncoding_INVALID_ENCODING CrackEncoding = 0
	CrackEncoding_ISO_8859_15      CrackEncoding = 1
	CrackEncoding_UTF_32LE         CrackEncoding = 2
)

// Enum value maps for CrackEncoding.
var (
	CrackEncoding_name = map[int32]string{
		0: "INVALID_ENCODING",
		1: "ISO_8859_15",
		2: "UTF_32LE",
	}
	CrackEncoding_value = map[string]int32{
		"INVALID_ENCODING": 0,
		"ISO_8859_15":      1,
		"UTF_32LE":         2,
	}
)

func (x CrackEncoding) Enum() *CrackEncoding {
	p := new(CrackEncoding)
	*p = x
	return p
}

func (x CrackEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrackEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[9].Descriptor()
}

func (CrackEncoding) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[9]
}

func (x CrackEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrackEncoding.Descriptor instead.
func (CrackEncoding) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{9}
}

type CrackOutfileFormat int32

const (
	CrackOutfileFormat_INVALID_FORMAT     CrackOutfileFormat = 0
	CrackOutfileFormat_HASH_SALT          CrackOutfileFormat = 1 // 1 | hash[:salt]
	CrackOutfileFormat_PLAIN              CrackOutfileFormat = 2 // 2 | plain
	CrackOutfileFormat_HEX_PLAIN          CrackOutfileFormat = 3 // 3 | hex_plain
	CrackOutfileFormat_CRACK_POS          CrackOutfileFormat = 4 // 4 | crack_pos
	CrackOutfileFormat_TIMESTAMP_ABSOLUTE CrackOutfileFormat = 5 // 5 | timestamp absolute
	CrackOutfileFormat_TIMESTAMP_RELATIVE CrackOutfileFormat = 6 // 6 | timestamp relative
)

// Enum value maps for CrackOutfileFormat.
var (
	CrackOutfileFormat_name = map[int32]string{
		0: "INVALID_FORMAT",
		1: "HASH_SALT",
		2: "PLAIN",
		3: "HEX_PLAIN",
		4: "CRACK_POS",
		5: "TIMESTAMP_ABSOLUTE",
		6: "TIMESTAMP_RELATIVE",
	}
	CrackOutfileFormat_value = map[string]int32{
		"INVALID_FORMAT":     0,
		"HASH_SALT":          1,
		"PLAIN":              2,
		"HEX_PLAIN":          3,
		"CRACK_POS":          4,
		"TIMESTAMP_ABSOLUTE": 5,
		"TIMESTAMP_RELATIVE": 6,
	}
)

func (x CrackOutfileFormat) Enum() *CrackOutfileFormat {
	p := new(CrackOutfileFormat)
	*p = x
	return p
}

func (x CrackOutfileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrackOutfileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[10].Descriptor()
}

func (CrackOutfileFormat) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[10]
}

func (x CrackOutfileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrackOutfileFormat.Descriptor instead.
func (CrackOutfileFormat) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{10}
}

type CrackWorkloadProfile int32

const (
	CrackWorkloadProfile_INVALID_WORKLOAD_PROFILE CrackWorkloadProfile = 0
	CrackWorkloadProfile_LOW                      CrackWorkloadProfile = 1
	CrackWorkloadProfile_DEFAULT                  CrackWorkloadProfile = 2
	CrackWorkloadProfile_HIGH                     CrackWorkloadProfile = 3
	CrackWorkloadProfile_NIGHTMARE                CrackWorkloadProfile = 4
)

// Enum value maps for CrackWorkloadProfile.
var (
	CrackWorkloadProfile_name = map[int32]string{
		0: "INVALID_WORKLOAD_PROFILE",
		1: "LOW",
		2: "DEFAULT",
		3: "HIGH",
		4: "NIGHTMARE",
	}
	CrackWorkloadProfile_value = map[string]int32{
		"INVALID_WORKLOAD_PROFILE": 0,
		"LOW":                      1,
		"DEFAULT":                  2,
		"HIGH":                     3,
		"NIGHTMARE":                4,
	}
)

func (x CrackWorkloadProfile) Enum() *CrackWorkloadProfile {
	p := new(CrackWorkloadProfile)
	*p = x
	return p
}

func (x CrackWorkloadProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrackWorkloadProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[11].Descriptor()
}

func (CrackWorkloadProfile) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[11]
}

func (x CrackWorkloadProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrackWorkloadProfile.Descriptor instead.
func (CrackWorkloadProfile) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{11}
}

type CrackFileType int32

const (
	CrackFileType_INVALID_TYPE   CrackFileType = 0
	CrackFileType_WORDLIST       CrackFileType = 1
	CrackFileType_RULES          CrackFileType = 2
	CrackFileType_MARKOV_HCSTAT2 CrackFileType = 3
)

// Enum value maps for CrackFileType.
var (
	CrackFileType_name = map[int32]string{
		0: "INVALID_TYPE",
		1: "WORDLIST",
		2: "RULES",
		3: "MARKOV_HCSTAT2",
	}
	CrackFileType_value = map[string]int32{
		"INVALID_TYPE":   0,
		"WORDLIST":       1,
		"RULES":          2,
		"MARKOV_HCSTAT2": 3,
	}
)

func (x CrackFileType) Enum() *CrackFileType {
	p := new(CrackFileType)
	*p = x
	return p
}

func (x CrackFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrackFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[12].Descriptor()
}

func (CrackFileType) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[12]
}

func (x CrackFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrackFileType.Descriptor instead.
func (CrackFileType) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{12}
}

type Version struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Major         int32                  `protobuf:"varint,1,opt,name=Major,proto3" json:"Major,omitempty"`
	Minor         int32                  `protobuf:"varint,2,opt,name=Minor,proto3" json:"Minor,omitempty"`
	Patch         int32                  `protobuf:"varint,3,opt,name=Patch,proto3" json:"Patch,omitempty"`
	Commit        string                 `protobuf:"bytes,4,opt,name=Commit,proto3" json:"Commit,omitempty"`
	Dirty         bool                   `protobuf:"varint,5,opt,name=Dirty,proto3" json:"Dirty,omitempty"`
	CompiledAt    int64                  `protobuf:"varint,6,opt,name=CompiledAt,proto3" json:"CompiledAt,omitempty"`
	OS            string                 `protobuf:"bytes,7,opt,name=OS,proto3" json:"OS,omitempty"`
	Arch          string                 `protobuf:"bytes,8,opt,name=Arch,proto3" json:"Arch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_clientpb_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Version) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Version) GetPatch() int32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *Version) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Version) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

func (x *Version) GetCompiledAt() int64 {
	if x != nil {
		return x.CompiledAt
	}
	return 0
}

func (x *Version) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Version) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

// [ Client Logs ] ----------------------------------------
type ClientLogData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        string                 `protobuf:"bytes,1,opt,name=Stream,proto3" json:"Stream,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientLogData) Reset() {
	*x = ClientLogData{}
	mi := &file_clientpb_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientLogData) ProtoMessage() {}

func (x *ClientLogData) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientLogData.ProtoReflect.Descriptor instead.
func (*ClientLogData) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{1}
}

func (x *ClientLogData) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ClientLogData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Session struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ID                string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Hostname          string                 `protobuf:"bytes,3,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	UUID              string                 `protobuf:"bytes,4,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Username          string                 `protobuf:"bytes,5,opt,name=Username,proto3" json:"Username,omitempty"`
	UID               string                 `protobuf:"bytes,6,opt,name=UID,proto3" json:"UID,omitempty"`
	GID               string                 `protobuf:"bytes,7,opt,name=GID,proto3" json:"GID,omitempty"`
	OS                string                 `protobuf:"bytes,8,opt,name=OS,proto3" json:"OS,omitempty"`
	Arch              string                 `protobuf:"bytes,9,opt,name=Arch,proto3" json:"Arch,omitempty"`
	Transport         string                 `protobuf:"bytes,10,opt,name=Transport,proto3" json:"Transport,omitempty"`
	RemoteAddress     string                 `protobuf:"bytes,11,opt,name=RemoteAddress,proto3" json:"RemoteAddress,omitempty"`
	PID               int32                  `protobuf:"varint,12,opt,name=PID,proto3" json:"PID,omitempty"`
	Filename          string                 `protobuf:"bytes,13,opt,name=Filename,proto3" json:"Filename,omitempty"` // Argv[0]
	LastCheckin       int64                  `protobuf:"varint,14,opt,name=LastCheckin,proto3" json:"LastCheckin,omitempty"`
	ActiveC2          string                 `protobuf:"bytes,15,opt,name=ActiveC2,proto3" json:"ActiveC2,omitempty"`
	Version           string                 `protobuf:"bytes,16,opt,name=Version,proto3" json:"Version,omitempty"`
	Evasion           bool                   `protobuf:"varint,17,opt,name=Evasion,proto3" json:"Evasion,omitempty"`
	IsDead            bool                   `protobuf:"varint,18,opt,name=IsDead,proto3" json:"IsDead,omitempty"`
	ReconnectInterval int64                  `protobuf:"varint,19,opt,name=ReconnectInterval,proto3" json:"ReconnectInterval,omitempty"`
	ProxyURL          string                 `protobuf:"bytes,20,opt,name=ProxyURL,proto3" json:"ProxyURL,omitempty"`
	Burned            bool                   `protobuf:"varint,22,opt,name=Burned,proto3" json:"Burned,omitempty"`
	Extensions        []string               `protobuf:"bytes,23,rep,name=Extensions,proto3" json:"Extensions,omitempty"`
	// string ConfigID = 24;
	PeerID        int64  `protobuf:"varint,25,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	Locale        string `protobuf:"bytes,26,opt,name=Locale,proto3" json:"Locale,omitempty"`
	FirstContact  int64  `protobuf:"varint,27,opt,name=FirstContact,proto3" json:"FirstContact,omitempty"`
	Integrity     string `protobuf:"bytes,28,opt,name=Integrity,proto3" json:"Integrity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_clientpb_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{2}
}

func (x *Session) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Session) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Session) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Session) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *Session) GetGID() string {
	if x != nil {
		return x.GID
	}
	return ""
}

func (x *Session) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Session) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Session) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *Session) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *Session) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *Session) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Session) GetLastCheckin() int64 {
	if x != nil {
		return x.LastCheckin
	}
	return 0
}

func (x *Session) GetActiveC2() string {
	if x != nil {
		return x.ActiveC2
	}
	return ""
}

func (x *Session) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Session) GetEvasion() bool {
	if x != nil {
		return x.Evasion
	}
	return false
}

func (x *Session) GetIsDead() bool {
	if x != nil {
		return x.IsDead
	}
	return false
}

func (x *Session) GetReconnectInterval() int64 {
	if x != nil {
		return x.ReconnectInterval
	}
	return 0
}

func (x *Session) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *Session) GetBurned() bool {
	if x != nil {
		return x.Burned
	}
	return false
}

func (x *Session) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Session) GetPeerID() int64 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *Session) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Session) GetFirstContact() int64 {
	if x != nil {
		return x.FirstContact
	}
	return 0
}

func (x *Session) GetIntegrity() string {
	if x != nil {
		return x.Integrity
	}
	return ""
}

type Beacon struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ID                  string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Hostname            string                 `protobuf:"bytes,3,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	UUID                string                 `protobuf:"bytes,4,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Username            string                 `protobuf:"bytes,5,opt,name=Username,proto3" json:"Username,omitempty"`
	UID                 string                 `protobuf:"bytes,6,opt,name=UID,proto3" json:"UID,omitempty"`
	GID                 string                 `protobuf:"bytes,7,opt,name=GID,proto3" json:"GID,omitempty"`
	OS                  string                 `protobuf:"bytes,8,opt,name=OS,proto3" json:"OS,omitempty"`
	Arch                string                 `protobuf:"bytes,9,opt,name=Arch,proto3" json:"Arch,omitempty"`
	Transport           string                 `protobuf:"bytes,10,opt,name=Transport,proto3" json:"Transport,omitempty"`
	RemoteAddress       string                 `protobuf:"bytes,11,opt,name=RemoteAddress,proto3" json:"RemoteAddress,omitempty"`
	PID                 int32                  `protobuf:"varint,12,opt,name=PID,proto3" json:"PID,omitempty"`
	Filename            string                 `protobuf:"bytes,13,opt,name=Filename,proto3" json:"Filename,omitempty"` // Argv[0]
	LastCheckin         int64                  `protobuf:"varint,14,opt,name=LastCheckin,proto3" json:"LastCheckin,omitempty"`
	ActiveC2            string                 `protobuf:"bytes,15,opt,name=ActiveC2,proto3" json:"ActiveC2,omitempty"`
	Version             string                 `protobuf:"bytes,16,opt,name=Version,proto3" json:"Version,omitempty"`
	Evasion             bool                   `protobuf:"varint,17,opt,name=Evasion,proto3" json:"Evasion,omitempty"`
	IsDead              bool                   `protobuf:"varint,18,opt,name=IsDead,proto3" json:"IsDead,omitempty"`
	ProxyURL            string                 `protobuf:"bytes,20,opt,name=ProxyURL,proto3" json:"ProxyURL,omitempty"`
	ReconnectInterval   int64                  `protobuf:"varint,21,opt,name=ReconnectInterval,proto3" json:"ReconnectInterval,omitempty"`
	Interval            int64                  `protobuf:"varint,22,opt,name=Interval,proto3" json:"Interval,omitempty"`
	Jitter              int64                  `protobuf:"varint,23,opt,name=Jitter,proto3" json:"Jitter,omitempty"`
	Burned              bool                   `protobuf:"varint,24,opt,name=Burned,proto3" json:"Burned,omitempty"`
	NextCheckin         int64                  `protobuf:"varint,25,opt,name=NextCheckin,proto3" json:"NextCheckin,omitempty"`
	TasksCount          int64                  `protobuf:"varint,26,opt,name=TasksCount,proto3" json:"TasksCount,omitempty"`
	TasksCountCompleted int64                  `protobuf:"varint,27,opt,name=TasksCountCompleted,proto3" json:"TasksCountCompleted,omitempty"`
	Locale              string                 `protobuf:"bytes,28,opt,name=Locale,proto3" json:"Locale,omitempty"`
	FirstContact        int64                  `protobuf:"varint,29,opt,name=FirstContact,proto3" json:"FirstContact,omitempty"`
	Integrity           string                 `protobuf:"bytes,30,opt,name=Integrity,proto3" json:"Integrity,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Beacon) Reset() {
	*x = Beacon{}
	mi := &file_clientpb_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Beacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacon) ProtoMessage() {}

func (x *Beacon) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacon.ProtoReflect.Descriptor instead.
func (*Beacon) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{3}
}

func (x *Beacon) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Beacon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Beacon) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Beacon) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Beacon) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Beacon) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *Beacon) GetGID() string {
	if x != nil {
		return x.GID
	}
	return ""
}

func (x *Beacon) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Beacon) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Beacon) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *Beacon) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *Beacon) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *Beacon) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Beacon) GetLastCheckin() int64 {
	if x != nil {
		return x.LastCheckin
	}
	return 0
}

func (x *Beacon) GetActiveC2() string {
	if x != nil {
		return x.ActiveC2
	}
	return ""
}

func (x *Beacon) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Beacon) GetEvasion() bool {
	if x != nil {
		return x.Evasion
	}
	return false
}

func (x *Beacon) GetIsDead() bool {
	if x != nil {
		return x.IsDead
	}
	return false
}

func (x *Beacon) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *Beacon) GetReconnectInterval() int64 {
	if x != nil {
		return x.ReconnectInterval
	}
	return 0
}

func (x *Beacon) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Beacon) GetJitter() int64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *Beacon) GetBurned() bool {
	if x != nil {
		return x.Burned
	}
	return false
}

func (x *Beacon) GetNextCheckin() int64 {
	if x != nil {
		return x.NextCheckin
	}
	return 0
}

func (x *Beacon) GetTasksCount() int64 {
	if x != nil {
		return x.TasksCount
	}
	return 0
}

func (x *Beacon) GetTasksCountCompleted() int64 {
	if x != nil {
		return x.TasksCountCompleted
	}
	return 0
}

func (x *Beacon) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Beacon) GetFirstContact() int64 {
	if x != nil {
		return x.FirstContact
	}
	return 0
}

func (x *Beacon) GetIntegrity() string {
	if x != nil {
		return x.Integrity
	}
	return ""
}

type Beacons struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Beacons       []*Beacon              `protobuf:"bytes,2,rep,name=Beacons,proto3" json:"Beacons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Beacons) Reset() {
	*x = Beacons{}
	mi := &file_clientpb_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Beacons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacons) ProtoMessage() {}

func (x *Beacons) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacons.ProtoReflect.Descriptor instead.
func (*Beacons) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{4}
}

func (x *Beacons) GetBeacons() []*Beacon {
	if x != nil {
		return x.Beacons
	}
	return nil
}

type BeaconTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BeaconID      string                 `protobuf:"bytes,2,opt,name=BeaconID,proto3" json:"BeaconID,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	State         string                 `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
	SentAt        int64                  `protobuf:"varint,5,opt,name=SentAt,proto3" json:"SentAt,omitempty"`
	CompletedAt   int64                  `protobuf:"varint,6,opt,name=CompletedAt,proto3" json:"CompletedAt,omitempty"`
	Request       []byte                 `protobuf:"bytes,7,opt,name=Request,proto3" json:"Request,omitempty"`
	Response      []byte                 `protobuf:"bytes,8,opt,name=Response,proto3" json:"Response,omitempty"`
	Description   string                 `protobuf:"bytes,9,opt,name=Description,proto3" json:"Description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeaconTask) Reset() {
	*x = BeaconTask{}
	mi := &file_clientpb_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconTask) ProtoMessage() {}

func (x *BeaconTask) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconTask.ProtoReflect.Descriptor instead.
func (*BeaconTask) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{5}
}

func (x *BeaconTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BeaconTask) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *BeaconTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BeaconTask) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BeaconTask) GetSentAt() int64 {
	if x != nil {
		return x.SentAt
	}
	return 0
}

func (x *BeaconTask) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *BeaconTask) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BeaconTask) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BeaconTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BeaconTasks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BeaconID      string                 `protobuf:"bytes,1,opt,name=BeaconID,proto3" json:"BeaconID,omitempty"`
	Tasks         []*BeaconTask          `protobuf:"bytes,2,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeaconTasks) Reset() {
	*x = BeaconTasks{}
	mi := &file_clientpb_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconTasks) ProtoMessage() {}

func (x *BeaconTasks) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconTasks.ProtoReflect.Descriptor instead.
func (*BeaconTasks) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{6}
}

func (x *BeaconTasks) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *BeaconTasks) GetTasks() []*BeaconTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type BeaconIntegrity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BeaconID      string                 `protobuf:"bytes,1,opt,name=BeaconID,proto3" json:"BeaconID,omitempty"`
	Integrity     string                 `protobuf:"bytes,2,opt,name=Integrity,proto3" json:"Integrity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeaconIntegrity) Reset() {
	*x = BeaconIntegrity{}
	mi := &file_clientpb_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconIntegrity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconIntegrity) ProtoMessage() {}

func (x *BeaconIntegrity) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconIntegrity.ProtoReflect.Descriptor instead.
func (*BeaconIntegrity) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{7}
}

func (x *BeaconIntegrity) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *BeaconIntegrity) GetIntegrity() string {
	if x != nil {
		return x.Integrity
	}
	return ""
}

type ImplantC2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Priority      uint32                 `protobuf:"varint,2,opt,name=Priority,proto3" json:"Priority,omitempty"`
	URL           string                 `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	Options       string                 `protobuf:"bytes,4,opt,name=Options,proto3" json:"Options,omitempty"` // Protocol specific options
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplantC2) Reset() {
	*x = ImplantC2{}
	mi := &file_clientpb_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantC2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantC2) ProtoMessage() {}

func (x *ImplantC2) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantC2.ProtoReflect.Descriptor instead.
func (*ImplantC2) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{8}
}

func (x *ImplantC2) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImplantC2) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ImplantC2) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ImplantC2) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

type ImplantConfig struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ID                  string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ImplantBuilds       []*ImplantBuild        `protobuf:"bytes,2,rep,name=ImplantBuilds,proto3" json:"ImplantBuilds,omitempty"`
	ImplantProfileID    string                 `protobuf:"bytes,3,opt,name=ImplantProfileID,proto3" json:"ImplantProfileID,omitempty"`
	IsBeacon            bool                   `protobuf:"varint,4,opt,name=IsBeacon,proto3" json:"IsBeacon,omitempty"`
	BeaconInterval      int64                  `protobuf:"varint,5,opt,name=BeaconInterval,proto3" json:"BeaconInterval,omitempty"`
	BeaconJitter        int64                  `protobuf:"varint,6,opt,name=BeaconJitter,proto3" json:"BeaconJitter,omitempty"`
	GOOS                string                 `protobuf:"bytes,7,opt,name=GOOS,proto3" json:"GOOS,omitempty"`
	GOARCH              string                 `protobuf:"bytes,8,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"`
	Debug               bool                   `protobuf:"varint,10,opt,name=Debug,proto3" json:"Debug,omitempty"`
	Evasion             bool                   `protobuf:"varint,11,opt,name=Evasion,proto3" json:"Evasion,omitempty"`
	ObfuscateSymbols    bool                   `protobuf:"varint,12,opt,name=ObfuscateSymbols,proto3" json:"ObfuscateSymbols,omitempty"`
	TemplateName        string                 `protobuf:"bytes,13,opt,name=TemplateName,proto3" json:"TemplateName,omitempty"`
	SGNEnabled          bool                   `protobuf:"varint,14,opt,name=SGNEnabled,proto3" json:"SGNEnabled,omitempty"`
	IncludeMTLS         bool                   `protobuf:"varint,53,opt,name=IncludeMTLS,proto3" json:"IncludeMTLS,omitempty"`
	IncludeHTTP         bool                   `protobuf:"varint,16,opt,name=IncludeHTTP,proto3" json:"IncludeHTTP,omitempty"`
	IncludeWG           bool                   `protobuf:"varint,17,opt,name=IncludeWG,proto3" json:"IncludeWG,omitempty"`
	IncludeDNS          bool                   `protobuf:"varint,18,opt,name=IncludeDNS,proto3" json:"IncludeDNS,omitempty"`
	IncludeNamePipe     bool                   `protobuf:"varint,19,opt,name=IncludeNamePipe,proto3" json:"IncludeNamePipe,omitempty"`
	IncludeTCP          bool                   `protobuf:"varint,20,opt,name=IncludeTCP,proto3" json:"IncludeTCP,omitempty"`
	WGPeerTunIP         string                 `protobuf:"bytes,32,opt,name=WGPeerTunIP,proto3" json:"WGPeerTunIP,omitempty"`
	WGKeyExchangePort   uint32                 `protobuf:"varint,33,opt,name=WGKeyExchangePort,proto3" json:"WGKeyExchangePort,omitempty"`
	WGTcpCommsPort      uint32                 `protobuf:"varint,34,opt,name=WGTcpCommsPort,proto3" json:"WGTcpCommsPort,omitempty"`
	ReconnectInterval   int64                  `protobuf:"varint,40,opt,name=ReconnectInterval,proto3" json:"ReconnectInterval,omitempty"`
	MaxConnectionErrors uint32                 `protobuf:"varint,41,opt,name=MaxConnectionErrors,proto3" json:"MaxConnectionErrors,omitempty"`
	PollTimeout         int64                  `protobuf:"varint,42,opt,name=PollTimeout,proto3" json:"PollTimeout,omitempty"`
	// c2
	C2                     []*ImplantC2     `protobuf:"bytes,50,rep,name=C2,proto3" json:"C2,omitempty"`
	CanaryDomains          []string         `protobuf:"bytes,51,rep,name=CanaryDomains,proto3" json:"CanaryDomains,omitempty"`
	ConnectionStrategy     string           `protobuf:"bytes,52,opt,name=ConnectionStrategy,proto3" json:"ConnectionStrategy,omitempty"`
	LimitDomainJoined      bool             `protobuf:"varint,60,opt,name=LimitDomainJoined,proto3" json:"LimitDomainJoined,omitempty"`
	LimitDatetime          string           `protobuf:"bytes,61,opt,name=LimitDatetime,proto3" json:"LimitDatetime,omitempty"`
	LimitHostname          string           `protobuf:"bytes,62,opt,name=LimitHostname,proto3" json:"LimitHostname,omitempty"`
	LimitUsername          string           `protobuf:"bytes,63,opt,name=LimitUsername,proto3" json:"LimitUsername,omitempty"`
	LimitFileExists        string           `protobuf:"bytes,64,opt,name=LimitFileExists,proto3" json:"LimitFileExists,omitempty"`
	LimitLocale            string           `protobuf:"bytes,65,opt,name=LimitLocale,proto3" json:"LimitLocale,omitempty"`
	Format                 OutputFormat     `protobuf:"varint,100,opt,name=Format,proto3,enum=clientpb.OutputFormat" json:"Format,omitempty"`
	IsSharedLib            bool             `protobuf:"varint,101,opt,name=IsSharedLib,proto3" json:"IsSharedLib,omitempty"`
	IsService              bool             `protobuf:"varint,103,opt,name=IsService,proto3" json:"IsService,omitempty"`
	IsShellcode            bool             `protobuf:"varint,104,opt,name=IsShellcode,proto3" json:"IsShellcode,omitempty"`
	RunAtLoad              bool             `protobuf:"varint,105,opt,name=RunAtLoad,proto3" json:"RunAtLoad,omitempty"`
	DebugFile              string           `protobuf:"bytes,106,opt,name=DebugFile,proto3" json:"DebugFile,omitempty"`
	Exports                []string         `protobuf:"bytes,107,rep,name=exports,proto3" json:"exports,omitempty"`
	HTTPC2ConfigName       string           `protobuf:"bytes,150,opt,name=HTTPC2ConfigName,proto3" json:"HTTPC2ConfigName,omitempty"`
	NetGoEnabled           bool             `protobuf:"varint,151,opt,name=NetGoEnabled,proto3" json:"NetGoEnabled,omitempty"`
	TrafficEncodersEnabled bool             `protobuf:"varint,152,opt,name=TrafficEncodersEnabled,proto3" json:"TrafficEncodersEnabled,omitempty"`
	TrafficEncoders        []string         `protobuf:"bytes,153,rep,name=TrafficEncoders,proto3" json:"TrafficEncoders,omitempty"`
	Extension              string           `protobuf:"bytes,154,opt,name=Extension,proto3" json:"Extension,omitempty"`
	Assets                 []*commonpb.File `protobuf:"bytes,200,rep,name=Assets,proto3" json:"Assets,omitempty"`
	// Build Diversity Pack (fields 300+)
	EnableBuildDiversity bool                  `protobuf:"varint,300,opt,name=EnableBuildDiversity,proto3" json:"EnableBuildDiversity,omitempty"`
	DiversityConfig      *BuildDiversityConfig `protobuf:"bytes,301,opt,name=DiversityConfig,proto3" json:"DiversityConfig,omitempty"`
	// TLS Fingerprinting (fields 310+)
	EnableTLSFingerprinting bool   `protobuf:"varint,310,opt,name=EnableTLSFingerprinting,proto3" json:"EnableTLSFingerprinting,omitempty"`
	TLSFingerprint          string `protobuf:"bytes,311,opt,name=TLSFingerprint,proto3" json:"TLSFingerprint,omitempty"`
	MalleableC2Profile      string `protobuf:"bytes,312,opt,name=MalleableC2Profile,proto3" json:"MalleableC2Profile,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ImplantConfig) Reset() {
	*x = ImplantConfig{}
	mi := &file_clientpb_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantConfig) ProtoMessage() {}

func (x *ImplantConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantConfig.ProtoReflect.Descriptor instead.
func (*ImplantConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{9}
}

func (x *ImplantConfig) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImplantConfig) GetImplantBuilds() []*ImplantBuild {
	if x != nil {
		return x.ImplantBuilds
	}
	return nil
}

func (x *ImplantConfig) GetImplantProfileID() string {
	if x != nil {
		return x.ImplantProfileID
	}
	return ""
}

func (x *ImplantConfig) GetIsBeacon() bool {
	if x != nil {
		return x.IsBeacon
	}
	return false
}

func (x *ImplantConfig) GetBeaconInterval() int64 {
	if x != nil {
		return x.BeaconInterval
	}
	return 0
}

func (x *ImplantConfig) GetBeaconJitter() int64 {
	if x != nil {
		return x.BeaconJitter
	}
	return 0
}

func (x *ImplantConfig) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *ImplantConfig) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *ImplantConfig) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *ImplantConfig) GetEvasion() bool {
	if x != nil {
		return x.Evasion
	}
	return false
}

func (x *ImplantConfig) GetObfuscateSymbols() bool {
	if x != nil {
		return x.ObfuscateSymbols
	}
	return false
}

func (x *ImplantConfig) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *ImplantConfig) GetSGNEnabled() bool {
	if x != nil {
		return x.SGNEnabled
	}
	return false
}

func (x *ImplantConfig) GetIncludeMTLS() bool {
	if x != nil {
		return x.IncludeMTLS
	}
	return false
}

func (x *ImplantConfig) GetIncludeHTTP() bool {
	if x != nil {
		return x.IncludeHTTP
	}
	return false
}

func (x *ImplantConfig) GetIncludeWG() bool {
	if x != nil {
		return x.IncludeWG
	}
	return false
}

func (x *ImplantConfig) GetIncludeDNS() bool {
	if x != nil {
		return x.IncludeDNS
	}
	return false
}

func (x *ImplantConfig) GetIncludeNamePipe() bool {
	if x != nil {
		return x.IncludeNamePipe
	}
	return false
}

func (x *ImplantConfig) GetIncludeTCP() bool {
	if x != nil {
		return x.IncludeTCP
	}
	return false
}

func (x *ImplantConfig) GetWGPeerTunIP() string {
	if x != nil {
		return x.WGPeerTunIP
	}
	return ""
}

func (x *ImplantConfig) GetWGKeyExchangePort() uint32 {
	if x != nil {
		return x.WGKeyExchangePort
	}
	return 0
}

func (x *ImplantConfig) GetWGTcpCommsPort() uint32 {
	if x != nil {
		return x.WGTcpCommsPort
	}
	return 0
}

func (x *ImplantConfig) GetReconnectInterval() int64 {
	if x != nil {
		return x.ReconnectInterval
	}
	return 0
}

func (x *ImplantConfig) GetMaxConnectionErrors() uint32 {
	if x != nil {
		return x.MaxConnectionErrors
	}
	return 0
}

func (x *ImplantConfig) GetPollTimeout() int64 {
	if x != nil {
		return x.PollTimeout
	}
	return 0
}

func (x *ImplantConfig) GetC2() []*ImplantC2 {
	if x != nil {
		return x.C2
	}
	return nil
}

func (x *ImplantConfig) GetCanaryDomains() []string {
	if x != nil {
		return x.CanaryDomains
	}
	return nil
}

func (x *ImplantConfig) GetConnectionStrategy() string {
	if x != nil {
		return x.ConnectionStrategy
	}
	return ""
}

func (x *ImplantConfig) GetLimitDomainJoined() bool {
	if x != nil {
		return x.LimitDomainJoined
	}
	return false
}

func (x *ImplantConfig) GetLimitDatetime() string {
	if x != nil {
		return x.LimitDatetime
	}
	return ""
}

func (x *ImplantConfig) GetLimitHostname() string {
	if x != nil {
		return x.LimitHostname
	}
	return ""
}

func (x *ImplantConfig) GetLimitUsername() string {
	if x != nil {
		return x.LimitUsername
	}
	return ""
}

func (x *ImplantConfig) GetLimitFileExists() string {
	if x != nil {
		return x.LimitFileExists
	}
	return ""
}

func (x *ImplantConfig) GetLimitLocale() string {
	if x != nil {
		return x.LimitLocale
	}
	return ""
}

func (x *ImplantConfig) GetFormat() OutputFormat {
	if x != nil {
		return x.Format
	}
	return OutputFormat_SHARED_LIB
}

func (x *ImplantConfig) GetIsSharedLib() bool {
	if x != nil {
		return x.IsSharedLib
	}
	return false
}

func (x *ImplantConfig) GetIsService() bool {
	if x != nil {
		return x.IsService
	}
	return false
}

func (x *ImplantConfig) GetIsShellcode() bool {
	if x != nil {
		return x.IsShellcode
	}
	return false
}

func (x *ImplantConfig) GetRunAtLoad() bool {
	if x != nil {
		return x.RunAtLoad
	}
	return false
}

func (x *ImplantConfig) GetDebugFile() string {
	if x != nil {
		return x.DebugFile
	}
	return ""
}

func (x *ImplantConfig) GetExports() []string {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *ImplantConfig) GetHTTPC2ConfigName() string {
	if x != nil {
		return x.HTTPC2ConfigName
	}
	return ""
}

func (x *ImplantConfig) GetNetGoEnabled() bool {
	if x != nil {
		return x.NetGoEnabled
	}
	return false
}

func (x *ImplantConfig) GetTrafficEncodersEnabled() bool {
	if x != nil {
		return x.TrafficEncodersEnabled
	}
	return false
}

func (x *ImplantConfig) GetTrafficEncoders() []string {
	if x != nil {
		return x.TrafficEncoders
	}
	return nil
}

func (x *ImplantConfig) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *ImplantConfig) GetAssets() []*commonpb.File {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ImplantConfig) GetEnableBuildDiversity() bool {
	if x != nil {
		return x.EnableBuildDiversity
	}
	return false
}

func (x *ImplantConfig) GetDiversityConfig() *BuildDiversityConfig {
	if x != nil {
		return x.DiversityConfig
	}
	return nil
}

func (x *ImplantConfig) GetEnableTLSFingerprinting() bool {
	if x != nil {
		return x.EnableTLSFingerprinting
	}
	return false
}

func (x *ImplantConfig) GetTLSFingerprint() string {
	if x != nil {
		return x.TLSFingerprint
	}
	return ""
}

func (x *ImplantConfig) GetMalleableC2Profile() string {
	if x != nil {
		return x.MalleableC2Profile
	}
	return ""
}

// Build Diversity Configuration
type BuildDiversityConfig struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RandomizeEncoders      bool                   `protobuf:"varint,1,opt,name=RandomizeEncoders,proto3" json:"RandomizeEncoders,omitempty"`
	RandomizeGarbleOptions bool                   `protobuf:"varint,2,opt,name=RandomizeGarbleOptions,proto3" json:"RandomizeGarbleOptions,omitempty"`
	RandomizeSGNOptions    bool                   `protobuf:"varint,3,opt,name=RandomizeSGNOptions,proto3" json:"RandomizeSGNOptions,omitempty"`
	EnableEvasionChecks    bool                   `protobuf:"varint,4,opt,name=EnableEvasionChecks,proto3" json:"EnableEvasionChecks,omitempty"`
	EvasionTechniqueCount  int32                  `protobuf:"varint,5,opt,name=EvasionTechniqueCount,proto3" json:"EvasionTechniqueCount,omitempty"`
	ReproducibleSeed       string                 `protobuf:"bytes,6,opt,name=ReproducibleSeed,proto3" json:"ReproducibleSeed,omitempty"`
	// Advanced options
	CustomBuildTags       []string `protobuf:"bytes,10,rep,name=CustomBuildTags,proto3" json:"CustomBuildTags,omitempty"`
	EnableNovelTechniques bool     `protobuf:"varint,11,opt,name=EnableNovelTechniques,proto3" json:"EnableNovelTechniques,omitempty"`
	MinSGNIterations      int32    `protobuf:"varint,12,opt,name=MinSGNIterations,proto3" json:"MinSGNIterations,omitempty"`
	MaxSGNIterations      int32    `protobuf:"varint,13,opt,name=MaxSGNIterations,proto3" json:"MaxSGNIterations,omitempty"`
	MinNoveltyScore       float64  `protobuf:"fixed64,14,opt,name=MinNoveltyScore,proto3" json:"MinNoveltyScore,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BuildDiversityConfig) Reset() {
	*x = BuildDiversityConfig{}
	mi := &file_clientpb_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildDiversityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDiversityConfig) ProtoMessage() {}

func (x *BuildDiversityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDiversityConfig.ProtoReflect.Descriptor instead.
func (*BuildDiversityConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{10}
}

func (x *BuildDiversityConfig) GetRandomizeEncoders() bool {
	if x != nil {
		return x.RandomizeEncoders
	}
	return false
}

func (x *BuildDiversityConfig) GetRandomizeGarbleOptions() bool {
	if x != nil {
		return x.RandomizeGarbleOptions
	}
	return false
}

func (x *BuildDiversityConfig) GetRandomizeSGNOptions() bool {
	if x != nil {
		return x.RandomizeSGNOptions
	}
	return false
}

func (x *BuildDiversityConfig) GetEnableEvasionChecks() bool {
	if x != nil {
		return x.EnableEvasionChecks
	}
	return false
}

func (x *BuildDiversityConfig) GetEvasionTechniqueCount() int32 {
	if x != nil {
		return x.EvasionTechniqueCount
	}
	return 0
}

func (x *BuildDiversityConfig) GetReproducibleSeed() string {
	if x != nil {
		return x.ReproducibleSeed
	}
	return ""
}

func (x *BuildDiversityConfig) GetCustomBuildTags() []string {
	if x != nil {
		return x.CustomBuildTags
	}
	return nil
}

func (x *BuildDiversityConfig) GetEnableNovelTechniques() bool {
	if x != nil {
		return x.EnableNovelTechniques
	}
	return false
}

func (x *BuildDiversityConfig) GetMinSGNIterations() int32 {
	if x != nil {
		return x.MinSGNIterations
	}
	return 0
}

func (x *BuildDiversityConfig) GetMaxSGNIterations() int32 {
	if x != nil {
		return x.MaxSGNIterations
	}
	return 0
}

func (x *BuildDiversityConfig) GetMinNoveltyScore() float64 {
	if x != nil {
		return x.MinNoveltyScore
	}
	return 0
}

type TrafficEncoder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Wasm          *commonpb.File         `protobuf:"bytes,2,opt,name=Wasm,proto3" json:"Wasm,omitempty"`
	SkipTests     bool                   `protobuf:"varint,8,opt,name=SkipTests,proto3" json:"SkipTests,omitempty"`
	TestID        string                 `protobuf:"bytes,9,opt,name=TestID,proto3" json:"TestID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrafficEncoder) Reset() {
	*x = TrafficEncoder{}
	mi := &file_clientpb_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficEncoder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficEncoder) ProtoMessage() {}

func (x *TrafficEncoder) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficEncoder.ProtoReflect.Descriptor instead.
func (*TrafficEncoder) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{11}
}

func (x *TrafficEncoder) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TrafficEncoder) GetWasm() *commonpb.File {
	if x != nil {
		return x.Wasm
	}
	return nil
}

func (x *TrafficEncoder) GetSkipTests() bool {
	if x != nil {
		return x.SkipTests
	}
	return false
}

func (x *TrafficEncoder) GetTestID() string {
	if x != nil {
		return x.TestID
	}
	return ""
}

type TrafficEncoderMap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File Name -> TrafficEncoder
	Encoders      map[string]*TrafficEncoder `protobuf:"bytes,1,rep,name=Encoders,proto3" json:"Encoders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrafficEncoderMap) Reset() {
	*x = TrafficEncoderMap{}
	mi := &file_clientpb_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficEncoderMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficEncoderMap) ProtoMessage() {}

func (x *TrafficEncoderMap) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficEncoderMap.ProtoReflect.Descriptor instead.
func (*TrafficEncoderMap) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{12}
}

func (x *TrafficEncoderMap) GetEncoders() map[string]*TrafficEncoder {
	if x != nil {
		return x.Encoders
	}
	return nil
}

type TrafficEncoderTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Completed     bool                   `protobuf:"varint,2,opt,name=Completed,proto3" json:"Completed,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=Success,proto3" json:"Success,omitempty"`
	Duration      int64                  `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Err           string                 `protobuf:"bytes,9,opt,name=Err,proto3" json:"Err,omitempty"`
	Sample        []byte                 `protobuf:"bytes,10,opt,name=Sample,proto3" json:"Sample,omitempty"` // Only used on failed tests
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrafficEncoderTest) Reset() {
	*x = TrafficEncoderTest{}
	mi := &file_clientpb_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficEncoderTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficEncoderTest) ProtoMessage() {}

func (x *TrafficEncoderTest) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficEncoderTest.ProtoReflect.Descriptor instead.
func (*TrafficEncoderTest) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{13}
}

func (x *TrafficEncoderTest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficEncoderTest) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *TrafficEncoderTest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TrafficEncoderTest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TrafficEncoderTest) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *TrafficEncoderTest) GetSample() []byte {
	if x != nil {
		return x.Sample
	}
	return nil
}

type TrafficEncoderTests struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Encoder       *TrafficEncoder        `protobuf:"bytes,1,opt,name=Encoder,proto3" json:"Encoder,omitempty"`
	Tests         []*TrafficEncoderTest  `protobuf:"bytes,2,rep,name=Tests,proto3" json:"Tests,omitempty"`
	TotalDuration int64                  `protobuf:"varint,3,opt,name=TotalDuration,proto3" json:"TotalDuration,omitempty"`
	TotalTests    int32                  `protobuf:"varint,4,opt,name=TotalTests,proto3" json:"TotalTests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrafficEncoderTests) Reset() {
	*x = TrafficEncoderTests{}
	mi := &file_clientpb_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficEncoderTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficEncoderTests) ProtoMessage() {}

func (x *TrafficEncoderTests) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficEncoderTests.ProtoReflect.Descriptor instead.
func (*TrafficEncoderTests) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{14}
}

func (x *TrafficEncoderTests) GetEncoder() *TrafficEncoder {
	if x != nil {
		return x.Encoder
	}
	return nil
}

func (x *TrafficEncoderTests) GetTests() []*TrafficEncoderTest {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *TrafficEncoderTests) GetTotalDuration() int64 {
	if x != nil {
		return x.TotalDuration
	}
	return 0
}

func (x *TrafficEncoderTests) GetTotalTests() int32 {
	if x != nil {
		return x.TotalTests
	}
	return 0
}

type ExternalImplantConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *ImplantConfig         `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	Build         *ImplantBuild          `protobuf:"bytes,2,opt,name=Build,proto3" json:"Build,omitempty"`
	HTTPC2        *HTTPC2Config          `protobuf:"bytes,3,opt,name=HTTPC2,proto3" json:"HTTPC2,omitempty"`
	Encoders      map[string]uint64      `protobuf:"bytes,4,rep,name=encoders,proto3" json:"encoders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalImplantConfig) Reset() {
	*x = ExternalImplantConfig{}
	mi := &file_clientpb_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalImplantConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalImplantConfig) ProtoMessage() {}

func (x *ExternalImplantConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalImplantConfig.ProtoReflect.Descriptor instead.
func (*ExternalImplantConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{15}
}

func (x *ExternalImplantConfig) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ExternalImplantConfig) GetBuild() *ImplantBuild {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *ExternalImplantConfig) GetHTTPC2() *HTTPC2Config {
	if x != nil {
		return x.HTTPC2
	}
	return nil
}

func (x *ExternalImplantConfig) GetEncoders() map[string]uint64 {
	if x != nil {
		return x.Encoders
	}
	return nil
}

type ExternalImplantBinary struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ImplantBuildID string                 `protobuf:"bytes,2,opt,name=ImplantBuildID,proto3" json:"ImplantBuildID,omitempty"`
	File           *commonpb.File         `protobuf:"bytes,3,opt,name=File,proto3" json:"File,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExternalImplantBinary) Reset() {
	*x = ExternalImplantBinary{}
	mi := &file_clientpb_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalImplantBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalImplantBinary) ProtoMessage() {}

func (x *ExternalImplantBinary) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalImplantBinary.ProtoReflect.Descriptor instead.
func (*ExternalImplantBinary) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{16}
}

func (x *ExternalImplantBinary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalImplantBinary) GetImplantBuildID() string {
	if x != nil {
		return x.ImplantBuildID
	}
	return ""
}

func (x *ExternalImplantBinary) GetFile() *commonpb.File {
	if x != nil {
		return x.File
	}
	return nil
}

// Configs of previously built implants
type ImplantBuilds struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Configs       map[string]*ImplantConfig `protobuf:"bytes,1,rep,name=Configs,proto3" json:"Configs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ResourceIDs   map[string]*ResourceID    `protobuf:"bytes,2,rep,name=ResourceIDs,proto3" json:"ResourceIDs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Staged        map[string]bool           `protobuf:"bytes,3,rep,name=staged,proto3" json:"staged,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplantBuilds) Reset() {
	*x = ImplantBuilds{}
	mi := &file_clientpb_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantBuilds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantBuilds) ProtoMessage() {}

func (x *ImplantBuilds) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantBuilds.ProtoReflect.Descriptor instead.
func (*ImplantBuilds) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{17}
}

func (x *ImplantBuilds) GetConfigs() map[string]*ImplantConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *ImplantBuilds) GetResourceIDs() map[string]*ResourceID {
	if x != nil {
		return x.ResourceIDs
	}
	return nil
}

func (x *ImplantBuilds) GetStaged() map[string]bool {
	if x != nil {
		return x.Staged
	}
	return nil
}

type ImplantStageReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Build         []string               `protobuf:"bytes,1,rep,name=Build,proto3" json:"Build,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplantStageReq) Reset() {
	*x = ImplantStageReq{}
	mi := &file_clientpb_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantStageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantStageReq) ProtoMessage() {}

func (x *ImplantStageReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantStageReq.ProtoReflect.Descriptor instead.
func (*ImplantStageReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{18}
}

func (x *ImplantStageReq) GetBuild() []string {
	if x != nil {
		return x.Build
	}
	return nil
}

type ImplantBuild struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ID                      string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                    string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	MD5                     string                 `protobuf:"bytes,3,opt,name=MD5,proto3" json:"MD5,omitempty"`
	SHA1                    string                 `protobuf:"bytes,4,opt,name=SHA1,proto3" json:"SHA1,omitempty"`
	SHA256                  string                 `protobuf:"bytes,5,opt,name=SHA256,proto3" json:"SHA256,omitempty"`
	Burned                  bool                   `protobuf:"varint,6,opt,name=Burned,proto3" json:"Burned,omitempty"`
	ImplantID               uint64                 `protobuf:"varint,7,opt,name=ImplantID,proto3" json:"ImplantID,omitempty"`
	ImplantConfigID         string                 `protobuf:"bytes,8,opt,name=ImplantConfigID,proto3" json:"ImplantConfigID,omitempty"`
	AgeServerPublicKey      string                 `protobuf:"bytes,9,opt,name=AgeServerPublicKey,proto3" json:"AgeServerPublicKey,omitempty"`
	PeerPublicKey           string                 `protobuf:"bytes,10,opt,name=PeerPublicKey,proto3" json:"PeerPublicKey,omitempty"`
	PeerPrivateKey          string                 `protobuf:"bytes,11,opt,name=PeerPrivateKey,proto3" json:"PeerPrivateKey,omitempty"`
	PeerPublicKeySignature  string                 `protobuf:"bytes,12,opt,name=PeerPublicKeySignature,proto3" json:"PeerPublicKeySignature,omitempty"`
	MinisignServerPublicKey string                 `protobuf:"bytes,13,opt,name=MinisignServerPublicKey,proto3" json:"MinisignServerPublicKey,omitempty"`
	PeerPublicKeyDigest     string                 `protobuf:"bytes,14,opt,name=PeerPublicKeyDigest,proto3" json:"PeerPublicKeyDigest,omitempty"`
	WGImplantPrivKey        string                 `protobuf:"bytes,15,opt,name=WGImplantPrivKey,proto3" json:"WGImplantPrivKey,omitempty"`
	WGServerPubKey          string                 `protobuf:"bytes,16,opt,name=WGServerPubKey,proto3" json:"WGServerPubKey,omitempty"`
	MtlsCACert              string                 `protobuf:"bytes,17,opt,name=MtlsCACert,proto3" json:"MtlsCACert,omitempty"`
	MtlsCert                string                 `protobuf:"bytes,18,opt,name=MtlsCert,proto3" json:"MtlsCert,omitempty"`
	MtlsKey                 string                 `protobuf:"bytes,19,opt,name=MtlsKey,proto3" json:"MtlsKey,omitempty"`
	Stage                   bool                   `protobuf:"varint,20,opt,name=Stage,proto3" json:"Stage,omitempty"`
	// Build Diversity Metadata (fields 100+)
	DiversityEnabled         bool     `protobuf:"varint,100,opt,name=DiversityEnabled,proto3" json:"DiversityEnabled,omitempty"`
	EncodersUsed             []string `protobuf:"bytes,101,rep,name=EncodersUsed,proto3" json:"EncodersUsed,omitempty"`
	EvasionTechniquesApplied []string `protobuf:"bytes,102,rep,name=EvasionTechniquesApplied,proto3" json:"EvasionTechniquesApplied,omitempty"`
	SGNIterationsUsed        int32    `protobuf:"varint,103,opt,name=SGNIterationsUsed,proto3" json:"SGNIterationsUsed,omitempty"`
	DiversitySeed            string   `protobuf:"bytes,104,opt,name=DiversitySeed,proto3" json:"DiversitySeed,omitempty"`
	GarbleSeed               string   `protobuf:"bytes,105,opt,name=GarbleSeed,proto3" json:"GarbleSeed,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ImplantBuild) Reset() {
	*x = ImplantBuild{}
	mi := &file_clientpb_client_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantBuild) ProtoMessage() {}

func (x *ImplantBuild) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantBuild.ProtoReflect.Descriptor instead.
func (*ImplantBuild) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{19}
}

func (x *ImplantBuild) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImplantBuild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImplantBuild) GetMD5() string {
	if x != nil {
		return x.MD5
	}
	return ""
}

func (x *ImplantBuild) GetSHA1() string {
	if x != nil {
		return x.SHA1
	}
	return ""
}

func (x *ImplantBuild) GetSHA256() string {
	if x != nil {
		return x.SHA256
	}
	return ""
}

func (x *ImplantBuild) GetBurned() bool {
	if x != nil {
		return x.Burned
	}
	return false
}

func (x *ImplantBuild) GetImplantID() uint64 {
	if x != nil {
		return x.ImplantID
	}
	return 0
}

func (x *ImplantBuild) GetImplantConfigID() string {
	if x != nil {
		return x.ImplantConfigID
	}
	return ""
}

func (x *ImplantBuild) GetAgeServerPublicKey() string {
	if x != nil {
		return x.AgeServerPublicKey
	}
	return ""
}

func (x *ImplantBuild) GetPeerPublicKey() string {
	if x != nil {
		return x.PeerPublicKey
	}
	return ""
}

func (x *ImplantBuild) GetPeerPrivateKey() string {
	if x != nil {
		return x.PeerPrivateKey
	}
	return ""
}

func (x *ImplantBuild) GetPeerPublicKeySignature() string {
	if x != nil {
		return x.PeerPublicKeySignature
	}
	return ""
}

func (x *ImplantBuild) GetMinisignServerPublicKey() string {
	if x != nil {
		return x.MinisignServerPublicKey
	}
	return ""
}

func (x *ImplantBuild) GetPeerPublicKeyDigest() string {
	if x != nil {
		return x.PeerPublicKeyDigest
	}
	return ""
}

func (x *ImplantBuild) GetWGImplantPrivKey() string {
	if x != nil {
		return x.WGImplantPrivKey
	}
	return ""
}

func (x *ImplantBuild) GetWGServerPubKey() string {
	if x != nil {
		return x.WGServerPubKey
	}
	return ""
}

func (x *ImplantBuild) GetMtlsCACert() string {
	if x != nil {
		return x.MtlsCACert
	}
	return ""
}

func (x *ImplantBuild) GetMtlsCert() string {
	if x != nil {
		return x.MtlsCert
	}
	return ""
}

func (x *ImplantBuild) GetMtlsKey() string {
	if x != nil {
		return x.MtlsKey
	}
	return ""
}

func (x *ImplantBuild) GetStage() bool {
	if x != nil {
		return x.Stage
	}
	return false
}

func (x *ImplantBuild) GetDiversityEnabled() bool {
	if x != nil {
		return x.DiversityEnabled
	}
	return false
}

func (x *ImplantBuild) GetEncodersUsed() []string {
	if x != nil {
		return x.EncodersUsed
	}
	return nil
}

func (x *ImplantBuild) GetEvasionTechniquesApplied() []string {
	if x != nil {
		return x.EvasionTechniquesApplied
	}
	return nil
}

func (x *ImplantBuild) GetSGNIterationsUsed() int32 {
	if x != nil {
		return x.SGNIterationsUsed
	}
	return 0
}

func (x *ImplantBuild) GetDiversitySeed() string {
	if x != nil {
		return x.DiversitySeed
	}
	return ""
}

func (x *ImplantBuild) GetGarbleSeed() string {
	if x != nil {
		return x.GarbleSeed
	}
	return ""
}

type CompilerTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GOOS          string                 `protobuf:"bytes,1,opt,name=GOOS,proto3" json:"GOOS,omitempty"`     // The server's OS
	GOARCH        string                 `protobuf:"bytes,2,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"` // The server's Arch
	Format        OutputFormat           `protobuf:"varint,3,opt,name=Format,proto3,enum=clientpb.OutputFormat" json:"Format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompilerTarget) Reset() {
	*x = CompilerTarget{}
	mi := &file_clientpb_client_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompilerTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilerTarget) ProtoMessage() {}

func (x *CompilerTarget) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilerTarget.ProtoReflect.Descriptor instead.
func (*CompilerTarget) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{20}
}

func (x *CompilerTarget) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *CompilerTarget) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *CompilerTarget) GetFormat() OutputFormat {
	if x != nil {
		return x.Format
	}
	return OutputFormat_SHARED_LIB
}

type CrossCompiler struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetGOOS    string                 `protobuf:"bytes,1,opt,name=TargetGOOS,proto3" json:"TargetGOOS,omitempty"`     // The server's OS
	TargetGOARCH  string                 `protobuf:"bytes,2,opt,name=TargetGOARCH,proto3" json:"TargetGOARCH,omitempty"` // The server's Arch
	CCPath        string                 `protobuf:"bytes,3,opt,name=CCPath,proto3" json:"CCPath,omitempty"`
	CXXPath       string                 `protobuf:"bytes,4,opt,name=CXXPath,proto3" json:"CXXPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrossCompiler) Reset() {
	*x = CrossCompiler{}
	mi := &file_clientpb_client_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrossCompiler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossCompiler) ProtoMessage() {}

func (x *CrossCompiler) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossCompiler.ProtoReflect.Descriptor instead.
func (*CrossCompiler) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{21}
}

func (x *CrossCompiler) GetTargetGOOS() string {
	if x != nil {
		return x.TargetGOOS
	}
	return ""
}

func (x *CrossCompiler) GetTargetGOARCH() string {
	if x != nil {
		return x.TargetGOARCH
	}
	return ""
}

func (x *CrossCompiler) GetCCPath() string {
	if x != nil {
		return x.CCPath
	}
	return ""
}

func (x *CrossCompiler) GetCXXPath() string {
	if x != nil {
		return x.CXXPath
	}
	return ""
}

type Compiler struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	GOOS               string                 `protobuf:"bytes,1,opt,name=GOOS,proto3" json:"GOOS,omitempty"`     // The server's OS
	GOARCH             string                 `protobuf:"bytes,2,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"` // The server's Arch
	Targets            []*CompilerTarget      `protobuf:"bytes,3,rep,name=Targets,proto3" json:"Targets,omitempty"`
	CrossCompilers     []*CrossCompiler       `protobuf:"bytes,4,rep,name=CrossCompilers,proto3" json:"CrossCompilers,omitempty"`
	UnsupportedTargets []*CompilerTarget      `protobuf:"bytes,5,rep,name=UnsupportedTargets,proto3" json:"UnsupportedTargets,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Compiler) Reset() {
	*x = Compiler{}
	mi := &file_clientpb_client_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compiler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compiler) ProtoMessage() {}

func (x *Compiler) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compiler.ProtoReflect.Descriptor instead.
func (*Compiler) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{22}
}

func (x *Compiler) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *Compiler) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *Compiler) GetTargets() []*CompilerTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Compiler) GetCrossCompilers() []*CrossCompiler {
	if x != nil {
		return x.CrossCompilers
	}
	return nil
}

func (x *Compiler) GetUnsupportedTargets() []*CompilerTarget {
	if x != nil {
		return x.UnsupportedTargets
	}
	return nil
}

type DeleteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReq) Reset() {
	*x = DeleteReq{}
	mi := &file_clientpb_client_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReq) ProtoMessage() {}

func (x *DeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReq.ProtoReflect.Descriptor instead.
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DNSCanary - Single canary and metadata
type DNSCanary struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ID             string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ImplantName    string                 `protobuf:"bytes,2,opt,name=ImplantName,proto3" json:"ImplantName,omitempty"`
	Domain         string                 `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Triggered      bool                   `protobuf:"varint,4,opt,name=Triggered,proto3" json:"Triggered,omitempty"`
	FirstTriggered string                 `protobuf:"bytes,5,opt,name=FirstTriggered,proto3" json:"FirstTriggered,omitempty"`
	LatestTrigger  string                 `protobuf:"bytes,6,opt,name=LatestTrigger,proto3" json:"LatestTrigger,omitempty"`
	Count          uint32                 `protobuf:"varint,7,opt,name=Count,proto3" json:"Count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DNSCanary) Reset() {
	*x = DNSCanary{}
	mi := &file_clientpb_client_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSCanary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSCanary) ProtoMessage() {}

func (x *DNSCanary) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSCanary.ProtoReflect.Descriptor instead.
func (*DNSCanary) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{24}
}

func (x *DNSCanary) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DNSCanary) GetImplantName() string {
	if x != nil {
		return x.ImplantName
	}
	return ""
}

func (x *DNSCanary) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSCanary) GetTriggered() bool {
	if x != nil {
		return x.Triggered
	}
	return false
}

func (x *DNSCanary) GetFirstTriggered() string {
	if x != nil {
		return x.FirstTriggered
	}
	return ""
}

func (x *DNSCanary) GetLatestTrigger() string {
	if x != nil {
		return x.LatestTrigger
	}
	return ""
}

func (x *DNSCanary) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Canaries struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Canaries      []*DNSCanary           `protobuf:"bytes,1,rep,name=Canaries,proto3" json:"Canaries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Canaries) Reset() {
	*x = Canaries{}
	mi := &file_clientpb_client_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Canaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canaries) ProtoMessage() {}

func (x *Canaries) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canaries.ProtoReflect.Descriptor instead.
func (*Canaries) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{25}
}

func (x *Canaries) GetCanaries() []*DNSCanary {
	if x != nil {
		return x.Canaries
	}
	return nil
}

// UniqueWGIP - Unique wireguard IP
type UniqueWGIP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IP            string                 `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UniqueWGIP) Reset() {
	*x = UniqueWGIP{}
	mi := &file_clientpb_client_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniqueWGIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueWGIP) ProtoMessage() {}

func (x *UniqueWGIP) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueWGIP.ProtoReflect.Descriptor instead.
func (*UniqueWGIP) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{26}
}

func (x *UniqueWGIP) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type ImplantProfile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Config        *ImplantConfig         `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplantProfile) Reset() {
	*x = ImplantProfile{}
	mi := &file_clientpb_client_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantProfile) ProtoMessage() {}

func (x *ImplantProfile) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantProfile.ProtoReflect.Descriptor instead.
func (*ImplantProfile) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{27}
}

func (x *ImplantProfile) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImplantProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImplantProfile) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ImplantProfiles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profiles      []*ImplantProfile      `protobuf:"bytes,1,rep,name=Profiles,proto3" json:"Profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImplantProfiles) Reset() {
	*x = ImplantProfiles{}
	mi := &file_clientpb_client_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantProfiles) ProtoMessage() {}

func (x *ImplantProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantProfiles.ProtoReflect.Descriptor instead.
func (*ImplantProfiles) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{28}
}

func (x *ImplantProfiles) GetProfiles() []*ImplantProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type RegenerateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImplantName   string                 `protobuf:"bytes,1,opt,name=ImplantName,proto3" json:"ImplantName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegenerateReq) Reset() {
	*x = RegenerateReq{}
	mi := &file_clientpb_client_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegenerateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateReq) ProtoMessage() {}

func (x *RegenerateReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateReq.ProtoReflect.Descriptor instead.
func (*RegenerateReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{29}
}

func (x *RegenerateReq) GetImplantName() string {
	if x != nil {
		return x.ImplantName
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            uint32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Protocol      string                 `protobuf:"bytes,4,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Port          uint32                 `protobuf:"varint,5,opt,name=Port,proto3" json:"Port,omitempty"`
	Domains       []string               `protobuf:"bytes,6,rep,name=Domains,proto3" json:"Domains,omitempty"`
	ProfileName   string                 `protobuf:"bytes,7,opt,name=ProfileName,proto3" json:"ProfileName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_clientpb_client_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{30}
}

func (x *Job) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Job) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Job) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Job) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Job) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type Jobs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Active        []*Job                 `protobuf:"bytes,1,rep,name=Active,proto3" json:"Active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Jobs) Reset() {
	*x = Jobs{}
	mi := &file_clientpb_client_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jobs) ProtoMessage() {}

func (x *Jobs) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jobs.ProtoReflect.Descriptor instead.
func (*Jobs) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{31}
}

func (x *Jobs) GetActive() []*Job {
	if x != nil {
		return x.Active
	}
	return nil
}

type KillJobReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            uint32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KillJobReq) Reset() {
	*x = KillJobReq{}
	mi := &file_clientpb_client_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillJobReq) ProtoMessage() {}

func (x *KillJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillJobReq.ProtoReflect.Descriptor instead.
func (*KillJobReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{32}
}

func (x *KillJobReq) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type RestartJobReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobIDs        []uint32               `protobuf:"varint,1,rep,packed,name=JobIDs,proto3" json:"JobIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartJobReq) Reset() {
	*x = RestartJobReq{}
	mi := &file_clientpb_client_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartJobReq) ProtoMessage() {}

func (x *RestartJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartJobReq.ProtoReflect.Descriptor instead.
func (*RestartJobReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{33}
}

func (x *RestartJobReq) GetJobIDs() []uint32 {
	if x != nil {
		return x.JobIDs
	}
	return nil
}

type KillJob struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            uint32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KillJob) Reset() {
	*x = KillJob{}
	mi := &file_clientpb_client_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillJob) ProtoMessage() {}

func (x *KillJob) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillJob.ProtoReflect.Descriptor instead.
func (*KillJob) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{34}
}

func (x *KillJob) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *KillJob) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// [ Listeners ] ----------------------------------------
type ListenerJob struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ID            string                  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type          string                  `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	JobID         uint32                  `protobuf:"varint,3,opt,name=JobID,proto3" json:"JobID,omitempty"`
	MTLSConf      *MTLSListenerReq        `protobuf:"bytes,4,opt,name=MTLSConf,proto3" json:"MTLSConf,omitempty"`
	WGConf        *WGListenerReq          `protobuf:"bytes,5,opt,name=WGConf,proto3" json:"WGConf,omitempty"`
	DNSConf       *DNSListenerReq         `protobuf:"bytes,6,opt,name=DNSConf,proto3" json:"DNSConf,omitempty"`
	HTTPConf      *HTTPListenerReq        `protobuf:"bytes,7,opt,name=HTTPConf,proto3" json:"HTTPConf,omitempty"`
	MultiConf     *MultiplayerListenerReq `protobuf:"bytes,8,opt,name=MultiConf,proto3" json:"MultiConf,omitempty"`
	TCPConf       *StagerListenerReq      `protobuf:"bytes,9,opt,name=TCPConf,proto3" json:"TCPConf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerJob) Reset() {
	*x = ListenerJob{}
	mi := &file_clientpb_client_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerJob) ProtoMessage() {}

func (x *ListenerJob) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerJob.ProtoReflect.Descriptor instead.
func (*ListenerJob) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{35}
}

func (x *ListenerJob) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ListenerJob) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListenerJob) GetJobID() uint32 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *ListenerJob) GetMTLSConf() *MTLSListenerReq {
	if x != nil {
		return x.MTLSConf
	}
	return nil
}

func (x *ListenerJob) GetWGConf() *WGListenerReq {
	if x != nil {
		return x.WGConf
	}
	return nil
}

func (x *ListenerJob) GetDNSConf() *DNSListenerReq {
	if x != nil {
		return x.DNSConf
	}
	return nil
}

func (x *ListenerJob) GetHTTPConf() *HTTPListenerReq {
	if x != nil {
		return x.HTTPConf
	}
	return nil
}

func (x *ListenerJob) GetMultiConf() *MultiplayerListenerReq {
	if x != nil {
		return x.MultiConf
	}
	return nil
}

func (x *ListenerJob) GetTCPConf() *StagerListenerReq {
	if x != nil {
		return x.TCPConf
	}
	return nil
}

type MultiplayerListenerReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiplayerListenerReq) Reset() {
	*x = MultiplayerListenerReq{}
	mi := &file_clientpb_client_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiplayerListenerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiplayerListenerReq) ProtoMessage() {}

func (x *MultiplayerListenerReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiplayerListenerReq.ProtoReflect.Descriptor instead.
func (*MultiplayerListenerReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{36}
}

func (x *MultiplayerListenerReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MultiplayerListenerReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type MTLSListenerReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MTLSListenerReq) Reset() {
	*x = MTLSListenerReq{}
	mi := &file_clientpb_client_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MTLSListenerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSListenerReq) ProtoMessage() {}

func (x *MTLSListenerReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSListenerReq.ProtoReflect.Descriptor instead.
func (*MTLSListenerReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{37}
}

func (x *MTLSListenerReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MTLSListenerReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type WGListenerReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	Port          uint32                 `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	TunIP         string                 `protobuf:"bytes,2,opt,name=TunIP,proto3" json:"TunIP,omitempty"`
	NPort         uint32                 `protobuf:"varint,3,opt,name=NPort,proto3" json:"NPort,omitempty"`
	KeyPort       uint32                 `protobuf:"varint,4,opt,name=KeyPort,proto3" json:"KeyPort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WGListenerReq) Reset() {
	*x = WGListenerReq{}
	mi := &file_clientpb_client_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WGListenerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WGListenerReq) ProtoMessage() {}

func (x *WGListenerReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WGListenerReq.ProtoReflect.Descriptor instead.
func (*WGListenerReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{38}
}

func (x *WGListenerReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *WGListenerReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WGListenerReq) GetTunIP() string {
	if x != nil {
		return x.TunIP
	}
	return ""
}

func (x *WGListenerReq) GetNPort() uint32 {
	if x != nil {
		return x.NPort
	}
	return 0
}

func (x *WGListenerReq) GetKeyPort() uint32 {
	if x != nil {
		return x.KeyPort
	}
	return 0
}

type DNSListenerReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domains       []string               `protobuf:"bytes,1,rep,name=Domains,proto3" json:"Domains,omitempty"`
	Canaries      bool                   `protobuf:"varint,2,opt,name=Canaries,proto3" json:"Canaries,omitempty"`
	Host          string                 `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
	Port          uint32                 `protobuf:"varint,4,opt,name=Port,proto3" json:"Port,omitempty"`
	EnforceOTP    bool                   `protobuf:"varint,6,opt,name=EnforceOTP,proto3" json:"EnforceOTP,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSListenerReq) Reset() {
	*x = DNSListenerReq{}
	mi := &file_clientpb_client_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSListenerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSListenerReq) ProtoMessage() {}

func (x *DNSListenerReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSListenerReq.ProtoReflect.Descriptor instead.
func (*DNSListenerReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{39}
}

func (x *DNSListenerReq) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *DNSListenerReq) GetCanaries() bool {
	if x != nil {
		return x.Canaries
	}
	return false
}

func (x *DNSListenerReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DNSListenerReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DNSListenerReq) GetEnforceOTP() bool {
	if x != nil {
		return x.EnforceOTP
	}
	return false
}

type HTTPListenerReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Domain          string                 `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Host            string                 `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	Port            uint32                 `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Secure          bool                   `protobuf:"varint,4,opt,name=Secure,proto3" json:"Secure,omitempty"` // Enable HTTPS
	Website         string                 `protobuf:"bytes,5,opt,name=Website,proto3" json:"Website,omitempty"`
	Cert            []byte                 `protobuf:"bytes,6,opt,name=Cert,proto3" json:"Cert,omitempty"`
	Key             []byte                 `protobuf:"bytes,7,opt,name=Key,proto3" json:"Key,omitempty"`
	ACME            bool                   `protobuf:"varint,8,opt,name=ACME,proto3" json:"ACME,omitempty"`
	EnforceOTP      bool                   `protobuf:"varint,10,opt,name=EnforceOTP,proto3" json:"EnforceOTP,omitempty"`
	LongPollTimeout int64                  `protobuf:"varint,11,opt,name=LongPollTimeout,proto3" json:"LongPollTimeout,omitempty"`
	LongPollJitter  int64                  `protobuf:"varint,12,opt,name=LongPollJitter,proto3" json:"LongPollJitter,omitempty"`
	RandomizeJARM   bool                   `protobuf:"varint,13,opt,name=RandomizeJARM,proto3" json:"RandomizeJARM,omitempty"` // Only valid with Secure = true
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HTTPListenerReq) Reset() {
	*x = HTTPListenerReq{}
	mi := &file_clientpb_client_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPListenerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPListenerReq) ProtoMessage() {}

func (x *HTTPListenerReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPListenerReq.ProtoReflect.Descriptor instead.
func (*HTTPListenerReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{40}
}

func (x *HTTPListenerReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HTTPListenerReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HTTPListenerReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HTTPListenerReq) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *HTTPListenerReq) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *HTTPListenerReq) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *HTTPListenerReq) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HTTPListenerReq) GetACME() bool {
	if x != nil {
		return x.ACME
	}
	return false
}

func (x *HTTPListenerReq) GetEnforceOTP() bool {
	if x != nil {
		return x.EnforceOTP
	}
	return false
}

func (x *HTTPListenerReq) GetLongPollTimeout() int64 {
	if x != nil {
		return x.LongPollTimeout
	}
	return 0
}

func (x *HTTPListenerReq) GetLongPollJitter() int64 {
	if x != nil {
		return x.LongPollJitter
	}
	return 0
}

func (x *HTTPListenerReq) GetRandomizeJARM() bool {
	if x != nil {
		return x.RandomizeJARM
	}
	return false
}

// Named Pipes Messages for pivoting
type NamedPipesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipeName      string                 `protobuf:"bytes,16,opt,name=PipeName,proto3" json:"PipeName,omitempty"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedPipesReq) Reset() {
	*x = NamedPipesReq{}
	mi := &file_clientpb_client_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedPipesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedPipesReq) ProtoMessage() {}

func (x *NamedPipesReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedPipesReq.ProtoReflect.Descriptor instead.
func (*NamedPipesReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{41}
}

func (x *NamedPipesReq) GetPipeName() string {
	if x != nil {
		return x.PipeName
	}
	return ""
}

func (x *NamedPipesReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type NamedPipes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Err           string                 `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
	Response      *commonpb.Response     `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedPipes) Reset() {
	*x = NamedPipes{}
	mi := &file_clientpb_client_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedPipes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedPipes) ProtoMessage() {}

func (x *NamedPipes) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedPipes.ProtoReflect.Descriptor instead.
func (*NamedPipes) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{42}
}

func (x *NamedPipes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *NamedPipes) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *NamedPipes) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// TCP Messages for pivoting
type TCPPivotReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,16,opt,name=Address,proto3" json:"Address,omitempty"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPPivotReq) Reset() {
	*x = TCPPivotReq{}
	mi := &file_clientpb_client_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPPivotReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPPivotReq) ProtoMessage() {}

func (x *TCPPivotReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPPivotReq.ProtoReflect.Descriptor instead.
func (*TCPPivotReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{43}
}

func (x *TCPPivotReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TCPPivotReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type TCPPivot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Err           string                 `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
	Response      *commonpb.Response     `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPPivot) Reset() {
	*x = TCPPivot{}
	mi := &file_clientpb_client_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPPivot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPPivot) ProtoMessage() {}

func (x *TCPPivot) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPPivot.ProtoReflect.Descriptor instead.
func (*TCPPivot) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{44}
}

func (x *TCPPivot) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TCPPivot) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *TCPPivot) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// [ commands ] ----------------------------------------
type Sessions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*Session             `protobuf:"bytes,1,rep,name=Sessions,proto3" json:"Sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sessions) Reset() {
	*x = Sessions{}
	mi := &file_clientpb_client_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sessions) ProtoMessage() {}

func (x *Sessions) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sessions.ProtoReflect.Descriptor instead.
func (*Sessions) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{45}
}

func (x *Sessions) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type RenameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionID     string                 `protobuf:"bytes,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	BeaconID      string                 `protobuf:"bytes,2,opt,name=BeaconID,proto3" json:"BeaconID,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameReq) Reset() {
	*x = RenameReq{}
	mi := &file_clientpb_client_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameReq) ProtoMessage() {}

func (x *RenameReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameReq.ProtoReflect.Descriptor instead.
func (*RenameReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{46}
}

func (x *RenameReq) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *RenameReq) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *RenameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GenerateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *ImplantConfig         `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateReq) Reset() {
	*x = GenerateReq{}
	mi := &file_clientpb_client_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReq) ProtoMessage() {}

func (x *GenerateReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReq.ProtoReflect.Descriptor instead.
func (*GenerateReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{47}
}

func (x *GenerateReq) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GenerateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GenerateStageReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profile       string                 `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	AESEncryptKey string                 `protobuf:"bytes,3,opt,name=AESEncryptKey,proto3" json:"AESEncryptKey,omitempty"`
	AESEncryptIv  string                 `protobuf:"bytes,4,opt,name=AESEncryptIv,proto3" json:"AESEncryptIv,omitempty"`
	RC4EncryptKey string                 `protobuf:"bytes,5,opt,name=RC4EncryptKey,proto3" json:"RC4EncryptKey,omitempty"`
	PrependSize   bool                   `protobuf:"varint,6,opt,name=PrependSize,proto3" json:"PrependSize,omitempty"`
	CompressF     string                 `protobuf:"bytes,7,opt,name=CompressF,proto3" json:"CompressF,omitempty"`
	Compress      string                 `protobuf:"bytes,8,opt,name=Compress,proto3" json:"Compress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateStageReq) Reset() {
	*x = GenerateStageReq{}
	mi := &file_clientpb_client_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateStageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStageReq) ProtoMessage() {}

func (x *GenerateStageReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStageReq.ProtoReflect.Descriptor instead.
func (*GenerateStageReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{48}
}

func (x *GenerateStageReq) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *GenerateStageReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateStageReq) GetAESEncryptKey() string {
	if x != nil {
		return x.AESEncryptKey
	}
	return ""
}

func (x *GenerateStageReq) GetAESEncryptIv() string {
	if x != nil {
		return x.AESEncryptIv
	}
	return ""
}

func (x *GenerateStageReq) GetRC4EncryptKey() string {
	if x != nil {
		return x.RC4EncryptKey
	}
	return ""
}

func (x *GenerateStageReq) GetPrependSize() bool {
	if x != nil {
		return x.PrependSize
	}
	return false
}

func (x *GenerateStageReq) GetCompressF() string {
	if x != nil {
		return x.CompressF
	}
	return ""
}

func (x *GenerateStageReq) GetCompress() string {
	if x != nil {
		return x.Compress
	}
	return ""
}

type Generate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          *commonpb.File         `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Generate) Reset() {
	*x = Generate{}
	mi := &file_clientpb_client_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Generate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generate) ProtoMessage() {}

func (x *Generate) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generate.ProtoReflect.Descriptor instead.
func (*Generate) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{49}
}

func (x *Generate) GetFile() *commonpb.File {
	if x != nil {
		return x.File
	}
	return nil
}

type MSFReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       string                 `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	LHost         string                 `protobuf:"bytes,2,opt,name=LHost,proto3" json:"LHost,omitempty"`
	LPort         uint32                 `protobuf:"varint,3,opt,name=LPort,proto3" json:"LPort,omitempty"`
	Encoder       string                 `protobuf:"bytes,4,opt,name=Encoder,proto3" json:"Encoder,omitempty"`
	Iterations    int32                  `protobuf:"varint,5,opt,name=Iterations,proto3" json:"Iterations,omitempty"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MSFReq) Reset() {
	*x = MSFReq{}
	mi := &file_clientpb_client_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MSFReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSFReq) ProtoMessage() {}

func (x *MSFReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSFReq.ProtoReflect.Descriptor instead.
func (*MSFReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{50}
}

func (x *MSFReq) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *MSFReq) GetLHost() string {
	if x != nil {
		return x.LHost
	}
	return ""
}

func (x *MSFReq) GetLPort() uint32 {
	if x != nil {
		return x.LPort
	}
	return 0
}

func (x *MSFReq) GetEncoder() string {
	if x != nil {
		return x.Encoder
	}
	return ""
}

func (x *MSFReq) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *MSFReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type MSFRemoteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       string                 `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	LHost         string                 `protobuf:"bytes,2,opt,name=LHost,proto3" json:"LHost,omitempty"`
	LPort         uint32                 `protobuf:"varint,3,opt,name=LPort,proto3" json:"LPort,omitempty"`
	Encoder       string                 `protobuf:"bytes,4,opt,name=Encoder,proto3" json:"Encoder,omitempty"`
	Iterations    int32                  `protobuf:"varint,5,opt,name=Iterations,proto3" json:"Iterations,omitempty"`
	PID           uint32                 `protobuf:"varint,8,opt,name=PID,proto3" json:"PID,omitempty"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MSFRemoteReq) Reset() {
	*x = MSFRemoteReq{}
	mi := &file_clientpb_client_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MSFRemoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSFRemoteReq) ProtoMessage() {}

func (x *MSFRemoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSFRemoteReq.ProtoReflect.Descriptor instead.
func (*MSFRemoteReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{51}
}

func (x *MSFRemoteReq) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *MSFRemoteReq) GetLHost() string {
	if x != nil {
		return x.LHost
	}
	return ""
}

func (x *MSFRemoteReq) GetLPort() uint32 {
	if x != nil {
		return x.LPort
	}
	return 0
}

func (x *MSFRemoteReq) GetEncoder() string {
	if x != nil {
		return x.Encoder
	}
	return ""
}

func (x *MSFRemoteReq) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *MSFRemoteReq) GetPID() uint32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *MSFRemoteReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type StagerListenerReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Protocol      StageProtocol          `protobuf:"varint,1,opt,name=Protocol,proto3,enum=clientpb.StageProtocol" json:"Protocol,omitempty"`
	Host          string                 `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	Port          uint32                 `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Data          []byte                 `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	ProfileName   string                 `protobuf:"bytes,5,opt,name=ProfileName,proto3" json:"ProfileName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StagerListenerReq) Reset() {
	*x = StagerListenerReq{}
	mi := &file_clientpb_client_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StagerListenerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagerListenerReq) ProtoMessage() {}

func (x *StagerListenerReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagerListenerReq.ProtoReflect.Descriptor instead.
func (*StagerListenerReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{52}
}

func (x *StagerListenerReq) GetProtocol() StageProtocol {
	if x != nil {
		return x.Protocol
	}
	return StageProtocol_TCP
}

func (x *StagerListenerReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StagerListenerReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StagerListenerReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StagerListenerReq) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type StagerListener struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobID         uint32                 `protobuf:"varint,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StagerListener) Reset() {
	*x = StagerListener{}
	mi := &file_clientpb_client_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StagerListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagerListener) ProtoMessage() {}

func (x *StagerListener) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagerListener.ProtoReflect.Descriptor instead.
func (*StagerListener) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{53}
}

func (x *StagerListener) GetJobID() uint32 {
	if x != nil {
		return x.JobID
	}
	return 0
}

type ShellcodeRDIReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	FunctionName  string                 `protobuf:"bytes,2,opt,name=FunctionName,proto3" json:"FunctionName,omitempty"`
	Arguments     string                 `protobuf:"bytes,3,opt,name=Arguments,proto3" json:"Arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellcodeRDIReq) Reset() {
	*x = ShellcodeRDIReq{}
	mi := &file_clientpb_client_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellcodeRDIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellcodeRDIReq) ProtoMessage() {}

func (x *ShellcodeRDIReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellcodeRDIReq.ProtoReflect.Descriptor instead.
func (*ShellcodeRDIReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{54}
}

func (x *ShellcodeRDIReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShellcodeRDIReq) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *ShellcodeRDIReq) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

type ShellcodeRDI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellcodeRDI) Reset() {
	*x = ShellcodeRDI{}
	mi := &file_clientpb_client_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellcodeRDI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellcodeRDI) ProtoMessage() {}

func (x *ShellcodeRDI) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellcodeRDI.ProtoReflect.Descriptor instead.
func (*ShellcodeRDI) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{55}
}

func (x *ShellcodeRDI) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetSystemReq - Client request to the server which is translated into
//                InvokeSystemReq when sending to the implant.
type GetSystemReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	HostingProcess string                 `protobuf:"bytes,1,opt,name=HostingProcess,proto3" json:"HostingProcess,omitempty"`
	Config         *ImplantConfig         `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Request        *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSystemReq) Reset() {
	*x = GetSystemReq{}
	mi := &file_clientpb_client_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemReq) ProtoMessage() {}

func (x *GetSystemReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemReq.ProtoReflect.Descriptor instead.
func (*GetSystemReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{56}
}

func (x *GetSystemReq) GetHostingProcess() string {
	if x != nil {
		return x.HostingProcess
	}
	return ""
}

func (x *GetSystemReq) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetSystemReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSystemReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// MigrateReq - Client request to the server which is translated into
//              InvokeMigrateReq when sending to the implant.
type MigrateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=Pid,proto3" json:"Pid,omitempty"`
	Config        *ImplantConfig         `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	Encoder       ShellcodeEncoder       `protobuf:"varint,3,opt,name=Encoder,proto3,enum=clientpb.ShellcodeEncoder" json:"Encoder,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	ProcName      string                 `protobuf:"bytes,5,opt,name=ProcName,proto3" json:"ProcName,omitempty"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MigrateReq) Reset() {
	*x = MigrateReq{}
	mi := &file_clientpb_client_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateReq) ProtoMessage() {}

func (x *MigrateReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateReq.ProtoReflect.Descriptor instead.
func (*MigrateReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{57}
}

func (x *MigrateReq) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *MigrateReq) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MigrateReq) GetEncoder() ShellcodeEncoder {
	if x != nil {
		return x.Encoder
	}
	return ShellcodeEncoder_NONE
}

func (x *MigrateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MigrateReq) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *MigrateReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// [ Tunnels ] ----------------------------------------
type CreateTunnelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTunnelReq) Reset() {
	*x = CreateTunnelReq{}
	mi := &file_clientpb_client_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTunnelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelReq) ProtoMessage() {}

func (x *CreateTunnelReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelReq.ProtoReflect.Descriptor instead.
func (*CreateTunnelReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{58}
}

func (x *CreateTunnelReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type CreateTunnel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionID     uint32                 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	TunnelID      uint64                 `protobuf:"varint,8,opt,name=TunnelID,proto3" json:"TunnelID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTunnel) Reset() {
	*x = CreateTunnel{}
	mi := &file_clientpb_client_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnel) ProtoMessage() {}

func (x *CreateTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnel.ProtoReflect.Descriptor instead.
func (*CreateTunnel) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{59}
}

func (x *CreateTunnel) GetSessionID() uint32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CreateTunnel) GetTunnelID() uint64 {
	if x != nil {
		return x.TunnelID
	}
	return 0
}

type CloseTunnelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelID      uint64                 `protobuf:"varint,8,opt,name=TunnelID,proto3" json:"TunnelID,omitempty"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseTunnelReq) Reset() {
	*x = CloseTunnelReq{}
	mi := &file_clientpb_client_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTunnelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTunnelReq) ProtoMessage() {}

func (x *CloseTunnelReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTunnelReq.ProtoReflect.Descriptor instead.
func (*CloseTunnelReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{60}
}

func (x *CloseTunnelReq) GetTunnelID() uint64 {
	if x != nil {
		return x.TunnelID
	}
	return 0
}

func (x *CloseTunnelReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// [ Pivots ] ----------------------------------------
type PivotGraphEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerID        int64                  `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	Session       *Session               `protobuf:"bytes,2,opt,name=Session,proto3" json:"Session,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Children      []*PivotGraphEntry     `protobuf:"bytes,4,rep,name=Children,proto3" json:"Children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PivotGraphEntry) Reset() {
	*x = PivotGraphEntry{}
	mi := &file_clientpb_client_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PivotGraphEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotGraphEntry) ProtoMessage() {}

func (x *PivotGraphEntry) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotGraphEntry.ProtoReflect.Descriptor instead.
func (*PivotGraphEntry) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{61}
}

func (x *PivotGraphEntry) GetPeerID() int64 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *PivotGraphEntry) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *PivotGraphEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PivotGraphEntry) GetChildren() []*PivotGraphEntry {
	if x != nil {
		return x.Children
	}
	return nil
}

type PivotGraph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Children      []*PivotGraphEntry     `protobuf:"bytes,1,rep,name=Children,proto3" json:"Children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PivotGraph) Reset() {
	*x = PivotGraph{}
	mi := &file_clientpb_client_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PivotGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotGraph) ProtoMessage() {}

func (x *PivotGraph) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotGraph.ProtoReflect.Descriptor instead.
func (*PivotGraph) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{62}
}

func (x *PivotGraph) GetChildren() []*PivotGraphEntry {
	if x != nil {
		return x.Children
	}
	return nil
}

// [ Events ] ----------------------------------------
type Client struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            uint32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Operator      *Operator              `protobuf:"bytes,3,opt,name=Operator,proto3" json:"Operator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Client) Reset() {
	*x = Client{}
	mi := &file_clientpb_client_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{63}
}

func (x *Client) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventType     string                 `protobuf:"bytes,1,opt,name=EventType,proto3" json:"EventType,omitempty"`
	Session       *Session               `protobuf:"bytes,2,opt,name=Session,proto3" json:"Session,omitempty"`
	Job           *Job                   `protobuf:"bytes,3,opt,name=Job,proto3" json:"Job,omitempty"`
	Client        *Client                `protobuf:"bytes,4,opt,name=Client,proto3" json:"Client,omitempty"`
	Data          []byte                 `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	Err           string                 `protobuf:"bytes,6,opt,name=Err,proto3" json:"Err,omitempty"` // Can't trigger normal gRPC error
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_clientpb_client_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{64}
}

func (x *Event) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Event) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Event) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *Event) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Operators struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operators     []*Operator            `protobuf:"bytes,1,rep,name=Operators,proto3" json:"Operators,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Operators) Reset() {
	*x = Operators{}
	mi := &file_clientpb_client_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operators) ProtoMessage() {}

func (x *Operators) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operators.ProtoReflect.Descriptor instead.
func (*Operators) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{65}
}

func (x *Operators) GetOperators() []*Operator {
	if x != nil {
		return x.Operators
	}
	return nil
}

type Operator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Online        bool                   `protobuf:"varint,1,opt,name=Online,proto3" json:"Online,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Operator) Reset() {
	*x = Operator{}
	mi := &file_clientpb_client_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{66}
}

func (x *Operator) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Operator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// [ Websites ] ----------------------------------------
type WebContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	WebsiteID     string                 `protobuf:"bytes,2,opt,name=WebsiteID,proto3" json:"WebsiteID,omitempty"`
	Path          string                 `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	ContentType   string                 `protobuf:"bytes,4,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	Size          uint64                 `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`
	Content       []byte                 `protobuf:"bytes,9,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebContent) Reset() {
	*x = WebContent{}
	mi := &file_clientpb_client_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebContent) ProtoMessage() {}

func (x *WebContent) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebContent.ProtoReflect.Descriptor instead.
func (*WebContent) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{67}
}

func (x *WebContent) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *WebContent) GetWebsiteID() string {
	if x != nil {
		return x.WebsiteID
	}
	return ""
}

func (x *WebContent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WebContent) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *WebContent) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *WebContent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type WebsiteAddContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Contents      map[string]*WebContent `protobuf:"bytes,2,rep,name=Contents,proto3" json:"Contents,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebsiteAddContent) Reset() {
	*x = WebsiteAddContent{}
	mi := &file_clientpb_client_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsiteAddContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteAddContent) ProtoMessage() {}

func (x *WebsiteAddContent) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteAddContent.ProtoReflect.Descriptor instead.
func (*WebsiteAddContent) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{68}
}

func (x *WebsiteAddContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebsiteAddContent) GetContents() map[string]*WebContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

type WebsiteRemoveContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Paths         []string               `protobuf:"bytes,2,rep,name=Paths,proto3" json:"Paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebsiteRemoveContent) Reset() {
	*x = WebsiteRemoveContent{}
	mi := &file_clientpb_client_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsiteRemoveContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteRemoveContent) ProtoMessage() {}

func (x *WebsiteRemoveContent) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteRemoveContent.ProtoReflect.Descriptor instead.
func (*WebsiteRemoveContent) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{69}
}

func (x *WebsiteRemoveContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebsiteRemoveContent) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Website struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Contents      map[string]*WebContent `protobuf:"bytes,3,rep,name=Contents,proto3" json:"Contents,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Website) Reset() {
	*x = Website{}
	mi := &file_clientpb_client_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Website) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Website) ProtoMessage() {}

func (x *Website) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Website.ProtoReflect.Descriptor instead.
func (*Website) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{70}
}

func (x *Website) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Website) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Website) GetContents() map[string]*WebContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

type Websites struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Websites      []*Website             `protobuf:"bytes,1,rep,name=Websites,proto3" json:"Websites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Websites) Reset() {
	*x = Websites{}
	mi := &file_clientpb_client_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Websites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Websites) ProtoMessage() {}

func (x *Websites) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Websites.ProtoReflect.Descriptor instead.
func (*Websites) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{71}
}

func (x *Websites) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

type WGClientConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServerPubKey     string                 `protobuf:"bytes,1,opt,name=ServerPubKey,proto3" json:"ServerPubKey,omitempty"`
	ClientPrivateKey string                 `protobuf:"bytes,2,opt,name=ClientPrivateKey,proto3" json:"ClientPrivateKey,omitempty"`
	ClientPubKey     string                 `protobuf:"bytes,3,opt,name=ClientPubKey,proto3" json:"ClientPubKey,omitempty"`
	ClientIP         string                 `protobuf:"bytes,4,opt,name=ClientIP,proto3" json:"ClientIP,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WGClientConfig) Reset() {
	*x = WGClientConfig{}
	mi := &file_clientpb_client_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WGClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WGClientConfig) ProtoMessage() {}

func (x *WGClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WGClientConfig.ProtoReflect.Descriptor instead.
func (*WGClientConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{72}
}

func (x *WGClientConfig) GetServerPubKey() string {
	if x != nil {
		return x.ServerPubKey
	}
	return ""
}

func (x *WGClientConfig) GetClientPrivateKey() string {
	if x != nil {
		return x.ClientPrivateKey
	}
	return ""
}

func (x *WGClientConfig) GetClientPubKey() string {
	if x != nil {
		return x.ClientPubKey
	}
	return ""
}

func (x *WGClientConfig) GetClientIP() string {
	if x != nil {
		return x.ClientIP
	}
	return ""
}

type Loot struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ID             string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	FileType       FileType               `protobuf:"varint,3,opt,name=FileType,proto3,enum=clientpb.FileType" json:"FileType,omitempty"`
	OriginHostUUID string                 `protobuf:"bytes,4,opt,name=OriginHostUUID,proto3" json:"OriginHostUUID,omitempty"`
	Size           int64                  `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`
	File           *commonpb.File         `protobuf:"bytes,9,opt,name=File,proto3" json:"File,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Loot) Reset() {
	*x = Loot{}
	mi := &file_clientpb_client_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Loot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loot) ProtoMessage() {}

func (x *Loot) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loot.ProtoReflect.Descriptor instead.
func (*Loot) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{73}
}

func (x *Loot) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Loot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Loot) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_NO_FILE
}

func (x *Loot) GetOriginHostUUID() string {
	if x != nil {
		return x.OriginHostUUID
	}
	return ""
}

func (x *Loot) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Loot) GetFile() *commonpb.File {
	if x != nil {
		return x.File
	}
	return nil
}

type AllLoot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Loot          []*Loot                `protobuf:"bytes,1,rep,name=Loot,proto3" json:"Loot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllLoot) Reset() {
	*x = AllLoot{}
	mi := &file_clientpb_client_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllLoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllLoot) ProtoMessage() {}

func (x *AllLoot) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllLoot.ProtoReflect.Descriptor instead.
func (*AllLoot) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{74}
}

func (x *AllLoot) GetLoot() []*Loot {
	if x != nil {
		return x.Loot
	}
	return nil
}

// [ Hosts ] ----------------------------------------
type IOC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	FileHash      string                 `protobuf:"bytes,2,opt,name=FileHash,proto3" json:"FileHash,omitempty"`
	ID            string                 `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IOC) Reset() {
	*x = IOC{}
	mi := &file_clientpb_client_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IOC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOC) ProtoMessage() {}

func (x *IOC) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOC.ProtoReflect.Descriptor instead.
func (*IOC) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{75}
}

func (x *IOC) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *IOC) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *IOC) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExtensionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        string                 `protobuf:"bytes,1,opt,name=Output,proto3" json:"Output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtensionData) Reset() {
	*x = ExtensionData{}
	mi := &file_clientpb_client_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtensionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionData) ProtoMessage() {}

func (x *ExtensionData) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionData.ProtoReflect.Descriptor instead.
func (*ExtensionData) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{76}
}

func (x *ExtensionData) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type Host struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	ID            string                    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Hostname      string                    `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	HostUUID      string                    `protobuf:"bytes,3,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	OSVersion     string                    `protobuf:"bytes,4,opt,name=OSVersion,proto3" json:"OSVersion,omitempty"`
	IOCs          []*IOC                    `protobuf:"bytes,5,rep,name=IOCs,proto3" json:"IOCs,omitempty"`
	ExtensionData map[string]*ExtensionData `protobuf:"bytes,6,rep,name=ExtensionData,proto3" json:"ExtensionData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Locale        string                    `protobuf:"bytes,7,opt,name=Locale,proto3" json:"Locale,omitempty"`
	FirstContact  int64                     `protobuf:"varint,8,opt,name=FirstContact,proto3" json:"FirstContact,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Host) Reset() {
	*x = Host{}
	mi := &file_clientpb_client_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{77}
}

func (x *Host) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Host) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Host) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *Host) GetOSVersion() string {
	if x != nil {
		return x.OSVersion
	}
	return ""
}

func (x *Host) GetIOCs() []*IOC {
	if x != nil {
		return x.IOCs
	}
	return nil
}

func (x *Host) GetExtensionData() map[string]*ExtensionData {
	if x != nil {
		return x.ExtensionData
	}
	return nil
}

func (x *Host) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Host) GetFirstContact() int64 {
	if x != nil {
		return x.FirstContact
	}
	return 0
}

type AllHosts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hosts         []*Host                `protobuf:"bytes,1,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllHosts) Reset() {
	*x = AllHosts{}
	mi := &file_clientpb_client_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllHosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllHosts) ProtoMessage() {}

func (x *AllHosts) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllHosts.ProtoReflect.Descriptor instead.
func (*AllHosts) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{78}
}

func (x *AllHosts) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// HostScanReq - Request to scan network and discover hosts
type HostScanReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Targets          []string               `protobuf:"bytes,1,rep,name=Targets,proto3" json:"Targets,omitempty"`                    // IP, CIDR, or hostname (e.g., "10.0.0.1", "10.0.0.0/24")
	Ports            string                 `protobuf:"bytes,2,opt,name=Ports,proto3" json:"Ports,omitempty"`                        // Port spec (e.g., "1-65535", "22,80,443")
	ServiceDetection bool                   `protobuf:"varint,3,opt,name=ServiceDetection,proto3" json:"ServiceDetection,omitempty"` // Enable nmap -sV for service detection
	OSDetection      bool                   `protobuf:"varint,4,opt,name=OSDetection,proto3" json:"OSDetection,omitempty"`           // Enable nmap -O for OS detection
	Timeout          int32                  `protobuf:"varint,5,opt,name=Timeout,proto3" json:"Timeout,omitempty"`                   // Timeout in seconds (default: 300)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HostScanReq) Reset() {
	*x = HostScanReq{}
	mi := &file_clientpb_client_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostScanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostScanReq) ProtoMessage() {}

func (x *HostScanReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostScanReq.ProtoReflect.Descriptor instead.
func (*HostScanReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{79}
}

func (x *HostScanReq) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *HostScanReq) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *HostScanReq) GetServiceDetection() bool {
	if x != nil {
		return x.ServiceDetection
	}
	return false
}

func (x *HostScanReq) GetOSDetection() bool {
	if x != nil {
		return x.OSDetection
	}
	return false
}

func (x *HostScanReq) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// HostService - Discovered service on a host
type HostService struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int32                  `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Protocol      string                 `protobuf:"bytes,2,opt,name=Protocol,proto3" json:"Protocol,omitempty"` // tcp, udp
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`         // http, ssh, etc.
	Product       string                 `protobuf:"bytes,4,opt,name=Product,proto3" json:"Product,omitempty"`   // nginx, OpenSSH, etc.
	Version       string                 `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`   // 1.18.0, 8.2p1, etc.
	Banner        string                 `protobuf:"bytes,6,opt,name=Banner,proto3" json:"Banner,omitempty"`     // Raw banner if available
	State         string                 `protobuf:"bytes,7,opt,name=State,proto3" json:"State,omitempty"`       // open, closed, filtered
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostService) Reset() {
	*x = HostService{}
	mi := &file_clientpb_client_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostService) ProtoMessage() {}

func (x *HostService) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostService.ProtoReflect.Descriptor instead.
func (*HostService) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{80}
}

func (x *HostService) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HostService) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *HostService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostService) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *HostService) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HostService) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *HostService) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// HostScanResult - Result for a single scanned host
type HostScanResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostUUID      string                 `protobuf:"bytes,1,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"` // Generated UUID for the host
	IPAddress     string                 `protobuf:"bytes,2,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	Hostname      string                 `protobuf:"bytes,3,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	OSVersion     string                 `protobuf:"bytes,4,opt,name=OSVersion,proto3" json:"OSVersion,omitempty"`
	Services      []*HostService         `protobuf:"bytes,5,rep,name=Services,proto3" json:"Services,omitempty"`
	IsNew         bool                   `protobuf:"varint,6,opt,name=IsNew,proto3" json:"IsNew,omitempty"` // True if this is a newly discovered host
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostScanResult) Reset() {
	*x = HostScanResult{}
	mi := &file_clientpb_client_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostScanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostScanResult) ProtoMessage() {}

func (x *HostScanResult) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostScanResult.ProtoReflect.Descriptor instead.
func (*HostScanResult) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{81}
}

func (x *HostScanResult) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *HostScanResult) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *HostScanResult) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostScanResult) GetOSVersion() string {
	if x != nil {
		return x.OSVersion
	}
	return ""
}

func (x *HostScanResult) GetServices() []*HostService {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *HostScanResult) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

// HostScanResults - Response with all scan results
type HostScanResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*HostScanResult      `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	TotalHosts    int32                  `protobuf:"varint,2,opt,name=TotalHosts,proto3" json:"TotalHosts,omitempty"`    // Total hosts discovered
	NewHosts      int32                  `protobuf:"varint,3,opt,name=NewHosts,proto3" json:"NewHosts,omitempty"`        // New hosts added to database
	ScanDuration  string                 `protobuf:"bytes,4,opt,name=ScanDuration,proto3" json:"ScanDuration,omitempty"` // Human-readable duration
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostScanResults) Reset() {
	*x = HostScanResults{}
	mi := &file_clientpb_client_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostScanResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostScanResults) ProtoMessage() {}

func (x *HostScanResults) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostScanResults.ProtoReflect.Descriptor instead.
func (*HostScanResults) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{82}
}

func (x *HostScanResults) GetResults() []*HostScanResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *HostScanResults) GetTotalHosts() int32 {
	if x != nil {
		return x.TotalHosts
	}
	return 0
}

func (x *HostScanResults) GetNewHosts() int32 {
	if x != nil {
		return x.NewHosts
	}
	return 0
}

func (x *HostScanResults) GetScanDuration() string {
	if x != nil {
		return x.ScanDuration
	}
	return ""
}

// ReconReq - Request to run OSINT reconnaissance tools
type ReconReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`        // "domains", "emails", "whois", "all"
	Target        string                 `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`    // Domain or target to investigate
	Timeout       int32                  `protobuf:"varint,3,opt,name=Timeout,proto3" json:"Timeout,omitempty"` // Timeout in seconds (default: 300)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReconReq) Reset() {
	*x = ReconReq{}
	mi := &file_clientpb_client_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReconReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconReq) ProtoMessage() {}

func (x *ReconReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconReq.ProtoReflect.Descriptor instead.
func (*ReconReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{83}
}

func (x *ReconReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReconReq) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ReconReq) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// ReconResult - Result from OSINT reconnaissance
type ReconResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`              // Type of recon performed
	Target        string                 `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`          // Target that was investigated
	LootID        string                 `protobuf:"bytes,3,opt,name=LootID,proto3" json:"LootID,omitempty"`          // ID of created loot entry
	ItemsFound    int32                  `protobuf:"varint,4,opt,name=ItemsFound,proto3" json:"ItemsFound,omitempty"` // Number of items discovered
	Duration      string                 `protobuf:"bytes,5,opt,name=Duration,proto3" json:"Duration,omitempty"`      // Time taken (human-readable)
	Tools         []string               `protobuf:"bytes,6,rep,name=Tools,proto3" json:"Tools,omitempty"`            // Tools that were executed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReconResult) Reset() {
	*x = ReconResult{}
	mi := &file_clientpb_client_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReconResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconResult) ProtoMessage() {}

func (x *ReconResult) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconResult.ProtoReflect.Descriptor instead.
func (*ReconResult) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{84}
}

func (x *ReconResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReconResult) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ReconResult) GetLootID() string {
	if x != nil {
		return x.LootID
	}
	return ""
}

func (x *ReconResult) GetItemsFound() int32 {
	if x != nil {
		return x.ItemsFound
	}
	return 0
}

func (x *ReconResult) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *ReconResult) GetTools() []string {
	if x != nil {
		return x.Tools
	}
	return nil
}

// [ Dll Hijack ] ----------------------------------------
type DllHijackReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ReferenceDLLPath string                 `protobuf:"bytes,1,opt,name=ReferenceDLLPath,proto3" json:"ReferenceDLLPath,omitempty"`
	TargetLocation   string                 `protobuf:"bytes,2,opt,name=TargetLocation,proto3" json:"TargetLocation,omitempty"`
	ReferenceDLL     []byte                 `protobuf:"bytes,3,opt,name=ReferenceDLL,proto3" json:"ReferenceDLL,omitempty"`
	TargetDLL        []byte                 `protobuf:"bytes,4,opt,name=TargetDLL,proto3" json:"TargetDLL,omitempty"`
	ProfileName      string                 `protobuf:"bytes,5,opt,name=ProfileName,proto3" json:"ProfileName,omitempty"`
	Name             string                 `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Request          *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DllHijackReq) Reset() {
	*x = DllHijackReq{}
	mi := &file_clientpb_client_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DllHijackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DllHijackReq) ProtoMessage() {}

func (x *DllHijackReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DllHijackReq.ProtoReflect.Descriptor instead.
func (*DllHijackReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{85}
}

func (x *DllHijackReq) GetReferenceDLLPath() string {
	if x != nil {
		return x.ReferenceDLLPath
	}
	return ""
}

func (x *DllHijackReq) GetTargetLocation() string {
	if x != nil {
		return x.TargetLocation
	}
	return ""
}

func (x *DllHijackReq) GetReferenceDLL() []byte {
	if x != nil {
		return x.ReferenceDLL
	}
	return nil
}

func (x *DllHijackReq) GetTargetDLL() []byte {
	if x != nil {
		return x.TargetDLL
	}
	return nil
}

func (x *DllHijackReq) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *DllHijackReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DllHijackReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type DllHijack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *commonpb.Response     `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DllHijack) Reset() {
	*x = DllHijack{}
	mi := &file_clientpb_client_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DllHijack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DllHijack) ProtoMessage() {}

func (x *DllHijack) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DllHijack.ProtoReflect.Descriptor instead.
func (*DllHijack) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{86}
}

func (x *DllHijack) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type BackdoorReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	ProfileName   string                 `protobuf:"bytes,2,opt,name=ProfileName,proto3" json:"ProfileName,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackdoorReq) Reset() {
	*x = BackdoorReq{}
	mi := &file_clientpb_client_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackdoorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackdoorReq) ProtoMessage() {}

func (x *BackdoorReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackdoorReq.ProtoReflect.Descriptor instead.
func (*BackdoorReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{87}
}

func (x *BackdoorReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *BackdoorReq) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *BackdoorReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackdoorReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type Backdoor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *commonpb.Response     `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Backdoor) Reset() {
	*x = Backdoor{}
	mi := &file_clientpb_client_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backdoor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backdoor) ProtoMessage() {}

func (x *Backdoor) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backdoor.ProtoReflect.Descriptor instead.
func (*Backdoor) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{88}
}

func (x *Backdoor) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShellcodeEncodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Encoder       ShellcodeEncoder       `protobuf:"varint,1,opt,name=Encoder,proto3,enum=clientpb.ShellcodeEncoder" json:"Encoder,omitempty"`
	Architecture  string                 `protobuf:"bytes,2,opt,name=Architecture,proto3" json:"Architecture,omitempty"`
	Iterations    uint32                 `protobuf:"varint,3,opt,name=Iterations,proto3" json:"Iterations,omitempty"`
	BadChars      []byte                 `protobuf:"bytes,4,opt,name=BadChars,proto3" json:"BadChars,omitempty"`
	Data          []byte                 `protobuf:"bytes,8,opt,name=Data,proto3" json:"Data,omitempty"`
	Request       *commonpb.Request      `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellcodeEncodeReq) Reset() {
	*x = ShellcodeEncodeReq{}
	mi := &file_clientpb_client_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellcodeEncodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellcodeEncodeReq) ProtoMessage() {}

func (x *ShellcodeEncodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellcodeEncodeReq.ProtoReflect.Descriptor instead.
func (*ShellcodeEncodeReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{89}
}

func (x *ShellcodeEncodeReq) GetEncoder() ShellcodeEncoder {
	if x != nil {
		return x.Encoder
	}
	return ShellcodeEncoder_NONE
}

func (x *ShellcodeEncodeReq) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *ShellcodeEncodeReq) GetIterations() uint32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *ShellcodeEncodeReq) GetBadChars() []byte {
	if x != nil {
		return x.BadChars
	}
	return nil
}

func (x *ShellcodeEncodeReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShellcodeEncodeReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type ShellcodeEncode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,8,opt,name=Data,proto3" json:"Data,omitempty"`
	Response      *commonpb.Response     `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellcodeEncode) Reset() {
	*x = ShellcodeEncode{}
	mi := &file_clientpb_client_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellcodeEncode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellcodeEncode) ProtoMessage() {}

func (x *ShellcodeEncode) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellcodeEncode.ProtoReflect.Descriptor instead.
func (*ShellcodeEncode) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{90}
}

func (x *ShellcodeEncode) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShellcodeEncode) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShellcodeEncoderMap struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Encoders      map[string]ShellcodeEncoder `protobuf:"bytes,1,rep,name=Encoders,proto3" json:"Encoders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=clientpb.ShellcodeEncoder"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellcodeEncoderMap) Reset() {
	*x = ShellcodeEncoderMap{}
	mi := &file_clientpb_client_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellcodeEncoderMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellcodeEncoderMap) ProtoMessage() {}

func (x *ShellcodeEncoderMap) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellcodeEncoderMap.ProtoReflect.Descriptor instead.
func (*ShellcodeEncoderMap) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{91}
}

func (x *ShellcodeEncoderMap) GetEncoders() map[string]ShellcodeEncoder {
	if x != nil {
		return x.Encoders
	}
	return nil
}

type ExternalGenerateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *ImplantConfig         `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	BuilderName   string                 `protobuf:"bytes,2,opt,name=BuilderName,proto3" json:"BuilderName,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalGenerateReq) Reset() {
	*x = ExternalGenerateReq{}
	mi := &file_clientpb_client_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalGenerateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalGenerateReq) ProtoMessage() {}

func (x *ExternalGenerateReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalGenerateReq.ProtoReflect.Descriptor instead.
func (*ExternalGenerateReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{92}
}

func (x *ExternalGenerateReq) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ExternalGenerateReq) GetBuilderName() string {
	if x != nil {
		return x.BuilderName
	}
	return ""
}

func (x *ExternalGenerateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Builders struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Builders      []*Builder             `protobuf:"bytes,1,rep,name=Builders,proto3" json:"Builders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Builders) Reset() {
	*x = Builders{}
	mi := &file_clientpb_client_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Builders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Builders) ProtoMessage() {}

func (x *Builders) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Builders.ProtoReflect.Descriptor instead.
func (*Builders) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{93}
}

func (x *Builders) GetBuilders() []*Builder {
	if x != nil {
		return x.Builders
	}
	return nil
}

type Builder struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	OperatorName   string                 `protobuf:"bytes,2,opt,name=OperatorName,proto3" json:"OperatorName,omitempty"`
	GOOS           string                 `protobuf:"bytes,3,opt,name=GOOS,proto3" json:"GOOS,omitempty"`     // The builder's OS
	GOARCH         string                 `protobuf:"bytes,4,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"` // The builder's Arch
	Templates      []string               `protobuf:"bytes,5,rep,name=Templates,proto3" json:"Templates,omitempty"`
	Targets        []*CompilerTarget      `protobuf:"bytes,6,rep,name=Targets,proto3" json:"Targets,omitempty"`
	CrossCompilers []*CrossCompiler       `protobuf:"bytes,7,rep,name=CrossCompilers,proto3" json:"CrossCompilers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Builder) Reset() {
	*x = Builder{}
	mi := &file_clientpb_client_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Builder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Builder) ProtoMessage() {}

func (x *Builder) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Builder.ProtoReflect.Descriptor instead.
func (*Builder) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{94}
}

func (x *Builder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Builder) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *Builder) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *Builder) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *Builder) GetTemplates() []string {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *Builder) GetTargets() []*CompilerTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Builder) GetCrossCompilers() []*CrossCompiler {
	if x != nil {
		return x.CrossCompilers
	}
	return nil
}

// [ HTTP C2 ] ----------------------------------------
type HTTPC2Configs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Configs       []*HTTPC2Config        `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPC2Configs) Reset() {
	*x = HTTPC2Configs{}
	mi := &file_clientpb_client_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2Configs) ProtoMessage() {}

func (x *HTTPC2Configs) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2Configs.ProtoReflect.Descriptor instead.
func (*HTTPC2Configs) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{95}
}

func (x *HTTPC2Configs) GetConfigs() []*HTTPC2Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

type C2ProfileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *C2ProfileReq) Reset() {
	*x = C2ProfileReq{}
	mi := &file_clientpb_client_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C2ProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2ProfileReq) ProtoMessage() {}

func (x *C2ProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2ProfileReq.ProtoReflect.Descriptor instead.
func (*C2ProfileReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{96}
}

func (x *C2ProfileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HTTPC2ConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Overwrite     bool                   `protobuf:"varint,1,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	C2Config      *HTTPC2Config          `protobuf:"bytes,2,opt,name=C2Config,proto3" json:"C2Config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPC2ConfigReq) Reset() {
	*x = HTTPC2ConfigReq{}
	mi := &file_clientpb_client_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2ConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2ConfigReq) ProtoMessage() {}

func (x *HTTPC2ConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2ConfigReq.ProtoReflect.Descriptor instead.
func (*HTTPC2ConfigReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{97}
}

func (x *HTTPC2ConfigReq) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *HTTPC2ConfigReq) GetC2Config() *HTTPC2Config {
	if x != nil {
		return x.C2Config
	}
	return nil
}

type HTTPC2Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Created       int64                  `protobuf:"varint,2,opt,name=Created,proto3" json:"Created,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	ServerConfig  *HTTPC2ServerConfig    `protobuf:"bytes,4,opt,name=ServerConfig,proto3" json:"ServerConfig,omitempty"`
	ImplantConfig *HTTPC2ImplantConfig   `protobuf:"bytes,5,opt,name=ImplantConfig,proto3" json:"ImplantConfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPC2Config) Reset() {
	*x = HTTPC2Config{}
	mi := &file_clientpb_client_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2Config) ProtoMessage() {}

func (x *HTTPC2Config) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2Config.ProtoReflect.Descriptor instead.
func (*HTTPC2Config) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{98}
}

func (x *HTTPC2Config) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HTTPC2Config) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *HTTPC2Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPC2Config) GetServerConfig() *HTTPC2ServerConfig {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

func (x *HTTPC2Config) GetImplantConfig() *HTTPC2ImplantConfig {
	if x != nil {
		return x.ImplantConfig
	}
	return nil
}

type HTTPC2ServerConfig struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ID                   string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RandomVersionHeaders bool                   `protobuf:"varint,2,opt,name=RandomVersionHeaders,proto3" json:"RandomVersionHeaders,omitempty"`
	Headers              []*HTTPC2Header        `protobuf:"bytes,3,rep,name=Headers,proto3" json:"Headers,omitempty"`
	Cookies              []*HTTPC2Cookie        `protobuf:"bytes,4,rep,name=Cookies,proto3" json:"Cookies,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HTTPC2ServerConfig) Reset() {
	*x = HTTPC2ServerConfig{}
	mi := &file_clientpb_client_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2ServerConfig) ProtoMessage() {}

func (x *HTTPC2ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2ServerConfig.ProtoReflect.Descriptor instead.
func (*HTTPC2ServerConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{99}
}

func (x *HTTPC2ServerConfig) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HTTPC2ServerConfig) GetRandomVersionHeaders() bool {
	if x != nil {
		return x.RandomVersionHeaders
	}
	return false
}

func (x *HTTPC2ServerConfig) GetHeaders() []*HTTPC2Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPC2ServerConfig) GetCookies() []*HTTPC2Cookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

type HTTPC2ImplantConfig struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ID                 string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserAgent          string                 `protobuf:"bytes,2,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	ChromeBaseVersion  int32                  `protobuf:"varint,3,opt,name=ChromeBaseVersion,proto3" json:"ChromeBaseVersion,omitempty"`
	MacOSVersion       string                 `protobuf:"bytes,4,opt,name=MacOSVersion,proto3" json:"MacOSVersion,omitempty"`
	NonceQueryArgChars string                 `protobuf:"bytes,5,opt,name=NonceQueryArgChars,proto3" json:"NonceQueryArgChars,omitempty"`
	ExtraURLParameters []*HTTPC2URLParameter  `protobuf:"bytes,6,rep,name=ExtraURLParameters,proto3" json:"ExtraURLParameters,omitempty"`
	Headers            []*HTTPC2Header        `protobuf:"bytes,7,rep,name=Headers,proto3" json:"Headers,omitempty"`
	MaxFileGen         int32                  `protobuf:"varint,8,opt,name=MaxFileGen,proto3" json:"MaxFileGen,omitempty"`
	MinFileGen         int32                  `protobuf:"varint,9,opt,name=MinFileGen,proto3" json:"MinFileGen,omitempty"`
	MaxPathGen         int32                  `protobuf:"varint,10,opt,name=MaxPathGen,proto3" json:"MaxPathGen,omitempty"`
	MinPathGen         int32                  `protobuf:"varint,11,opt,name=MinPathGen,proto3" json:"MinPathGen,omitempty"`
	MaxPathLength      int32                  `protobuf:"varint,12,opt,name=MaxPathLength,proto3" json:"MaxPathLength,omitempty"`
	MinPathLength      int32                  `protobuf:"varint,13,opt,name=MinPathLength,proto3" json:"MinPathLength,omitempty"`
	Extensions         []string               `protobuf:"bytes,14,rep,name=extensions,proto3" json:"extensions,omitempty"`
	PathSegments       []*HTTPC2PathSegment   `protobuf:"bytes,17,rep,name=PathSegments,proto3" json:"PathSegments,omitempty"`
	NonceQueryLength   int32                  `protobuf:"varint,18,opt,name=NonceQueryLength,proto3" json:"NonceQueryLength,omitempty"`
	NonceMode          string                 `protobuf:"bytes,19,opt,name=NonceMode,proto3" json:"NonceMode,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HTTPC2ImplantConfig) Reset() {
	*x = HTTPC2ImplantConfig{}
	mi := &file_clientpb_client_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2ImplantConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2ImplantConfig) ProtoMessage() {}

func (x *HTTPC2ImplantConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2ImplantConfig.ProtoReflect.Descriptor instead.
func (*HTTPC2ImplantConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{100}
}

func (x *HTTPC2ImplantConfig) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HTTPC2ImplantConfig) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *HTTPC2ImplantConfig) GetChromeBaseVersion() int32 {
	if x != nil {
		return x.ChromeBaseVersion
	}
	return 0
}

func (x *HTTPC2ImplantConfig) GetMacOSVersion() string {
	if x != nil {
		return x.MacOSVersion
	}
	return ""
}

func (x *HTTPC2ImplantConfig) GetNonceQueryArgChars() string {
	if x != nil {
		return x.NonceQueryArgChars
	}
	return ""
}

func (x *HTTPC2ImplantConfig) GetExtraURLParameters() []*HTTPC2URLParameter {
	if x != nil {
		return x.ExtraURLParameters
	}
	return nil
}

func (x *HTTPC2ImplantConfig) GetHeaders() []*HTTPC2Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPC2ImplantConfig) GetMaxFileGen() int32 {
	if x != nil {
		return x.MaxFileGen
	}
	return 0
}

func (x *HTTPC2ImplantConfig) GetMinFileGen() int32 {
	if x != nil {
		return x.MinFileGen
	}
	return 0
}

func (x *HTTPC2ImplantConfig) GetMaxPathGen() int32 {
	if x != nil {
		return x.MaxPathGen
	}
	return 0
}

func (x *HTTPC2ImplantConfig) GetMinPathGen() int32 {
	if x != nil {
		return x.MinPathGen
	}
	return 0
}

func (x *HTTPC2ImplantConfig) GetMaxPathLength() int32 {
	if x != nil {
		return x.MaxPathLength
	}
	return 0
}

func (x *HTTPC2ImplantConfig) GetMinPathLength() int32 {
	if x != nil {
		return x.MinPathLength
	}
	return 0
}

func (x *HTTPC2ImplantConfig) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *HTTPC2ImplantConfig) GetPathSegments() []*HTTPC2PathSegment {
	if x != nil {
		return x.PathSegments
	}
	return nil
}

func (x *HTTPC2ImplantConfig) GetNonceQueryLength() int32 {
	if x != nil {
		return x.NonceQueryLength
	}
	return 0
}

func (x *HTTPC2ImplantConfig) GetNonceMode() string {
	if x != nil {
		return x.NonceMode
	}
	return ""
}

type HTTPC2Cookie struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPC2Cookie) Reset() {
	*x = HTTPC2Cookie{}
	mi := &file_clientpb_client_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2Cookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2Cookie) ProtoMessage() {}

func (x *HTTPC2Cookie) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2Cookie.ProtoReflect.Descriptor instead.
func (*HTTPC2Cookie) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{101}
}

func (x *HTTPC2Cookie) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HTTPC2Cookie) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HTTPC2Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=Method,proto3" json:"Method,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Value         string                 `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Probability   int32                  `protobuf:"varint,5,opt,name=Probability,proto3" json:"Probability,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPC2Header) Reset() {
	*x = HTTPC2Header{}
	mi := &file_clientpb_client_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2Header) ProtoMessage() {}

func (x *HTTPC2Header) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2Header.ProtoReflect.Descriptor instead.
func (*HTTPC2Header) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{102}
}

func (x *HTTPC2Header) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HTTPC2Header) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPC2Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPC2Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HTTPC2Header) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type HTTPC2URLParameter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=Method,proto3" json:"Method,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Value         string                 `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Probability   int32                  `protobuf:"varint,5,opt,name=Probability,proto3" json:"Probability,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPC2URLParameter) Reset() {
	*x = HTTPC2URLParameter{}
	mi := &file_clientpb_client_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2URLParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2URLParameter) ProtoMessage() {}

func (x *HTTPC2URLParameter) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2URLParameter.ProtoReflect.Descriptor instead.
func (*HTTPC2URLParameter) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{103}
}

func (x *HTTPC2URLParameter) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HTTPC2URLParameter) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPC2URLParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPC2URLParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HTTPC2URLParameter) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type HTTPC2PathSegment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IsFile        bool                   `protobuf:"varint,2,opt,name=IsFile,proto3" json:"IsFile,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPC2PathSegment) Reset() {
	*x = HTTPC2PathSegment{}
	mi := &file_clientpb_client_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPC2PathSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPC2PathSegment) ProtoMessage() {}

func (x *HTTPC2PathSegment) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPC2PathSegment.ProtoReflect.Descriptor instead.
func (*HTTPC2PathSegment) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{104}
}

func (x *HTTPC2PathSegment) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HTTPC2PathSegment) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

func (x *HTTPC2PathSegment) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Credential struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ID             string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Username       string                 `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Plaintext      string                 `protobuf:"bytes,3,opt,name=Plaintext,proto3" json:"Plaintext,omitempty"`
	Hash           string                 `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	HashType       HashType               `protobuf:"varint,5,opt,name=HashType,proto3,enum=clientpb.HashType" json:"HashType,omitempty"`
	IsCracked      bool                   `protobuf:"varint,6,opt,name=IsCracked,proto3" json:"IsCracked,omitempty"`
	OriginHostUUID string                 `protobuf:"bytes,7,opt,name=OriginHostUUID,proto3" json:"OriginHostUUID,omitempty"`
	Collection     string                 `protobuf:"bytes,8,opt,name=Collection,proto3" json:"Collection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_clientpb_client_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{105}
}

func (x *Credential) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Credential) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Credential) GetPlaintext() string {
	if x != nil {
		return x.Plaintext
	}
	return ""
}

func (x *Credential) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Credential) GetHashType() HashType {
	if x != nil {
		return x.HashType
	}
	return HashType_MD5
}

func (x *Credential) GetIsCracked() bool {
	if x != nil {
		return x.IsCracked
	}
	return false
}

func (x *Credential) GetOriginHostUUID() string {
	if x != nil {
		return x.OriginHostUUID
	}
	return ""
}

func (x *Credential) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type Credentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credentials   []*Credential          `protobuf:"bytes,1,rep,name=Credentials,proto3" json:"Credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	mi := &file_clientpb_client_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{106}
}

func (x *Credentials) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

// [ Crackstation ] ----------------------------------------
type Crackstations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Crackstations []*Crackstation        `protobuf:"bytes,1,rep,name=Crackstations,proto3" json:"Crackstations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Crackstations) Reset() {
	*x = Crackstations{}
	mi := &file_clientpb_client_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Crackstations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crackstations) ProtoMessage() {}

func (x *Crackstations) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crackstations.ProtoReflect.Descriptor instead.
func (*Crackstations) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{107}
}

func (x *Crackstations) GetCrackstations() []*Crackstation {
	if x != nil {
		return x.Crackstations
	}
	return nil
}

type CrackstationStatus struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	HostUUID          string                 `protobuf:"bytes,2,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	State             States                 `protobuf:"varint,3,opt,name=State,proto3,enum=clientpb.States" json:"State,omitempty"`
	CurrentCrackJobID string                 `protobuf:"bytes,4,opt,name=CurrentCrackJobID,proto3" json:"CurrentCrackJobID,omitempty"`
	IsSyncing         bool                   `protobuf:"varint,5,opt,name=IsSyncing,proto3" json:"IsSyncing,omitempty"`
	Syncing           *CrackSyncStatus       `protobuf:"bytes,6,opt,name=Syncing,proto3" json:"Syncing,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CrackstationStatus) Reset() {
	*x = CrackstationStatus{}
	mi := &file_clientpb_client_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackstationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackstationStatus) ProtoMessage() {}

func (x *CrackstationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackstationStatus.ProtoReflect.Descriptor instead.
func (*CrackstationStatus) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{108}
}

func (x *CrackstationStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CrackstationStatus) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *CrackstationStatus) GetState() States {
	if x != nil {
		return x.State
	}
	return States_IDLE
}

func (x *CrackstationStatus) GetCurrentCrackJobID() string {
	if x != nil {
		return x.CurrentCrackJobID
	}
	return ""
}

func (x *CrackstationStatus) GetIsSyncing() bool {
	if x != nil {
		return x.IsSyncing
	}
	return false
}

func (x *CrackstationStatus) GetSyncing() *CrackSyncStatus {
	if x != nil {
		return x.Syncing
	}
	return nil
}

type CrackSyncStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Speed         float32                `protobuf:"fixed32,1,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Progress      map[string]float32     `protobuf:"bytes,2,rep,name=Progress,proto3" json:"Progress,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrackSyncStatus) Reset() {
	*x = CrackSyncStatus{}
	mi := &file_clientpb_client_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackSyncStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackSyncStatus) ProtoMessage() {}

func (x *CrackSyncStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackSyncStatus.ProtoReflect.Descriptor instead.
func (*CrackSyncStatus) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{109}
}

func (x *CrackSyncStatus) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *CrackSyncStatus) GetProgress() map[string]float32 {
	if x != nil {
		return x.Progress
	}
	return nil
}

type CrackBenchmark struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	HostUUID      string                 `protobuf:"bytes,2,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	Benchmarks    map[int32]uint64       `protobuf:"bytes,3,rep,name=Benchmarks,proto3" json:"Benchmarks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrackBenchmark) Reset() {
	*x = CrackBenchmark{}
	mi := &file_clientpb_client_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackBenchmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackBenchmark) ProtoMessage() {}

func (x *CrackBenchmark) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackBenchmark.ProtoReflect.Descriptor instead.
func (*CrackBenchmark) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{110}
}

func (x *CrackBenchmark) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CrackBenchmark) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *CrackBenchmark) GetBenchmarks() map[int32]uint64 {
	if x != nil {
		return x.Benchmarks
	}
	return nil
}

type CrackTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	HostUUID      string                 `protobuf:"bytes,2,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"` // CrackstationID
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	StartedAt     int64                  `protobuf:"varint,4,opt,name=StartedAt,proto3" json:"StartedAt,omitempty"`
	CompletedAt   int64                  `protobuf:"varint,5,opt,name=CompletedAt,proto3" json:"CompletedAt,omitempty"`
	Err           string                 `protobuf:"bytes,7,opt,name=Err,proto3" json:"Err,omitempty"`
	Command       *CrackCommand          `protobuf:"bytes,9,opt,name=Command,proto3" json:"Command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrackTask) Reset() {
	*x = CrackTask{}
	mi := &file_clientpb_client_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackTask) ProtoMessage() {}

func (x *CrackTask) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackTask.ProtoReflect.Descriptor instead.
func (*CrackTask) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{111}
}

func (x *CrackTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CrackTask) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *CrackTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CrackTask) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *CrackTask) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *CrackTask) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *CrackTask) GetCommand() *CrackCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

type Crackstation struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ID             string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	OperatorName   string                 `protobuf:"bytes,3,opt,name=OperatorName,proto3" json:"OperatorName,omitempty"`
	GOOS           string                 `protobuf:"bytes,4,opt,name=GOOS,proto3" json:"GOOS,omitempty"`     // The cracker's OS
	GOARCH         string                 `protobuf:"bytes,5,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"` // The cracker's Arch
	HashcatVersion string                 `protobuf:"bytes,6,opt,name=HashcatVersion,proto3" json:"HashcatVersion,omitempty"`
	HostUUID       string                 `protobuf:"bytes,7,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	Version        string                 `protobuf:"bytes,8,opt,name=Version,proto3" json:"Version,omitempty"`
	Benchmarks     map[int32]uint64       `protobuf:"bytes,9,rep,name=Benchmarks,proto3" json:"Benchmarks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	CUDA           []*CUDABackendInfo     `protobuf:"bytes,100,rep,name=CUDA,proto3" json:"CUDA,omitempty"`
	Metal          []*MetalBackendInfo    `protobuf:"bytes,101,rep,name=Metal,proto3" json:"Metal,omitempty"`
	OpenCL         []*OpenCLBackendInfo   `protobuf:"bytes,102,rep,name=OpenCL,proto3" json:"OpenCL,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Crackstation) Reset() {
	*x = Crackstation{}
	mi := &file_clientpb_client_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Crackstation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crackstation) ProtoMessage() {}

func (x *Crackstation) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crackstation.ProtoReflect.Descriptor instead.
func (*Crackstation) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{112}
}

func (x *Crackstation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Crackstation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Crackstation) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *Crackstation) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *Crackstation) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *Crackstation) GetHashcatVersion() string {
	if x != nil {
		return x.HashcatVersion
	}
	return ""
}

func (x *Crackstation) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *Crackstation) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Crackstation) GetBenchmarks() map[int32]uint64 {
	if x != nil {
		return x.Benchmarks
	}
	return nil
}

func (x *Crackstation) GetCUDA() []*CUDABackendInfo {
	if x != nil {
		return x.CUDA
	}
	return nil
}

func (x *Crackstation) GetMetal() []*MetalBackendInfo {
	if x != nil {
		return x.Metal
	}
	return nil
}

func (x *Crackstation) GetOpenCL() []*OpenCLBackendInfo {
	if x != nil {
		return x.OpenCL
	}
	return nil
}

type CUDABackendInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	VendorID      int32                  `protobuf:"varint,2,opt,name=VendorID,proto3" json:"VendorID,omitempty"`
	Vendor        string                 `protobuf:"bytes,3,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Version       string                 `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	Processors    int32                  `protobuf:"varint,6,opt,name=Processors,proto3" json:"Processors,omitempty"`
	Clock         int32                  `protobuf:"varint,7,opt,name=Clock,proto3" json:"Clock,omitempty"`
	MemoryTotal   string                 `protobuf:"bytes,8,opt,name=MemoryTotal,proto3" json:"MemoryTotal,omitempty"`
	MemoryFree    string                 `protobuf:"bytes,9,opt,name=MemoryFree,proto3" json:"MemoryFree,omitempty"`
	CUDAVersion   string                 `protobuf:"bytes,10,opt,name=CUDAVersion,proto3" json:"CUDAVersion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUDABackendInfo) Reset() {
	*x = CUDABackendInfo{}
	mi := &file_clientpb_client_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUDABackendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUDABackendInfo) ProtoMessage() {}

func (x *CUDABackendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUDABackendInfo.ProtoReflect.Descriptor instead.
func (*CUDABackendInfo) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{113}
}

func (x *CUDABackendInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CUDABackendInfo) GetVendorID() int32 {
	if x != nil {
		return x.VendorID
	}
	return 0
}

func (x *CUDABackendInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CUDABackendInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CUDABackendInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CUDABackendInfo) GetProcessors() int32 {
	if x != nil {
		return x.Processors
	}
	return 0
}

func (x *CUDABackendInfo) GetClock() int32 {
	if x != nil {
		return x.Clock
	}
	return 0
}

func (x *CUDABackendInfo) GetMemoryTotal() string {
	if x != nil {
		return x.MemoryTotal
	}
	return ""
}

func (x *CUDABackendInfo) GetMemoryFree() string {
	if x != nil {
		return x.MemoryFree
	}
	return ""
}

func (x *CUDABackendInfo) GetCUDAVersion() string {
	if x != nil {
		return x.CUDAVersion
	}
	return ""
}

type OpenCLBackendInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Type                string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	VendorID            int32                  `protobuf:"varint,2,opt,name=VendorID,proto3" json:"VendorID,omitempty"`
	Vendor              string                 `protobuf:"bytes,3,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
	Name                string                 `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Version             string                 `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	Processors          int32                  `protobuf:"varint,6,opt,name=Processors,proto3" json:"Processors,omitempty"`
	Clock               int32                  `protobuf:"varint,7,opt,name=Clock,proto3" json:"Clock,omitempty"`
	MemoryTotal         string                 `protobuf:"bytes,8,opt,name=MemoryTotal,proto3" json:"MemoryTotal,omitempty"`
	MemoryFree          string                 `protobuf:"bytes,9,opt,name=MemoryFree,proto3" json:"MemoryFree,omitempty"`
	OpenCLVersion       string                 `protobuf:"bytes,10,opt,name=OpenCLVersion,proto3" json:"OpenCLVersion,omitempty"`
	OpenCLDriverVersion string                 `protobuf:"bytes,11,opt,name=OpenCLDriverVersion,proto3" json:"OpenCLDriverVersion,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OpenCLBackendInfo) Reset() {
	*x = OpenCLBackendInfo{}
	mi := &file_clientpb_client_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenCLBackendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCLBackendInfo) ProtoMessage() {}

func (x *OpenCLBackendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCLBackendInfo.ProtoReflect.Descriptor instead.
func (*OpenCLBackendInfo) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{114}
}

func (x *OpenCLBackendInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OpenCLBackendInfo) GetVendorID() int32 {
	if x != nil {
		return x.VendorID
	}
	return 0
}

func (x *OpenCLBackendInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *OpenCLBackendInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpenCLBackendInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OpenCLBackendInfo) GetProcessors() int32 {
	if x != nil {
		return x.Processors
	}
	return 0
}

func (x *OpenCLBackendInfo) GetClock() int32 {
	if x != nil {
		return x.Clock
	}
	return 0
}

func (x *OpenCLBackendInfo) GetMemoryTotal() string {
	if x != nil {
		return x.MemoryTotal
	}
	return ""
}

func (x *OpenCLBackendInfo) GetMemoryFree() string {
	if x != nil {
		return x.MemoryFree
	}
	return ""
}

func (x *OpenCLBackendInfo) GetOpenCLVersion() string {
	if x != nil {
		return x.OpenCLVersion
	}
	return ""
}

func (x *OpenCLBackendInfo) GetOpenCLDriverVersion() string {
	if x != nil {
		return x.OpenCLDriverVersion
	}
	return ""
}

type MetalBackendInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	VendorID      int32                  `protobuf:"varint,2,opt,name=VendorID,proto3" json:"VendorID,omitempty"`
	Vendor        string                 `protobuf:"bytes,3,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Version       string                 `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	Processors    int32                  `protobuf:"varint,6,opt,name=Processors,proto3" json:"Processors,omitempty"`
	Clock         int32                  `protobuf:"varint,7,opt,name=Clock,proto3" json:"Clock,omitempty"`
	MemoryTotal   string                 `protobuf:"bytes,8,opt,name=MemoryTotal,proto3" json:"MemoryTotal,omitempty"`
	MemoryFree    string                 `protobuf:"bytes,9,opt,name=MemoryFree,proto3" json:"MemoryFree,omitempty"`
	MetalVersion  string                 `protobuf:"bytes,10,opt,name=MetalVersion,proto3" json:"MetalVersion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetalBackendInfo) Reset() {
	*x = MetalBackendInfo{}
	mi := &file_clientpb_client_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetalBackendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetalBackendInfo) ProtoMessage() {}

func (x *MetalBackendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetalBackendInfo.ProtoReflect.Descriptor instead.
func (*MetalBackendInfo) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{115}
}

func (x *MetalBackendInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MetalBackendInfo) GetVendorID() int32 {
	if x != nil {
		return x.VendorID
	}
	return 0
}

func (x *MetalBackendInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *MetalBackendInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetalBackendInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MetalBackendInfo) GetProcessors() int32 {
	if x != nil {
		return x.Processors
	}
	return 0
}

func (x *MetalBackendInfo) GetClock() int32 {
	if x != nil {
		return x.Clock
	}
	return 0
}

func (x *MetalBackendInfo) GetMemoryTotal() string {
	if x != nil {
		return x.MemoryTotal
	}
	return ""
}

func (x *MetalBackendInfo) GetMemoryFree() string {
	if x != nil {
		return x.MemoryFree
	}
	return ""
}

func (x *MetalBackendInfo) GetMetalVersion() string {
	if x != nil {
		return x.MetalVersion
	}
	return ""
}

type CrackCommand struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	AttackMode CrackAttackMode        `protobuf:"varint,1,opt,name=AttackMode,proto3,enum=clientpb.CrackAttackMode" json:"AttackMode,omitempty"`
	HashType   HashType               `protobuf:"varint,2,opt,name=HashType,proto3,enum=clientpb.HashType" json:"HashType,omitempty"`
	Hashes     []string               `protobuf:"bytes,3,rep,name=Hashes,proto3" json:"Hashes,omitempty"`
	// --version
	// --help
	Quiet                  bool   `protobuf:"varint,4,opt,name=Quiet,proto3" json:"Quiet,omitempty"`
	HexCharset             bool   `protobuf:"varint,5,opt,name=HexCharset,proto3" json:"HexCharset,omitempty"`
	HexSalt                bool   `protobuf:"varint,6,opt,name=HexSalt,proto3" json:"HexSalt,omitempty"`
	HexWordlist            bool   `protobuf:"varint,7,opt,name=HexWordlist,proto3" json:"HexWordlist,omitempty"`
	Force                  bool   `protobuf:"varint,8,opt,name=Force,proto3" json:"Force,omitempty"`
	DeprecatedCheckDisable bool   `protobuf:"varint,9,opt,name=DeprecatedCheckDisable,proto3" json:"DeprecatedCheckDisable,omitempty"`
	Status                 bool   `protobuf:"varint,10,opt,name=Status,proto3" json:"Status,omitempty"`
	StatusJSON             bool   `protobuf:"varint,11,opt,name=StatusJSON,proto3" json:"StatusJSON,omitempty"`
	StatusTimer            uint32 `protobuf:"varint,12,opt,name=StatusTimer,proto3" json:"StatusTimer,omitempty"`
	StdinTimeoutAbort      uint32 `protobuf:"varint,13,opt,name=StdinTimeoutAbort,proto3" json:"StdinTimeoutAbort,omitempty"`
	MachineReadable        bool   `protobuf:"varint,14,opt,name=MachineReadable,proto3" json:"MachineReadable,omitempty"`
	KeepGuessing           bool   `protobuf:"varint,15,opt,name=KeepGuessing,proto3" json:"KeepGuessing,omitempty"`
	SelfTestDisable        bool   `protobuf:"varint,16,opt,name=SelfTestDisable,proto3" json:"SelfTestDisable,omitempty"`
	Loopback               bool   `protobuf:"varint,17,opt,name=Loopback,proto3" json:"Loopback,omitempty"`
	MarkovHcstat2          []byte `protobuf:"bytes,18,opt,name=MarkovHcstat2,proto3" json:"MarkovHcstat2,omitempty"` // --markov-hcstat2 FILE
	MarkovDisable          bool   `protobuf:"varint,19,opt,name=MarkovDisable,proto3" json:"MarkovDisable,omitempty"`
	MarkovClassic          bool   `protobuf:"varint,20,opt,name=MarkovClassic,proto3" json:"MarkovClassic,omitempty"`
	MarkovInverse          bool   `protobuf:"varint,21,opt,name=MarkovInverse,proto3" json:"MarkovInverse,omitempty"`
	MarkovThreshold        uint32 `protobuf:"varint,22,opt,name=MarkovThreshold,proto3" json:"MarkovThreshold,omitempty"`
	Runtime                uint32 `protobuf:"varint,23,opt,name=Runtime,proto3" json:"Runtime,omitempty"`
	Session                string `protobuf:"bytes,24,opt,name=Session,proto3" json:"Session,omitempty"` // [a-zA-Z0-9_-]
	Restore                bool   `protobuf:"varint,25,opt,name=Restore,proto3" json:"Restore,omitempty"`
	RestoreDisable         bool   `protobuf:"varint,26,opt,name=RestoreDisable,proto3" json:"RestoreDisable,omitempty"`
	RestoreFile            []byte `protobuf:"bytes,27,opt,name=RestoreFile,proto3" json:"RestoreFile,omitempty"` // --restore-file-path FILE
	// --outfile FILE (28)
	OutfileFormat          []CrackOutfileFormat `protobuf:"varint,29,rep,packed,name=OutfileFormat,proto3,enum=clientpb.CrackOutfileFormat" json:"OutfileFormat,omitempty"`
	OutfileAutohexDisable  bool                 `protobuf:"varint,30,opt,name=OutfileAutohexDisable,proto3" json:"OutfileAutohexDisable,omitempty"`
	OutfileCheckTimer      uint32               `protobuf:"varint,31,opt,name=OutfileCheckTimer,proto3" json:"OutfileCheckTimer,omitempty"`
	WordlistAutohexDisable bool                 `protobuf:"varint,32,opt,name=WordlistAutohexDisable,proto3" json:"WordlistAutohexDisable,omitempty"`
	Separator              string               `protobuf:"bytes,33,opt,name=Separator,proto3" json:"Separator,omitempty"` // single char
	Stdout                 bool                 `protobuf:"varint,34,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Show                   bool                 `protobuf:"varint,35,opt,name=Show,proto3" json:"Show,omitempty"`
	Left                   bool                 `protobuf:"varint,36,opt,name=Left,proto3" json:"Left,omitempty"`
	Username               bool                 `protobuf:"varint,37,opt,name=Username,proto3" json:"Username,omitempty"`
	Remove                 bool                 `protobuf:"varint,38,opt,name=Remove,proto3" json:"Remove,omitempty"`
	RemoveTimer            uint32               `protobuf:"varint,39,opt,name=RemoveTimer,proto3" json:"RemoveTimer,omitempty"`
	PotfileDisable         bool                 `protobuf:"varint,40,opt,name=PotfileDisable,proto3" json:"PotfileDisable,omitempty"`
	Potfile                []byte               `protobuf:"bytes,41,opt,name=Potfile,proto3" json:"Potfile,omitempty"` // --potfile-path FILE
	EncodingFrom           CrackEncoding        `protobuf:"varint,42,opt,name=EncodingFrom,proto3,enum=clientpb.CrackEncoding" json:"EncodingFrom,omitempty"`
	EncodingTo             CrackEncoding        `protobuf:"varint,43,opt,name=EncodingTo,proto3,enum=clientpb.CrackEncoding" json:"EncodingTo,omitempty"`
	DebugMode              uint32               `protobuf:"varint,44,opt,name=DebugMode,proto3" json:"DebugMode,omitempty"`
	// --debug-file FILE (45)
	// --induction-dir DIR (46)
	// --outfile-check-dir DIR (47)
	LogfileDisable        bool   `protobuf:"varint,48,opt,name=LogfileDisable,proto3" json:"LogfileDisable,omitempty"`
	HccapxMessagePair     uint32 `protobuf:"varint,49,opt,name=HccapxMessagePair,proto3" json:"HccapxMessagePair,omitempty"`
	NonceErrorCorrections uint32 `protobuf:"varint,50,opt,name=NonceErrorCorrections,proto3" json:"NonceErrorCorrections,omitempty"`
	KeyboardLayoutMapping []byte `protobuf:"bytes,51,opt,name=KeyboardLayoutMapping,proto3" json:"KeyboardLayoutMapping,omitempty"` // --keyboard-layout-mapping FILE
	// --truecrypt-keyfiles FILE (52)
	// --veracrypt-keyfiles FILE (53)
	// --veracrypt-pim-start PIM (54)
	// --veracrypt-pim-stop PIM (55)
	Benchmark    bool     `protobuf:"varint,56,opt,name=Benchmark,proto3" json:"Benchmark,omitempty"`
	BenchmarkAll bool     `protobuf:"varint,57,opt,name=BenchmarkAll,proto3" json:"BenchmarkAll,omitempty"`
	SpeedOnly    bool     `protobuf:"varint,58,opt,name=SpeedOnly,proto3" json:"SpeedOnly,omitempty"`
	ProgressOnly bool     `protobuf:"varint,59,opt,name=ProgressOnly,proto3" json:"ProgressOnly,omitempty"`
	SegmentSize  uint32   `protobuf:"varint,60,opt,name=SegmentSize,proto3" json:"SegmentSize,omitempty"`
	BitmapMin    uint32   `protobuf:"varint,61,opt,name=BitmapMin,proto3" json:"BitmapMin,omitempty"`
	BitmapMax    uint32   `protobuf:"varint,62,opt,name=BitmapMax,proto3" json:"BitmapMax,omitempty"`
	CPUAffinity  []uint32 `protobuf:"varint,63,rep,packed,name=CPUAffinity,proto3" json:"CPUAffinity,omitempty"`
	HookThreads  uint32   `protobuf:"varint,64,opt,name=HookThreads,proto3" json:"HookThreads,omitempty"`
	HashInfo     bool     `protobuf:"varint,65,opt,name=HashInfo,proto3" json:"HashInfo,omitempty"`
	// --example-hashes (66)
	BackendIgnoreCUDA     bool                 `protobuf:"varint,67,opt,name=BackendIgnoreCUDA,proto3" json:"BackendIgnoreCUDA,omitempty"`
	BackendIgnoreHip      bool                 `protobuf:"varint,68,opt,name=BackendIgnoreHip,proto3" json:"BackendIgnoreHip,omitempty"`
	BackendIgnoreMetal    bool                 `protobuf:"varint,69,opt,name=BackendIgnoreMetal,proto3" json:"BackendIgnoreMetal,omitempty"`
	BackendIgnoreOpenCL   bool                 `protobuf:"varint,70,opt,name=BackendIgnoreOpenCL,proto3" json:"BackendIgnoreOpenCL,omitempty"`
	BackendInfo           bool                 `protobuf:"varint,71,opt,name=BackendInfo,proto3" json:"BackendInfo,omitempty"`
	BackendDevices        []uint32             `protobuf:"varint,72,rep,packed,name=BackendDevices,proto3" json:"BackendDevices,omitempty"`
	OpenCLDeviceTypes     []uint32             `protobuf:"varint,73,rep,packed,name=OpenCLDeviceTypes,proto3" json:"OpenCLDeviceTypes,omitempty"`
	OptimizedKernelEnable bool                 `protobuf:"varint,74,opt,name=OptimizedKernelEnable,proto3" json:"OptimizedKernelEnable,omitempty"`
	MultiplyAccelDisabled bool                 `protobuf:"varint,75,opt,name=MultiplyAccelDisabled,proto3" json:"MultiplyAccelDisabled,omitempty"`
	WorkloadProfile       CrackWorkloadProfile `protobuf:"varint,76,opt,name=WorkloadProfile,proto3,enum=clientpb.CrackWorkloadProfile" json:"WorkloadProfile,omitempty"`
	KernelAccel           uint32               `protobuf:"varint,77,opt,name=KernelAccel,proto3" json:"KernelAccel,omitempty"`
	KernelLoops           uint32               `protobuf:"varint,78,opt,name=KernelLoops,proto3" json:"KernelLoops,omitempty"`
	KernelThreads         uint32               `protobuf:"varint,79,opt,name=KernelThreads,proto3" json:"KernelThreads,omitempty"`
	BackendVectorWidth    uint32               `protobuf:"varint,80,opt,name=BackendVectorWidth,proto3" json:"BackendVectorWidth,omitempty"`
	SpinDamp              uint32               `protobuf:"varint,81,opt,name=SpinDamp,proto3" json:"SpinDamp,omitempty"`
	HwmonDisable          bool                 `protobuf:"varint,82,opt,name=HwmonDisable,proto3" json:"HwmonDisable,omitempty"`
	HwmonTempAbort        uint32               `protobuf:"varint,83,opt,name=HwmonTempAbort,proto3" json:"HwmonTempAbort,omitempty"`
	ScryptTMTO            uint32               `protobuf:"varint,84,opt,name=ScryptTMTO,proto3" json:"ScryptTMTO,omitempty"`
	Skip                  uint64               `protobuf:"varint,85,opt,name=Skip,proto3" json:"Skip,omitempty"`
	Limit                 uint64               `protobuf:"varint,86,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Keyspace              bool                 `protobuf:"varint,87,opt,name=Keyspace,proto3" json:"Keyspace,omitempty"`
	// --rule-left (88)
	// --rule-right (89)
	RulesFile             []byte `protobuf:"bytes,90,opt,name=RulesFile,proto3" json:"RulesFile,omitempty"` // --rules-file FILE
	GenerateRules         uint32 `protobuf:"varint,91,opt,name=GenerateRules,proto3" json:"GenerateRules,omitempty"`
	GenerateRulesFunMin   uint32 `protobuf:"varint,92,opt,name=GenerateRulesFunMin,proto3" json:"GenerateRulesFunMin,omitempty"`
	GenerateRulesFunMax   uint32 `protobuf:"varint,93,opt,name=GenerateRulesFunMax,proto3" json:"GenerateRulesFunMax,omitempty"`
	GenerateRulesFuncSel  string `protobuf:"bytes,94,opt,name=GenerateRulesFuncSel,proto3" json:"GenerateRulesFuncSel,omitempty"`
	GenerateRulesSeed     int32  `protobuf:"varint,95,opt,name=GenerateRulesSeed,proto3" json:"GenerateRulesSeed,omitempty"`
	CustomCharset1        string `protobuf:"bytes,96,opt,name=CustomCharset1,proto3" json:"CustomCharset1,omitempty"`
	CustomCharset2        string `protobuf:"bytes,97,opt,name=CustomCharset2,proto3" json:"CustomCharset2,omitempty"`
	CustomCharset3        string `protobuf:"bytes,98,opt,name=CustomCharset3,proto3" json:"CustomCharset3,omitempty"`
	CustomCharset4        string `protobuf:"bytes,99,opt,name=CustomCharset4,proto3" json:"CustomCharset4,omitempty"`
	Identify              string `protobuf:"bytes,100,opt,name=Identify,proto3" json:"Identify,omitempty"`
	Increment             bool   `protobuf:"varint,101,opt,name=Increment,proto3" json:"Increment,omitempty"`
	IncrementMin          uint32 `protobuf:"varint,102,opt,name=IncrementMin,proto3" json:"IncrementMin,omitempty"`
	IncrementMax          uint32 `protobuf:"varint,103,opt,name=IncrementMax,proto3" json:"IncrementMax,omitempty"`
	SlowCandidates        bool   `protobuf:"varint,104,opt,name=SlowCandidates,proto3" json:"SlowCandidates,omitempty"`
	BrainServer           bool   `protobuf:"varint,105,opt,name=BrainServer,proto3" json:"BrainServer,omitempty"`
	BrainServerTimer      uint32 `protobuf:"varint,106,opt,name=BrainServerTimer,proto3" json:"BrainServerTimer,omitempty"`
	BrainClient           bool   `protobuf:"varint,107,opt,name=BrainClient,proto3" json:"BrainClient,omitempty"`
	BrainClientFeatures   string `protobuf:"bytes,108,opt,name=BrainClientFeatures,proto3" json:"BrainClientFeatures,omitempty"`
	BrainHost             string `protobuf:"bytes,109,opt,name=BrainHost,proto3" json:"BrainHost,omitempty"`
	BrainPort             uint32 `protobuf:"varint,110,opt,name=BrainPort,proto3" json:"BrainPort,omitempty"`
	BrainPassword         string `protobuf:"bytes,111,opt,name=BrainPassword,proto3" json:"BrainPassword,omitempty"`
	BrainSession          string `protobuf:"bytes,112,opt,name=BrainSession,proto3" json:"BrainSession,omitempty"`
	BrainSessionWhitelist string `protobuf:"bytes,113,opt,name=BrainSessionWhitelist,proto3" json:"BrainSessionWhitelist,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CrackCommand) Reset() {
	*x = CrackCommand{}
	mi := &file_clientpb_client_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackCommand) ProtoMessage() {}

func (x *CrackCommand) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackCommand.ProtoReflect.Descriptor instead.
func (*CrackCommand) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{116}
}

func (x *CrackCommand) GetAttackMode() CrackAttackMode {
	if x != nil {
		return x.AttackMode
	}
	return CrackAttackMode_STRAIGHT
}

func (x *CrackCommand) GetHashType() HashType {
	if x != nil {
		return x.HashType
	}
	return HashType_MD5
}

func (x *CrackCommand) GetHashes() []string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *CrackCommand) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

func (x *CrackCommand) GetHexCharset() bool {
	if x != nil {
		return x.HexCharset
	}
	return false
}

func (x *CrackCommand) GetHexSalt() bool {
	if x != nil {
		return x.HexSalt
	}
	return false
}

func (x *CrackCommand) GetHexWordlist() bool {
	if x != nil {
		return x.HexWordlist
	}
	return false
}

func (x *CrackCommand) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *CrackCommand) GetDeprecatedCheckDisable() bool {
	if x != nil {
		return x.DeprecatedCheckDisable
	}
	return false
}

func (x *CrackCommand) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CrackCommand) GetStatusJSON() bool {
	if x != nil {
		return x.StatusJSON
	}
	return false
}

func (x *CrackCommand) GetStatusTimer() uint32 {
	if x != nil {
		return x.StatusTimer
	}
	return 0
}

func (x *CrackCommand) GetStdinTimeoutAbort() uint32 {
	if x != nil {
		return x.StdinTimeoutAbort
	}
	return 0
}

func (x *CrackCommand) GetMachineReadable() bool {
	if x != nil {
		return x.MachineReadable
	}
	return false
}

func (x *CrackCommand) GetKeepGuessing() bool {
	if x != nil {
		return x.KeepGuessing
	}
	return false
}

func (x *CrackCommand) GetSelfTestDisable() bool {
	if x != nil {
		return x.SelfTestDisable
	}
	return false
}

func (x *CrackCommand) GetLoopback() bool {
	if x != nil {
		return x.Loopback
	}
	return false
}

func (x *CrackCommand) GetMarkovHcstat2() []byte {
	if x != nil {
		return x.MarkovHcstat2
	}
	return nil
}

func (x *CrackCommand) GetMarkovDisable() bool {
	if x != nil {
		return x.MarkovDisable
	}
	return false
}

func (x *CrackCommand) GetMarkovClassic() bool {
	if x != nil {
		return x.MarkovClassic
	}
	return false
}

func (x *CrackCommand) GetMarkovInverse() bool {
	if x != nil {
		return x.MarkovInverse
	}
	return false
}

func (x *CrackCommand) GetMarkovThreshold() uint32 {
	if x != nil {
		return x.MarkovThreshold
	}
	return 0
}

func (x *CrackCommand) GetRuntime() uint32 {
	if x != nil {
		return x.Runtime
	}
	return 0
}

func (x *CrackCommand) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *CrackCommand) GetRestore() bool {
	if x != nil {
		return x.Restore
	}
	return false
}

func (x *CrackCommand) GetRestoreDisable() bool {
	if x != nil {
		return x.RestoreDisable
	}
	return false
}

func (x *CrackCommand) GetRestoreFile() []byte {
	if x != nil {
		return x.RestoreFile
	}
	return nil
}

func (x *CrackCommand) GetOutfileFormat() []CrackOutfileFormat {
	if x != nil {
		return x.OutfileFormat
	}
	return nil
}

func (x *CrackCommand) GetOutfileAutohexDisable() bool {
	if x != nil {
		return x.OutfileAutohexDisable
	}
	return false
}

func (x *CrackCommand) GetOutfileCheckTimer() uint32 {
	if x != nil {
		return x.OutfileCheckTimer
	}
	return 0
}

func (x *CrackCommand) GetWordlistAutohexDisable() bool {
	if x != nil {
		return x.WordlistAutohexDisable
	}
	return false
}

func (x *CrackCommand) GetSeparator() string {
	if x != nil {
		return x.Separator
	}
	return ""
}

func (x *CrackCommand) GetStdout() bool {
	if x != nil {
		return x.Stdout
	}
	return false
}

func (x *CrackCommand) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *CrackCommand) GetLeft() bool {
	if x != nil {
		return x.Left
	}
	return false
}

func (x *CrackCommand) GetUsername() bool {
	if x != nil {
		return x.Username
	}
	return false
}

func (x *CrackCommand) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

func (x *CrackCommand) GetRemoveTimer() uint32 {
	if x != nil {
		return x.RemoveTimer
	}
	return 0
}

func (x *CrackCommand) GetPotfileDisable() bool {
	if x != nil {
		return x.PotfileDisable
	}
	return false
}

func (x *CrackCommand) GetPotfile() []byte {
	if x != nil {
		return x.Potfile
	}
	return nil
}

func (x *CrackCommand) GetEncodingFrom() CrackEncoding {
	if x != nil {
		return x.EncodingFrom
	}
	return CrackEncoding_INVALID_ENCODING
}

func (x *CrackCommand) GetEncodingTo() CrackEncoding {
	if x != nil {
		return x.EncodingTo
	}
	return CrackEncoding_INVALID_ENCODING
}

func (x *CrackCommand) GetDebugMode() uint32 {
	if x != nil {
		return x.DebugMode
	}
	return 0
}

func (x *CrackCommand) GetLogfileDisable() bool {
	if x != nil {
		return x.LogfileDisable
	}
	return false
}

func (x *CrackCommand) GetHccapxMessagePair() uint32 {
	if x != nil {
		return x.HccapxMessagePair
	}
	return 0
}

func (x *CrackCommand) GetNonceErrorCorrections() uint32 {
	if x != nil {
		return x.NonceErrorCorrections
	}
	return 0
}

func (x *CrackCommand) GetKeyboardLayoutMapping() []byte {
	if x != nil {
		return x.KeyboardLayoutMapping
	}
	return nil
}

func (x *CrackCommand) GetBenchmark() bool {
	if x != nil {
		return x.Benchmark
	}
	return false
}

func (x *CrackCommand) GetBenchmarkAll() bool {
	if x != nil {
		return x.BenchmarkAll
	}
	return false
}

func (x *CrackCommand) GetSpeedOnly() bool {
	if x != nil {
		return x.SpeedOnly
	}
	return false
}

func (x *CrackCommand) GetProgressOnly() bool {
	if x != nil {
		return x.ProgressOnly
	}
	return false
}

func (x *CrackCommand) GetSegmentSize() uint32 {
	if x != nil {
		return x.SegmentSize
	}
	return 0
}

func (x *CrackCommand) GetBitmapMin() uint32 {
	if x != nil {
		return x.BitmapMin
	}
	return 0
}

func (x *CrackCommand) GetBitmapMax() uint32 {
	if x != nil {
		return x.BitmapMax
	}
	return 0
}

func (x *CrackCommand) GetCPUAffinity() []uint32 {
	if x != nil {
		return x.CPUAffinity
	}
	return nil
}

func (x *CrackCommand) GetHookThreads() uint32 {
	if x != nil {
		return x.HookThreads
	}
	return 0
}

func (x *CrackCommand) GetHashInfo() bool {
	if x != nil {
		return x.HashInfo
	}
	return false
}

func (x *CrackCommand) GetBackendIgnoreCUDA() bool {
	if x != nil {
		return x.BackendIgnoreCUDA
	}
	return false
}

func (x *CrackCommand) GetBackendIgnoreHip() bool {
	if x != nil {
		return x.BackendIgnoreHip
	}
	return false
}

func (x *CrackCommand) GetBackendIgnoreMetal() bool {
	if x != nil {
		return x.BackendIgnoreMetal
	}
	return false
}

func (x *CrackCommand) GetBackendIgnoreOpenCL() bool {
	if x != nil {
		return x.BackendIgnoreOpenCL
	}
	return false
}

func (x *CrackCommand) GetBackendInfo() bool {
	if x != nil {
		return x.BackendInfo
	}
	return false
}

func (x *CrackCommand) GetBackendDevices() []uint32 {
	if x != nil {
		return x.BackendDevices
	}
	return nil
}

func (x *CrackCommand) GetOpenCLDeviceTypes() []uint32 {
	if x != nil {
		return x.OpenCLDeviceTypes
	}
	return nil
}

func (x *CrackCommand) GetOptimizedKernelEnable() bool {
	if x != nil {
		return x.OptimizedKernelEnable
	}
	return false
}

func (x *CrackCommand) GetMultiplyAccelDisabled() bool {
	if x != nil {
		return x.MultiplyAccelDisabled
	}
	return false
}

func (x *CrackCommand) GetWorkloadProfile() CrackWorkloadProfile {
	if x != nil {
		return x.WorkloadProfile
	}
	return CrackWorkloadProfile_INVALID_WORKLOAD_PROFILE
}

func (x *CrackCommand) GetKernelAccel() uint32 {
	if x != nil {
		return x.KernelAccel
	}
	return 0
}

func (x *CrackCommand) GetKernelLoops() uint32 {
	if x != nil {
		return x.KernelLoops
	}
	return 0
}

func (x *CrackCommand) GetKernelThreads() uint32 {
	if x != nil {
		return x.KernelThreads
	}
	return 0
}

func (x *CrackCommand) GetBackendVectorWidth() uint32 {
	if x != nil {
		return x.BackendVectorWidth
	}
	return 0
}

func (x *CrackCommand) GetSpinDamp() uint32 {
	if x != nil {
		return x.SpinDamp
	}
	return 0
}

func (x *CrackCommand) GetHwmonDisable() bool {
	if x != nil {
		return x.HwmonDisable
	}
	return false
}

func (x *CrackCommand) GetHwmonTempAbort() uint32 {
	if x != nil {
		return x.HwmonTempAbort
	}
	return 0
}

func (x *CrackCommand) GetScryptTMTO() uint32 {
	if x != nil {
		return x.ScryptTMTO
	}
	return 0
}

func (x *CrackCommand) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *CrackCommand) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CrackCommand) GetKeyspace() bool {
	if x != nil {
		return x.Keyspace
	}
	return false
}

func (x *CrackCommand) GetRulesFile() []byte {
	if x != nil {
		return x.RulesFile
	}
	return nil
}

func (x *CrackCommand) GetGenerateRules() uint32 {
	if x != nil {
		return x.GenerateRules
	}
	return 0
}

func (x *CrackCommand) GetGenerateRulesFunMin() uint32 {
	if x != nil {
		return x.GenerateRulesFunMin
	}
	return 0
}

func (x *CrackCommand) GetGenerateRulesFunMax() uint32 {
	if x != nil {
		return x.GenerateRulesFunMax
	}
	return 0
}

func (x *CrackCommand) GetGenerateRulesFuncSel() string {
	if x != nil {
		return x.GenerateRulesFuncSel
	}
	return ""
}

func (x *CrackCommand) GetGenerateRulesSeed() int32 {
	if x != nil {
		return x.GenerateRulesSeed
	}
	return 0
}

func (x *CrackCommand) GetCustomCharset1() string {
	if x != nil {
		return x.CustomCharset1
	}
	return ""
}

func (x *CrackCommand) GetCustomCharset2() string {
	if x != nil {
		return x.CustomCharset2
	}
	return ""
}

func (x *CrackCommand) GetCustomCharset3() string {
	if x != nil {
		return x.CustomCharset3
	}
	return ""
}

func (x *CrackCommand) GetCustomCharset4() string {
	if x != nil {
		return x.CustomCharset4
	}
	return ""
}

func (x *CrackCommand) GetIdentify() string {
	if x != nil {
		return x.Identify
	}
	return ""
}

func (x *CrackCommand) GetIncrement() bool {
	if x != nil {
		return x.Increment
	}
	return false
}

func (x *CrackCommand) GetIncrementMin() uint32 {
	if x != nil {
		return x.IncrementMin
	}
	return 0
}

func (x *CrackCommand) GetIncrementMax() uint32 {
	if x != nil {
		return x.IncrementMax
	}
	return 0
}

func (x *CrackCommand) GetSlowCandidates() bool {
	if x != nil {
		return x.SlowCandidates
	}
	return false
}

func (x *CrackCommand) GetBrainServer() bool {
	if x != nil {
		return x.BrainServer
	}
	return false
}

func (x *CrackCommand) GetBrainServerTimer() uint32 {
	if x != nil {
		return x.BrainServerTimer
	}
	return 0
}

func (x *CrackCommand) GetBrainClient() bool {
	if x != nil {
		return x.BrainClient
	}
	return false
}

func (x *CrackCommand) GetBrainClientFeatures() string {
	if x != nil {
		return x.BrainClientFeatures
	}
	return ""
}

func (x *CrackCommand) GetBrainHost() string {
	if x != nil {
		return x.BrainHost
	}
	return ""
}

func (x *CrackCommand) GetBrainPort() uint32 {
	if x != nil {
		return x.BrainPort
	}
	return 0
}

func (x *CrackCommand) GetBrainPassword() string {
	if x != nil {
		return x.BrainPassword
	}
	return ""
}

func (x *CrackCommand) GetBrainSession() string {
	if x != nil {
		return x.BrainSession
	}
	return ""
}

func (x *CrackCommand) GetBrainSessionWhitelist() string {
	if x != nil {
		return x.BrainSessionWhitelist
	}
	return ""
}

type CrackConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AutoFire      bool                   `protobuf:"varint,1,opt,name=AutoFire,proto3" json:"AutoFire,omitempty"`
	MaxFileSize   int64                  `protobuf:"varint,2,opt,name=MaxFileSize,proto3" json:"MaxFileSize,omitempty"`
	ChunkSize     int64                  `protobuf:"varint,3,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
	MaxDiskUsage  int64                  `protobuf:"varint,4,opt,name=MaxDiskUsage,proto3" json:"MaxDiskUsage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrackConfig) Reset() {
	*x = CrackConfig{}
	mi := &file_clientpb_client_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackConfig) ProtoMessage() {}

func (x *CrackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackConfig.ProtoReflect.Descriptor instead.
func (*CrackConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{117}
}

func (x *CrackConfig) GetAutoFire() bool {
	if x != nil {
		return x.AutoFire
	}
	return false
}

func (x *CrackConfig) GetMaxFileSize() int64 {
	if x != nil {
		return x.MaxFileSize
	}
	return 0
}

func (x *CrackConfig) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *CrackConfig) GetMaxDiskUsage() int64 {
	if x != nil {
		return x.MaxDiskUsage
	}
	return 0
}

type CrackFiles struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Files            []*CrackFile           `protobuf:"bytes,1,rep,name=Files,proto3" json:"Files,omitempty"`
	CurrentDiskUsage int64                  `protobuf:"varint,2,opt,name=CurrentDiskUsage,proto3" json:"CurrentDiskUsage,omitempty"`
	MaxDiskUsage     int64                  `protobuf:"varint,3,opt,name=MaxDiskUsage,proto3" json:"MaxDiskUsage,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CrackFiles) Reset() {
	*x = CrackFiles{}
	mi := &file_clientpb_client_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackFiles) ProtoMessage() {}

func (x *CrackFiles) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackFiles.ProtoReflect.Descriptor instead.
func (*CrackFiles) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{118}
}

func (x *CrackFiles) GetFiles() []*CrackFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CrackFiles) GetCurrentDiskUsage() int64 {
	if x != nil {
		return x.CurrentDiskUsage
	}
	return 0
}

func (x *CrackFiles) GetMaxDiskUsage() int64 {
	if x != nil {
		return x.MaxDiskUsage
	}
	return 0
}

type CrackFile struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ID               string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt        int64                  `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastModified     int64                  `protobuf:"varint,3,opt,name=LastModified,proto3" json:"LastModified,omitempty"`
	Name             string                 `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	UncompressedSize int64                  `protobuf:"varint,5,opt,name=UncompressedSize,proto3" json:"UncompressedSize,omitempty"`
	Sha2_256         string                 `protobuf:"bytes,6,opt,name=Sha2_256,json=Sha2256,proto3" json:"Sha2_256,omitempty"`
	Type             CrackFileType          `protobuf:"varint,7,opt,name=Type,proto3,enum=clientpb.CrackFileType" json:"Type,omitempty"`
	IsCompressed     bool                   `protobuf:"varint,8,opt,name=IsCompressed,proto3" json:"IsCompressed,omitempty"`
	MaxFileSize      int64                  `protobuf:"varint,9,opt,name=MaxFileSize,proto3" json:"MaxFileSize,omitempty"`
	ChunkSize        int64                  `protobuf:"varint,10,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
	Chunks           []*CrackFileChunk      `protobuf:"bytes,100,rep,name=Chunks,proto3" json:"Chunks,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CrackFile) Reset() {
	*x = CrackFile{}
	mi := &file_clientpb_client_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackFile) ProtoMessage() {}

func (x *CrackFile) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackFile.ProtoReflect.Descriptor instead.
func (*CrackFile) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{119}
}

func (x *CrackFile) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CrackFile) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CrackFile) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *CrackFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CrackFile) GetUncompressedSize() int64 {
	if x != nil {
		return x.UncompressedSize
	}
	return 0
}

func (x *CrackFile) GetSha2_256() string {
	if x != nil {
		return x.Sha2_256
	}
	return ""
}

func (x *CrackFile) GetType() CrackFileType {
	if x != nil {
		return x.Type
	}
	return CrackFileType_INVALID_TYPE
}

func (x *CrackFile) GetIsCompressed() bool {
	if x != nil {
		return x.IsCompressed
	}
	return false
}

func (x *CrackFile) GetMaxFileSize() int64 {
	if x != nil {
		return x.MaxFileSize
	}
	return 0
}

func (x *CrackFile) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *CrackFile) GetChunks() []*CrackFileChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type CrackFileChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CrackFileID   string                 `protobuf:"bytes,2,opt,name=CrackFileID,proto3" json:"CrackFileID,omitempty"`
	N             uint32                 `protobuf:"varint,3,opt,name=N,proto3" json:"N,omitempty"`
	Data          []byte                 `protobuf:"bytes,9,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrackFileChunk) Reset() {
	*x = CrackFileChunk{}
	mi := &file_clientpb_client_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrackFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrackFileChunk) ProtoMessage() {}

func (x *CrackFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrackFileChunk.ProtoReflect.Descriptor instead.
func (*CrackFileChunk) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{120}
}

func (x *CrackFileChunk) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CrackFileChunk) GetCrackFileID() string {
	if x != nil {
		return x.CrackFileID
	}
	return ""
}

func (x *CrackFileChunk) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *CrackFileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// watchtower
type MonitoringProviders struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Providers     []*MonitoringProvider  `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitoringProviders) Reset() {
	*x = MonitoringProviders{}
	mi := &file_clientpb_client_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoringProviders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringProviders) ProtoMessage() {}

func (x *MonitoringProviders) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringProviders.ProtoReflect.Descriptor instead.
func (*MonitoringProviders) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{121}
}

func (x *MonitoringProviders) GetProviders() []*MonitoringProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

type MonitoringProvider struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	APIKey        string                 `protobuf:"bytes,3,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	APIPassword   string                 `protobuf:"bytes,4,opt,name=APIPassword,proto3" json:"APIPassword,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitoringProvider) Reset() {
	*x = MonitoringProvider{}
	mi := &file_clientpb_client_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoringProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringProvider) ProtoMessage() {}

func (x *MonitoringProvider) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringProvider.ProtoReflect.Descriptor instead.
func (*MonitoringProvider) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{122}
}

func (x *MonitoringProvider) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MonitoringProvider) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MonitoringProvider) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

func (x *MonitoringProvider) GetAPIPassword() string {
	if x != nil {
		return x.APIPassword
	}
	return ""
}

// resource IDs
type ResourceID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Value         uint64                 `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceID) Reset() {
	*x = ResourceID{}
	mi := &file_clientpb_client_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceID) ProtoMessage() {}

func (x *ResourceID) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceID.ProtoReflect.Descriptor instead.
func (*ResourceID) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{123}
}

func (x *ResourceID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ResourceID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceID) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CertificatesReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CategoryFilters uint32                 `protobuf:"varint,1,opt,name=CategoryFilters,proto3" json:"CategoryFilters,omitempty"`
	CN              string                 `protobuf:"bytes,2,opt,name=CN,proto3" json:"CN,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CertificatesReq) Reset() {
	*x = CertificatesReq{}
	mi := &file_clientpb_client_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificatesReq) ProtoMessage() {}

func (x *CertificatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificatesReq.ProtoReflect.Descriptor instead.
func (*CertificatesReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{124}
}

func (x *CertificatesReq) GetCategoryFilters() uint32 {
	if x != nil {
		return x.CategoryFilters
	}
	return 0
}

func (x *CertificatesReq) GetCN() string {
	if x != nil {
		return x.CN
	}
	return ""
}

type CertificateData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CN             string                 `protobuf:"bytes,1,opt,name=CN,proto3" json:"CN,omitempty"`
	CreationTime   string                 `protobuf:"bytes,2,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
	ValidityStart  string                 `protobuf:"bytes,3,opt,name=ValidityStart,proto3" json:"ValidityStart,omitempty"`
	ValidityExpiry string                 `protobuf:"bytes,4,opt,name=ValidityExpiry,proto3" json:"ValidityExpiry,omitempty"`
	Type           string                 `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	KeyAlgorithm   string                 `protobuf:"bytes,6,opt,name=KeyAlgorithm,proto3" json:"KeyAlgorithm,omitempty"`
	ID             string                 `protobuf:"bytes,7,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CertificateData) Reset() {
	*x = CertificateData{}
	mi := &file_clientpb_client_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateData) ProtoMessage() {}

func (x *CertificateData) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateData.ProtoReflect.Descriptor instead.
func (*CertificateData) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{125}
}

func (x *CertificateData) GetCN() string {
	if x != nil {
		return x.CN
	}
	return ""
}

func (x *CertificateData) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *CertificateData) GetValidityStart() string {
	if x != nil {
		return x.ValidityStart
	}
	return ""
}

func (x *CertificateData) GetValidityExpiry() string {
	if x != nil {
		return x.ValidityExpiry
	}
	return ""
}

func (x *CertificateData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CertificateData) GetKeyAlgorithm() string {
	if x != nil {
		return x.KeyAlgorithm
	}
	return ""
}

func (x *CertificateData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type CertificateInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          []*CertificateData     `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateInfo) Reset() {
	*x = CertificateInfo{}
	mi := &file_clientpb_client_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInfo) ProtoMessage() {}

func (x *CertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInfo.ProtoReflect.Descriptor instead.
func (*CertificateInfo) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{126}
}

func (x *CertificateInfo) GetInfo() []*CertificateData {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_clientpb_client_proto protoreflect.FileDescriptor

const file_clientpb_client_proto_rawDesc = "" +
	"\n" +
	"\x15clientpb/client.proto\x12\bclientpb\x1a\x15commonpb/common.proto\"\xbd\x01\n" +
	"\aVersion\x12\x14\n" +
	"\x05Major\x18\x01 \x01(\x05R\x05Major\x12\x14\n" +
	"\x05Minor\x18\x02 \x01(\x05R\x05Minor\x12\x14\n" +
	"\x05Patch\x18\x03 \x01(\x05R\x05Patch\x12\x16\n" +
	"\x06Commit\x18\x04 \x01(\tR\x06Commit\x12\x14\n" +
	"\x05Dirty\x18\x05 \x01(\bR\x05Dirty\x12\x1e\n" +
	"\n" +
	"CompiledAt\x18\x06 \x01(\x03R\n" +
	"CompiledAt\x12\x0e\n" +
	"\x02OS\x18\a \x01(\tR\x02OS\x12\x12\n" +
	"\x04Arch\x18\b \x01(\tR\x04Arch\";\n" +
	"\rClientLogData\x12\x16\n" +
	"\x06Stream\x18\x01 \x01(\tR\x06Stream\x12\x12\n" +
	"\x04Data\x18\x02 \x01(\fR\x04Data\"\xb1\x05\n" +
	"\aSession\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12\x1a\n" +
	"\bHostname\x18\x03 \x01(\tR\bHostname\x12\x12\n" +
	"\x04UUID\x18\x04 \x01(\tR\x04UUID\x12\x1a\n" +
	"\bUsername\x18\x05 \x01(\tR\bUsername\x12\x10\n" +
	"\x03UID\x18\x06 \x01(\tR\x03UID\x12\x10\n" +
	"\x03GID\x18\a \x01(\tR\x03GID\x12\x0e\n" +
	"\x02OS\x18\b \x01(\tR\x02OS\x12\x12\n" +
	"\x04Arch\x18\t \x01(\tR\x04Arch\x12\x1c\n" +
	"\tTransport\x18\n" +
	" \x01(\tR\tTransport\x12$\n" +
	"\rRemoteAddress\x18\v \x01(\tR\rRemoteAddress\x12\x10\n" +
	"\x03PID\x18\f \x01(\x05R\x03PID\x12\x1a\n" +
	"\bFilename\x18\r \x01(\tR\bFilename\x12 \n" +
	"\vLastCheckin\x18\x0e \x01(\x03R\vLastCheckin\x12\x1a\n" +
	"\bActiveC2\x18\x0f \x01(\tR\bActiveC2\x12\x18\n" +
	"\aVersion\x18\x10 \x01(\tR\aVersion\x12\x18\n" +
	"\aEvasion\x18\x11 \x01(\bR\aEvasion\x12\x16\n" +
	"\x06IsDead\x18\x12 \x01(\bR\x06IsDead\x12,\n" +
	"\x11ReconnectInterval\x18\x13 \x01(\x03R\x11ReconnectInterval\x12\x1a\n" +
	"\bProxyURL\x18\x14 \x01(\tR\bProxyURL\x12\x16\n" +
	"\x06Burned\x18\x16 \x01(\bR\x06Burned\x12\x1e\n" +
	"\n" +
	"Extensions\x18\x17 \x03(\tR\n" +
	"Extensions\x12\x16\n" +
	"\x06PeerID\x18\x19 \x01(\x03R\x06PeerID\x12\x16\n" +
	"\x06Locale\x18\x1a \x01(\tR\x06Locale\x12\"\n" +
	"\fFirstContact\x18\x1b \x01(\x03R\fFirstContact\x12\x1c\n" +
	"\tIntegrity\x18\x1c \x01(\tR\tIntegrity\"\xa0\x06\n" +
	"\x06Beacon\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12\x1a\n" +
	"\bHostname\x18\x03 \x01(\tR\bHostname\x12\x12\n" +
	"\x04UUID\x18\x04 \x01(\tR\x04UUID\x12\x1a\n" +
	"\bUsername\x18\x05 \x01(\tR\bUsername\x12\x10\n" +
	"\x03UID\x18\x06 \x01(\tR\x03UID\x12\x10\n" +
	"\x03GID\x18\a \x01(\tR\x03GID\x12\x0e\n" +
	"\x02OS\x18\b \x01(\tR\x02OS\x12\x12\n" +
	"\x04Arch\x18\t \x01(\tR\x04Arch\x12\x1c\n" +
	"\tTransport\x18\n" +
	" \x01(\tR\tTransport\x12$\n" +
	"\rRemoteAddress\x18\v \x01(\tR\rRemoteAddress\x12\x10\n" +
	"\x03PID\x18\f \x01(\x05R\x03PID\x12\x1a\n" +
	"\bFilename\x18\r \x01(\tR\bFilename\x12 \n" +
	"\vLastCheckin\x18\x0e \x01(\x03R\vLastCheckin\x12\x1a\n" +
	"\bActiveC2\x18\x0f \x01(\tR\bActiveC2\x12\x18\n" +
	"\aVersion\x18\x10 \x01(\tR\aVersion\x12\x18\n" +
	"\aEvasion\x18\x11 \x01(\bR\aEvasion\x12\x16\n" +
	"\x06IsDead\x18\x12 \x01(\bR\x06IsDead\x12\x1a\n" +
	"\bProxyURL\x18\x14 \x01(\tR\bProxyURL\x12,\n" +
	"\x11ReconnectInterval\x18\x15 \x01(\x03R\x11ReconnectInterval\x12\x1a\n" +
	"\bInterval\x18\x16 \x01(\x03R\bInterval\x12\x16\n" +
	"\x06Jitter\x18\x17 \x01(\x03R\x06Jitter\x12\x16\n" +
	"\x06Burned\x18\x18 \x01(\bR\x06Burned\x12 \n" +
	"\vNextCheckin\x18\x19 \x01(\x03R\vNextCheckin\x12\x1e\n" +
	"\n" +
	"TasksCount\x18\x1a \x01(\x03R\n" +
	"TasksCount\x120\n" +
	"\x13TasksCountCompleted\x18\x1b \x01(\x03R\x13TasksCountCompleted\x12\x16\n" +
	"\x06Locale\x18\x1c \x01(\tR\x06Locale\x12\"\n" +
	"\fFirstContact\x18\x1d \x01(\x03R\fFirstContact\x12\x1c\n" +
	"\tIntegrity\x18\x1e \x01(\tR\tIntegrity\"5\n" +
	"\aBeacons\x12*\n" +
	"\aBeacons\x18\x02 \x03(\v2\x10.clientpb.BeaconR\aBeacons\"\xfe\x01\n" +
	"\n" +
	"BeaconTask\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x1a\n" +
	"\bBeaconID\x18\x02 \x01(\tR\bBeaconID\x12\x1c\n" +
	"\tCreatedAt\x18\x03 \x01(\x03R\tCreatedAt\x12\x14\n" +
	"\x05State\x18\x04 \x01(\tR\x05State\x12\x16\n" +
	"\x06SentAt\x18\x05 \x01(\x03R\x06SentAt\x12 \n" +
	"\vCompletedAt\x18\x06 \x01(\x03R\vCompletedAt\x12\x18\n" +
	"\aRequest\x18\a \x01(\fR\aRequest\x12\x1a\n" +
	"\bResponse\x18\b \x01(\fR\bResponse\x12 \n" +
	"\vDescription\x18\t \x01(\tR\vDescription\"U\n" +
	"\vBeaconTasks\x12\x1a\n" +
	"\bBeaconID\x18\x01 \x01(\tR\bBeaconID\x12*\n" +
	"\x05Tasks\x18\x02 \x03(\v2\x14.clientpb.BeaconTaskR\x05Tasks\"K\n" +
	"\x0fBeaconIntegrity\x12\x1a\n" +
	"\bBeaconID\x18\x01 \x01(\tR\bBeaconID\x12\x1c\n" +
	"\tIntegrity\x18\x02 \x01(\tR\tIntegrity\"c\n" +
	"\tImplantC2\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x1a\n" +
	"\bPriority\x18\x02 \x01(\rR\bPriority\x12\x10\n" +
	"\x03URL\x18\x03 \x01(\tR\x03URL\x12\x18\n" +
	"\aOptions\x18\x04 \x01(\tR\aOptions\"\xe5\x0f\n" +
	"\rImplantConfig\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12<\n" +
	"\rImplantBuilds\x18\x02 \x03(\v2\x16.clientpb.ImplantBuildR\rImplantBuilds\x12*\n" +
	"\x10ImplantProfileID\x18\x03 \x01(\tR\x10ImplantProfileID\x12\x1a\n" +
	"\bIsBeacon\x18\x04 \x01(\bR\bIsBeacon\x12&\n" +
	"\x0eBeaconInterval\x18\x05 \x01(\x03R\x0eBeaconInterval\x12\"\n" +
	"\fBeaconJitter\x18\x06 \x01(\x03R\fBeaconJitter\x12\x12\n" +
	"\x04GOOS\x18\a \x01(\tR\x04GOOS\x12\x16\n" +
	"\x06GOARCH\x18\b \x01(\tR\x06GOARCH\x12\x14\n" +
	"\x05Debug\x18\n" +
	" \x01(\bR\x05Debug\x12\x18\n" +
	"\aEvasion\x18\v \x01(\bR\aEvasion\x12*\n" +
	"\x10ObfuscateSymbols\x18\f \x01(\bR\x10ObfuscateSymbols\x12\"\n" +
	"\fTemplateName\x18\r \x01(\tR\fTemplateName\x12\x1e\n" +
	"\n" +
	"SGNEnabled\x18\x0e \x01(\bR\n" +
	"SGNEnabled\x12 \n" +
	"\vIncludeMTLS\x185 \x01(\bR\vIncludeMTLS\x12 \n" +
	"\vIncludeHTTP\x18\x10 \x01(\bR\vIncludeHTTP\x12\x1c\n" +
	"\tIncludeWG\x18\x11 \x01(\bR\tIncludeWG\x12\x1e\n" +
	"\n" +
	"IncludeDNS\x18\x12 \x01(\bR\n" +
	"IncludeDNS\x12(\n" +
	"\x0fIncludeNamePipe\x18\x13 \x01(\bR\x0fIncludeNamePipe\x12\x1e\n" +
	"\n" +
	"IncludeTCP\x18\x14 \x01(\bR\n" +
	"IncludeTCP\x12 \n" +
	"\vWGPeerTunIP\x18  \x01(\tR\vWGPeerTunIP\x12,\n" +
	"\x11WGKeyExchangePort\x18! \x01(\rR\x11WGKeyExchangePort\x12&\n" +
	"\x0eWGTcpCommsPort\x18\" \x01(\rR\x0eWGTcpCommsPort\x12,\n" +
	"\x11ReconnectInterval\x18( \x01(\x03R\x11ReconnectInterval\x120\n" +
	"\x13MaxConnectionErrors\x18) \x01(\rR\x13MaxConnectionErrors\x12 \n" +
	"\vPollTimeout\x18* \x01(\x03R\vPollTimeout\x12#\n" +
	"\x02C2\x182 \x03(\v2\x13.clientpb.ImplantC2R\x02C2\x12$\n" +
	"\rCanaryDomains\x183 \x03(\tR\rCanaryDomains\x12.\n" +
	"\x12ConnectionStrategy\x184 \x01(\tR\x12ConnectionStrategy\x12,\n" +
	"\x11LimitDomainJoined\x18< \x01(\bR\x11LimitDomainJoined\x12$\n" +
	"\rLimitDatetime\x18= \x01(\tR\rLimitDatetime\x12$\n" +
	"\rLimitHostname\x18> \x01(\tR\rLimitHostname\x12$\n" +
	"\rLimitUsername\x18? \x01(\tR\rLimitUsername\x12(\n" +
	"\x0fLimitFileExists\x18@ \x01(\tR\x0fLimitFileExists\x12 \n" +
	"\vLimitLocale\x18A \x01(\tR\vLimitLocale\x12.\n" +
	"\x06Format\x18d \x01(\x0e2\x16.clientpb.OutputFormatR\x06Format\x12 \n" +
	"\vIsSharedLib\x18e \x01(\bR\vIsSharedLib\x12\x1c\n" +
	"\tIsService\x18g \x01(\bR\tIsService\x12 \n" +
	"\vIsShellcode\x18h \x01(\bR\vIsShellcode\x12\x1c\n" +
	"\tRunAtLoad\x18i \x01(\bR\tRunAtLoad\x12\x1c\n" +
	"\tDebugFile\x18j \x01(\tR\tDebugFile\x12\x18\n" +
	"\aexports\x18k \x03(\tR\aexports\x12+\n" +
	"\x10HTTPC2ConfigName\x18\x96\x01 \x01(\tR\x10HTTPC2ConfigName\x12#\n" +
	"\fNetGoEnabled\x18\x97\x01 \x01(\bR\fNetGoEnabled\x127\n" +
	"\x16TrafficEncodersEnabled\x18\x98\x01 \x01(\bR\x16TrafficEncodersEnabled\x12)\n" +
	"\x0fTrafficEncoders\x18\x99\x01 \x03(\tR\x0fTrafficEncoders\x12\x1d\n" +
	"\tExtension\x18\x9a\x01 \x01(\tR\tExtension\x12'\n" +
	"\x06Assets\x18\xc8\x01 \x03(\v2\x0e.commonpb.FileR\x06Assets\x123\n" +
	"\x14EnableBuildDiversity\x18\xac\x02 \x01(\bR\x14EnableBuildDiversity\x12I\n" +
	"\x0fDiversityConfig\x18\xad\x02 \x01(\v2\x1e.clientpb.BuildDiversityConfigR\x0fDiversityConfig\x129\n" +
	"\x17EnableTLSFingerprinting\x18\xb6\x02 \x01(\bR\x17EnableTLSFingerprinting\x12'\n" +
	"\x0eTLSFingerprint\x18\xb7\x02 \x01(\tR\x0eTLSFingerprint\x12/\n" +
	"\x12MalleableC2Profile\x18\xb8\x02 \x01(\tR\x12MalleableC2Profile\"\xa4\x04\n" +
	"\x14BuildDiversityConfig\x12,\n" +
	"\x11RandomizeEncoders\x18\x01 \x01(\bR\x11RandomizeEncoders\x126\n" +
	"\x16RandomizeGarbleOptions\x18\x02 \x01(\bR\x16RandomizeGarbleOptions\x120\n" +
	"\x13RandomizeSGNOptions\x18\x03 \x01(\bR\x13RandomizeSGNOptions\x120\n" +
	"\x13EnableEvasionChecks\x18\x04 \x01(\bR\x13EnableEvasionChecks\x124\n" +
	"\x15EvasionTechniqueCount\x18\x05 \x01(\x05R\x15EvasionTechniqueCount\x12*\n" +
	"\x10ReproducibleSeed\x18\x06 \x01(\tR\x10ReproducibleSeed\x12(\n" +
	"\x0fCustomBuildTags\x18\n" +
	" \x03(\tR\x0fCustomBuildTags\x124\n" +
	"\x15EnableNovelTechniques\x18\v \x01(\bR\x15EnableNovelTechniques\x12*\n" +
	"\x10MinSGNIterations\x18\f \x01(\x05R\x10MinSGNIterations\x12*\n" +
	"\x10MaxSGNIterations\x18\r \x01(\x05R\x10MaxSGNIterations\x12(\n" +
	"\x0fMinNoveltyScore\x18\x0e \x01(\x01R\x0fMinNoveltyScore\"z\n" +
	"\x0eTrafficEncoder\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\x04R\x02ID\x12\"\n" +
	"\x04Wasm\x18\x02 \x01(\v2\x0e.commonpb.FileR\x04Wasm\x12\x1c\n" +
	"\tSkipTests\x18\b \x01(\bR\tSkipTests\x12\x16\n" +
	"\x06TestID\x18\t \x01(\tR\x06TestID\"\xb1\x01\n" +
	"\x11TrafficEncoderMap\x12E\n" +
	"\bEncoders\x18\x01 \x03(\v2).clientpb.TrafficEncoderMap.EncodersEntryR\bEncoders\x1aU\n" +
	"\rEncodersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.clientpb.TrafficEncoderR\x05value:\x028\x01\"\xa6\x01\n" +
	"\x12TrafficEncoderTest\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x1c\n" +
	"\tCompleted\x18\x02 \x01(\bR\tCompleted\x12\x18\n" +
	"\aSuccess\x18\x03 \x01(\bR\aSuccess\x12\x1a\n" +
	"\bDuration\x18\x04 \x01(\x03R\bDuration\x12\x10\n" +
	"\x03Err\x18\t \x01(\tR\x03Err\x12\x16\n" +
	"\x06Sample\x18\n" +
	" \x01(\fR\x06Sample\"\xc3\x01\n" +
	"\x13TrafficEncoderTests\x122\n" +
	"\aEncoder\x18\x01 \x01(\v2\x18.clientpb.TrafficEncoderR\aEncoder\x122\n" +
	"\x05Tests\x18\x02 \x03(\v2\x1c.clientpb.TrafficEncoderTestR\x05Tests\x12$\n" +
	"\rTotalDuration\x18\x03 \x01(\x03R\rTotalDuration\x12\x1e\n" +
	"\n" +
	"TotalTests\x18\x04 \x01(\x05R\n" +
	"TotalTests\"\xae\x02\n" +
	"\x15ExternalImplantConfig\x12/\n" +
	"\x06Config\x18\x01 \x01(\v2\x17.clientpb.ImplantConfigR\x06Config\x12,\n" +
	"\x05Build\x18\x02 \x01(\v2\x16.clientpb.ImplantBuildR\x05Build\x12.\n" +
	"\x06HTTPC2\x18\x03 \x01(\v2\x16.clientpb.HTTPC2ConfigR\x06HTTPC2\x12I\n" +
	"\bencoders\x18\x04 \x03(\v2-.clientpb.ExternalImplantConfig.EncodersEntryR\bencoders\x1a;\n" +
	"\rEncodersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"w\n" +
	"\x15ExternalImplantBinary\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12&\n" +
	"\x0eImplantBuildID\x18\x02 \x01(\tR\x0eImplantBuildID\x12\"\n" +
	"\x04File\x18\x03 \x01(\v2\x0e.commonpb.FileR\x04File\"\xbe\x03\n" +
	"\rImplantBuilds\x12>\n" +
	"\aConfigs\x18\x01 \x03(\v2$.clientpb.ImplantBuilds.ConfigsEntryR\aConfigs\x12J\n" +
	"\vResourceIDs\x18\x02 \x03(\v2(.clientpb.ImplantBuilds.ResourceIDsEntryR\vResourceIDs\x12;\n" +
	"\x06staged\x18\x03 \x03(\v2#.clientpb.ImplantBuilds.StagedEntryR\x06staged\x1aS\n" +
	"\fConfigsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.clientpb.ImplantConfigR\x05value:\x028\x01\x1aT\n" +
	"\x10ResourceIDsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.clientpb.ResourceIDR\x05value:\x028\x01\x1a9\n" +
	"\vStagedEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"'\n" +
	"\x0fImplantStageReq\x12\x14\n" +
	"\x05Build\x18\x01 \x03(\tR\x05Build\"\xb2\a\n" +
	"\fImplantBuild\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12\x10\n" +
	"\x03MD5\x18\x03 \x01(\tR\x03MD5\x12\x12\n" +
	"\x04SHA1\x18\x04 \x01(\tR\x04SHA1\x12\x16\n" +
	"\x06SHA256\x18\x05 \x01(\tR\x06SHA256\x12\x16\n" +
	"\x06Burned\x18\x06 \x01(\bR\x06Burned\x12\x1c\n" +
	"\tImplantID\x18\a \x01(\x04R\tImplantID\x12(\n" +
	"\x0fImplantConfigID\x18\b \x01(\tR\x0fImplantConfigID\x12.\n" +
	"\x12AgeServerPublicKey\x18\t \x01(\tR\x12AgeServerPublicKey\x12$\n" +
	"\rPeerPublicKey\x18\n" +
	" \x01(\tR\rPeerPublicKey\x12&\n" +
	"\x0ePeerPrivateKey\x18\v \x01(\tR\x0ePeerPrivateKey\x126\n" +
	"\x16PeerPublicKeySignature\x18\f \x01(\tR\x16PeerPublicKeySignature\x128\n" +
	"\x17MinisignServerPublicKey\x18\r \x01(\tR\x17MinisignServerPublicKey\x120\n" +
	"\x13PeerPublicKeyDigest\x18\x0e \x01(\tR\x13PeerPublicKeyDigest\x12*\n" +
	"\x10WGImplantPrivKey\x18\x0f \x01(\tR\x10WGImplantPrivKey\x12&\n" +
	"\x0eWGServerPubKey\x18\x10 \x01(\tR\x0eWGServerPubKey\x12\x1e\n" +
	"\n" +
	"MtlsCACert\x18\x11 \x01(\tR\n" +
	"MtlsCACert\x12\x1a\n" +
	"\bMtlsCert\x18\x12 \x01(\tR\bMtlsCert\x12\x18\n" +
	"\aMtlsKey\x18\x13 \x01(\tR\aMtlsKey\x12\x14\n" +
	"\x05Stage\x18\x14 \x01(\bR\x05Stage\x12*\n" +
	"\x10DiversityEnabled\x18d \x01(\bR\x10DiversityEnabled\x12\"\n" +
	"\fEncodersUsed\x18e \x03(\tR\fEncodersUsed\x12:\n" +
	"\x18EvasionTechniquesApplied\x18f \x03(\tR\x18EvasionTechniquesApplied\x12,\n" +
	"\x11SGNIterationsUsed\x18g \x01(\x05R\x11SGNIterationsUsed\x12$\n" +
	"\rDiversitySeed\x18h \x01(\tR\rDiversitySeed\x12\x1e\n" +
	"\n" +
	"GarbleSeed\x18i \x01(\tR\n" +
	"GarbleSeed\"l\n" +
	"\x0eCompilerTarget\x12\x12\n" +
	"\x04GOOS\x18\x01 \x01(\tR\x04GOOS\x12\x16\n" +
	"\x06GOARCH\x18\x02 \x01(\tR\x06GOARCH\x12.\n" +
	"\x06Format\x18\x03 \x01(\x0e2\x16.clientpb.OutputFormatR\x06Format\"\x85\x01\n" +
	"\rCrossCompiler\x12\x1e\n" +
	"\n" +
	"TargetGOOS\x18\x01 \x01(\tR\n" +
	"TargetGOOS\x12\"\n" +
	"\fTargetGOARCH\x18\x02 \x01(\tR\fTargetGOARCH\x12\x16\n" +
	"\x06CCPath\x18\x03 \x01(\tR\x06CCPath\x12\x18\n" +
	"\aCXXPath\x18\x04 \x01(\tR\aCXXPath\"\xf5\x01\n" +
	"\bCompiler\x12\x12\n" +
	"\x04GOOS\x18\x01 \x01(\tR\x04GOOS\x12\x16\n" +
	"\x06GOARCH\x18\x02 \x01(\tR\x06GOARCH\x122\n" +
	"\aTargets\x18\x03 \x03(\v2\x18.clientpb.CompilerTargetR\aTargets\x12?\n" +
	"\x0eCrossCompilers\x18\x04 \x03(\v2\x17.clientpb.CrossCompilerR\x0eCrossCompilers\x12H\n" +
	"\x12UnsupportedTargets\x18\x05 \x03(\v2\x18.clientpb.CompilerTargetR\x12UnsupportedTargets\"\x1f\n" +
	"\tDeleteReq\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\"\xd7\x01\n" +
	"\tDNSCanary\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12 \n" +
	"\vImplantName\x18\x02 \x01(\tR\vImplantName\x12\x16\n" +
	"\x06Domain\x18\x03 \x01(\tR\x06Domain\x12\x1c\n" +
	"\tTriggered\x18\x04 \x01(\bR\tTriggered\x12&\n" +
	"\x0eFirstTriggered\x18\x05 \x01(\tR\x0eFirstTriggered\x12$\n" +
	"\rLatestTrigger\x18\x06 \x01(\tR\rLatestTrigger\x12\x14\n" +
	"\x05Count\x18\a \x01(\rR\x05Count\";\n" +
	"\bCanaries\x12/\n" +
	"\bCanaries\x18\x01 \x03(\v2\x13.clientpb.DNSCanaryR\bCanaries\"\x1c\n" +
	"\n" +
	"UniqueWGIP\x12\x0e\n" +
	"\x02IP\x18\x01 \x01(\tR\x02IP\"e\n" +
	"\x0eImplantProfile\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12/\n" +
	"\x06Config\x18\x03 \x01(\v2\x17.clientpb.ImplantConfigR\x06Config\"G\n" +
	"\x0fImplantProfiles\x124\n" +
	"\bProfiles\x18\x01 \x03(\v2\x18.clientpb.ImplantProfileR\bProfiles\"1\n" +
	"\rRegenerateReq\x12 \n" +
	"\vImplantName\x18\x01 \x01(\tR\vImplantName\"\xb7\x01\n" +
	"\x03Job\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\rR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12 \n" +
	"\vDescription\x18\x03 \x01(\tR\vDescription\x12\x1a\n" +
	"\bProtocol\x18\x04 \x01(\tR\bProtocol\x12\x12\n" +
	"\x04Port\x18\x05 \x01(\rR\x04Port\x12\x18\n" +
	"\aDomains\x18\x06 \x03(\tR\aDomains\x12 \n" +
	"\vProfileName\x18\a \x01(\tR\vProfileName\"-\n" +
	"\x04Jobs\x12%\n" +
	"\x06Active\x18\x01 \x03(\v2\r.clientpb.JobR\x06Active\"\x1c\n" +
	"\n" +
	"KillJobReq\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\rR\x02ID\"'\n" +
	"\rRestartJobReq\x12\x16\n" +
	"\x06JobIDs\x18\x01 \x03(\rR\x06JobIDs\"3\n" +
	"\aKillJob\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\rR\x02ID\x12\x18\n" +
	"\aSuccess\x18\x02 \x01(\bR\aSuccess\"\x91\x03\n" +
	"\vListenerJob\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Type\x18\x02 \x01(\tR\x04Type\x12\x14\n" +
	"\x05JobID\x18\x03 \x01(\rR\x05JobID\x125\n" +
	"\bMTLSConf\x18\x04 \x01(\v2\x19.clientpb.MTLSListenerReqR\bMTLSConf\x12/\n" +
	"\x06WGConf\x18\x05 \x01(\v2\x17.clientpb.WGListenerReqR\x06WGConf\x122\n" +
	"\aDNSConf\x18\x06 \x01(\v2\x18.clientpb.DNSListenerReqR\aDNSConf\x125\n" +
	"\bHTTPConf\x18\a \x01(\v2\x19.clientpb.HTTPListenerReqR\bHTTPConf\x12>\n" +
	"\tMultiConf\x18\b \x01(\v2 .clientpb.MultiplayerListenerReqR\tMultiConf\x125\n" +
	"\aTCPConf\x18\t \x01(\v2\x1b.clientpb.StagerListenerReqR\aTCPConf\"@\n" +
	"\x16MultiplayerListenerReq\x12\x12\n" +
	"\x04Host\x18\x01 \x01(\tR\x04Host\x12\x12\n" +
	"\x04Port\x18\x02 \x01(\rR\x04Port\"9\n" +
	"\x0fMTLSListenerReq\x12\x12\n" +
	"\x04Host\x18\x01 \x01(\tR\x04Host\x12\x12\n" +
	"\x04Port\x18\x02 \x01(\rR\x04Port\"}\n" +
	"\rWGListenerReq\x12\x12\n" +
	"\x04Host\x18\x06 \x01(\tR\x04Host\x12\x12\n" +
	"\x04Port\x18\x01 \x01(\rR\x04Port\x12\x14\n" +
	"\x05TunIP\x18\x02 \x01(\tR\x05TunIP\x12\x14\n" +
	"\x05NPort\x18\x03 \x01(\rR\x05NPort\x12\x18\n" +
	"\aKeyPort\x18\x04 \x01(\rR\aKeyPort\"\x8e\x01\n" +
	"\x0eDNSListenerReq\x12\x18\n" +
	"\aDomains\x18\x01 \x03(\tR\aDomains\x12\x1a\n" +
	"\bCanaries\x18\x02 \x01(\bR\bCanaries\x12\x12\n" +
	"\x04Host\x18\x03 \x01(\tR\x04Host\x12\x12\n" +
	"\x04Port\x18\x04 \x01(\rR\x04Port\x12\x1e\n" +
	"\n" +
	"EnforceOTP\x18\x06 \x01(\bR\n" +
	"EnforceOTP\"\xd5\x02\n" +
	"\x0fHTTPListenerReq\x12\x16\n" +
	"\x06Domain\x18\x01 \x01(\tR\x06Domain\x12\x12\n" +
	"\x04Host\x18\x02 \x01(\tR\x04Host\x12\x12\n" +
	"\x04Port\x18\x03 \x01(\rR\x04Port\x12\x16\n" +
	"\x06Secure\x18\x04 \x01(\bR\x06Secure\x12\x18\n" +
	"\aWebsite\x18\x05 \x01(\tR\aWebsite\x12\x12\n" +
	"\x04Cert\x18\x06 \x01(\fR\x04Cert\x12\x10\n" +
	"\x03Key\x18\a \x01(\fR\x03Key\x12\x12\n" +
	"\x04ACME\x18\b \x01(\bR\x04ACME\x12\x1e\n" +
	"\n" +
	"EnforceOTP\x18\n" +
	" \x01(\bR\n" +
	"EnforceOTP\x12(\n" +
	"\x0fLongPollTimeout\x18\v \x01(\x03R\x0fLongPollTimeout\x12&\n" +
	"\x0eLongPollJitter\x18\f \x01(\x03R\x0eLongPollJitter\x12$\n" +
	"\rRandomizeJARM\x18\r \x01(\bR\rRandomizeJARM\"X\n" +
	"\rNamedPipesReq\x12\x1a\n" +
	"\bPipeName\x18\x10 \x01(\tR\bPipeName\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\"h\n" +
	"\n" +
	"NamedPipes\x12\x18\n" +
	"\aSuccess\x18\x01 \x01(\bR\aSuccess\x12\x10\n" +
	"\x03Err\x18\x02 \x01(\tR\x03Err\x12.\n" +
	"\bResponse\x18\t \x01(\v2\x12.commonpb.ResponseR\bResponse\"T\n" +
	"\vTCPPivotReq\x12\x18\n" +
	"\aAddress\x18\x10 \x01(\tR\aAddress\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\"f\n" +
	"\bTCPPivot\x12\x18\n" +
	"\aSuccess\x18\x01 \x01(\bR\aSuccess\x12\x10\n" +
	"\x03Err\x18\x02 \x01(\tR\x03Err\x12.\n" +
	"\bResponse\x18\t \x01(\v2\x12.commonpb.ResponseR\bResponse\"9\n" +
	"\bSessions\x12-\n" +
	"\bSessions\x18\x01 \x03(\v2\x11.clientpb.SessionR\bSessions\"Y\n" +
	"\tRenameReq\x12\x1c\n" +
	"\tSessionID\x18\x01 \x01(\tR\tSessionID\x12\x1a\n" +
	"\bBeaconID\x18\x02 \x01(\tR\bBeaconID\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\"R\n" +
	"\vGenerateReq\x12/\n" +
	"\x06Config\x18\x01 \x01(\v2\x17.clientpb.ImplantConfigR\x06Config\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\"\x8c\x02\n" +
	"\x10GenerateStageReq\x12\x18\n" +
	"\aProfile\x18\x01 \x01(\tR\aProfile\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12$\n" +
	"\rAESEncryptKey\x18\x03 \x01(\tR\rAESEncryptKey\x12\"\n" +
	"\fAESEncryptIv\x18\x04 \x01(\tR\fAESEncryptIv\x12$\n" +
	"\rRC4EncryptKey\x18\x05 \x01(\tR\rRC4EncryptKey\x12 \n" +
	"\vPrependSize\x18\x06 \x01(\bR\vPrependSize\x12\x1c\n" +
	"\tCompressF\x18\a \x01(\tR\tCompressF\x12\x1a\n" +
	"\bCompress\x18\b \x01(\tR\bCompress\".\n" +
	"\bGenerate\x12\"\n" +
	"\x04File\x18\x01 \x01(\v2\x0e.commonpb.FileR\x04File\"\xb5\x01\n" +
	"\x06MSFReq\x12\x18\n" +
	"\aPayload\x18\x01 \x01(\tR\aPayload\x12\x14\n" +
	"\x05LHost\x18\x02 \x01(\tR\x05LHost\x12\x14\n" +
	"\x05LPort\x18\x03 \x01(\rR\x05LPort\x12\x18\n" +
	"\aEncoder\x18\x04 \x01(\tR\aEncoder\x12\x1e\n" +
	"\n" +
	"Iterations\x18\x05 \x01(\x05R\n" +
	"Iterations\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\"\xcd\x01\n" +
	"\fMSFRemoteReq\x12\x18\n" +
	"\aPayload\x18\x01 \x01(\tR\aPayload\x12\x14\n" +
	"\x05LHost\x18\x02 \x01(\tR\x05LHost\x12\x14\n" +
	"\x05LPort\x18\x03 \x01(\rR\x05LPort\x12\x18\n" +
	"\aEncoder\x18\x04 \x01(\tR\aEncoder\x12\x1e\n" +
	"\n" +
	"Iterations\x18\x05 \x01(\x05R\n" +
	"Iterations\x12\x10\n" +
	"\x03PID\x18\b \x01(\rR\x03PID\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\"\xa6\x01\n" +
	"\x11StagerListenerReq\x123\n" +
	"\bProtocol\x18\x01 \x01(\x0e2\x17.clientpb.StageProtocolR\bProtocol\x12\x12\n" +
	"\x04Host\x18\x02 \x01(\tR\x04Host\x12\x12\n" +
	"\x04Port\x18\x03 \x01(\rR\x04Port\x12\x12\n" +
	"\x04Data\x18\x04 \x01(\fR\x04Data\x12 \n" +
	"\vProfileName\x18\x05 \x01(\tR\vProfileName\"&\n" +
	"\x0eStagerListener\x12\x14\n" +
	"\x05JobID\x18\x01 \x01(\rR\x05JobID\"g\n" +
	"\x0fShellcodeRDIReq\x12\x12\n" +
	"\x04Data\x18\x01 \x01(\fR\x04Data\x12\"\n" +
	"\fFunctionName\x18\x02 \x01(\tR\fFunctionName\x12\x1c\n" +
	"\tArguments\x18\x03 \x01(\tR\tArguments\"\"\n" +
	"\fShellcodeRDI\x12\x12\n" +
	"\x04Data\x18\x01 \x01(\fR\x04Data\"\xa8\x01\n" +
	"\fGetSystemReq\x12&\n" +
	"\x0eHostingProcess\x18\x01 \x01(\tR\x0eHostingProcess\x12/\n" +
	"\x06Config\x18\x02 \x01(\v2\x17.clientpb.ImplantConfigR\x06Config\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\"\xe2\x01\n" +
	"\n" +
	"MigrateReq\x12\x10\n" +
	"\x03Pid\x18\x01 \x01(\rR\x03Pid\x12/\n" +
	"\x06Config\x18\x02 \x01(\v2\x17.clientpb.ImplantConfigR\x06Config\x124\n" +
	"\aEncoder\x18\x03 \x01(\x0e2\x1a.clientpb.ShellcodeEncoderR\aEncoder\x12\x12\n" +
	"\x04Name\x18\x04 \x01(\tR\x04Name\x12\x1a\n" +
	"\bProcName\x18\x05 \x01(\tR\bProcName\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\">\n" +
	"\x0fCreateTunnelReq\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\"L\n" +
	"\fCreateTunnel\x12\x1c\n" +
	"\tSessionID\x18\x01 \x01(\rR\tSessionID\x12\x1e\n" +
	"\bTunnelID\x18\b \x01(\x04B\x020\x01R\bTunnelID\"]\n" +
	"\x0eCloseTunnelReq\x12\x1e\n" +
	"\bTunnelID\x18\b \x01(\x04B\x020\x01R\bTunnelID\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\"\xa1\x01\n" +
	"\x0fPivotGraphEntry\x12\x16\n" +
	"\x06PeerID\x18\x01 \x01(\x03R\x06PeerID\x12+\n" +
	"\aSession\x18\x02 \x01(\v2\x11.clientpb.SessionR\aSession\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x125\n" +
	"\bChildren\x18\x04 \x03(\v2\x19.clientpb.PivotGraphEntryR\bChildren\"C\n" +
	"\n" +
	"PivotGraph\x125\n" +
	"\bChildren\x18\x01 \x03(\v2\x19.clientpb.PivotGraphEntryR\bChildren\"\\\n" +
	"\x06Client\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\rR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12.\n" +
	"\bOperator\x18\x03 \x01(\v2\x12.clientpb.OperatorR\bOperator\"\xc3\x01\n" +
	"\x05Event\x12\x1c\n" +
	"\tEventType\x18\x01 \x01(\tR\tEventType\x12+\n" +
	"\aSession\x18\x02 \x01(\v2\x11.clientpb.SessionR\aSession\x12\x1f\n" +
	"\x03Job\x18\x03 \x01(\v2\r.clientpb.JobR\x03Job\x12(\n" +
	"\x06Client\x18\x04 \x01(\v2\x10.clientpb.ClientR\x06Client\x12\x12\n" +
	"\x04Data\x18\x05 \x01(\fR\x04Data\x12\x10\n" +
	"\x03Err\x18\x06 \x01(\tR\x03Err\"=\n" +
	"\tOperators\x120\n" +
	"\tOperators\x18\x01 \x03(\v2\x12.clientpb.OperatorR\tOperators\"6\n" +
	"\bOperator\x12\x16\n" +
	"\x06Online\x18\x01 \x01(\bR\x06Online\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\"\xa2\x01\n" +
	"\n" +
	"WebContent\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x1c\n" +
	"\tWebsiteID\x18\x02 \x01(\tR\tWebsiteID\x12\x12\n" +
	"\x04Path\x18\x03 \x01(\tR\x04Path\x12 \n" +
	"\vContentType\x18\x04 \x01(\tR\vContentType\x12\x16\n" +
	"\x04Size\x18\x05 \x01(\x04B\x020\x01R\x04Size\x12\x18\n" +
	"\aContent\x18\t \x01(\fR\aContent\"\xc1\x01\n" +
	"\x11WebsiteAddContent\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12E\n" +
	"\bContents\x18\x02 \x03(\v2).clientpb.WebsiteAddContent.ContentsEntryR\bContents\x1aQ\n" +
	"\rContentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.clientpb.WebContentR\x05value:\x028\x01\"@\n" +
	"\x14WebsiteRemoveContent\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x14\n" +
	"\x05Paths\x18\x02 \x03(\tR\x05Paths\"\xbd\x01\n" +
	"\aWebsite\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12;\n" +
	"\bContents\x18\x03 \x03(\v2\x1f.clientpb.Website.ContentsEntryR\bContents\x1aQ\n" +
	"\rContentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.clientpb.WebContentR\x05value:\x028\x01\"9\n" +
	"\bWebsites\x12-\n" +
	"\bWebsites\x18\x01 \x03(\v2\x11.clientpb.WebsiteR\bWebsites\"\xa0\x01\n" +
	"\x0eWGClientConfig\x12\"\n" +
	"\fServerPubKey\x18\x01 \x01(\tR\fServerPubKey\x12*\n" +
	"\x10ClientPrivateKey\x18\x02 \x01(\tR\x10ClientPrivateKey\x12\"\n" +
	"\fClientPubKey\x18\x03 \x01(\tR\fClientPubKey\x12\x1a\n" +
	"\bClientIP\x18\x04 \x01(\tR\bClientIP\"\xba\x01\n" +
	"\x04Loot\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12.\n" +
	"\bFileType\x18\x03 \x01(\x0e2\x12.clientpb.FileTypeR\bFileType\x12&\n" +
	"\x0eOriginHostUUID\x18\x04 \x01(\tR\x0eOriginHostUUID\x12\x12\n" +
	"\x04Size\x18\x05 \x01(\x03R\x04Size\x12\"\n" +
	"\x04File\x18\t \x01(\v2\x0e.commonpb.FileR\x04File\"-\n" +
	"\aAllLoot\x12\"\n" +
	"\x04Loot\x18\x01 \x03(\v2\x0e.clientpb.LootR\x04Loot\"E\n" +
	"\x03IOC\x12\x12\n" +
	"\x04Path\x18\x01 \x01(\tR\x04Path\x12\x1a\n" +
	"\bFileHash\x18\x02 \x01(\tR\bFileHash\x12\x0e\n" +
	"\x02ID\x18\x03 \x01(\tR\x02ID\"'\n" +
	"\rExtensionData\x12\x16\n" +
	"\x06Output\x18\x01 \x01(\tR\x06Output\"\xef\x02\n" +
	"\x04Host\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x1a\n" +
	"\bHostname\x18\x02 \x01(\tR\bHostname\x12\x1a\n" +
	"\bHostUUID\x18\x03 \x01(\tR\bHostUUID\x12\x1c\n" +
	"\tOSVersion\x18\x04 \x01(\tR\tOSVersion\x12!\n" +
	"\x04IOCs\x18\x05 \x03(\v2\r.clientpb.IOCR\x04IOCs\x12G\n" +
	"\rExtensionData\x18\x06 \x03(\v2!.clientpb.Host.ExtensionDataEntryR\rExtensionData\x12\x16\n" +
	"\x06Locale\x18\a \x01(\tR\x06Locale\x12\"\n" +
	"\fFirstContact\x18\b \x01(\x03R\fFirstContact\x1aY\n" +
	"\x12ExtensionDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.clientpb.ExtensionDataR\x05value:\x028\x01\"0\n" +
	"\bAllHosts\x12$\n" +
	"\x05Hosts\x18\x01 \x03(\v2\x0e.clientpb.HostR\x05Hosts\"\xa5\x01\n" +
	"\vHostScanReq\x12\x18\n" +
	"\aTargets\x18\x01 \x03(\tR\aTargets\x12\x14\n" +
	"\x05Ports\x18\x02 \x01(\tR\x05Ports\x12*\n" +
	"\x10ServiceDetection\x18\x03 \x01(\bR\x10ServiceDetection\x12 \n" +
	"\vOSDetection\x18\x04 \x01(\bR\vOSDetection\x12\x18\n" +
	"\aTimeout\x18\x05 \x01(\x05R\aTimeout\"\xb3\x01\n" +
	"\vHostService\x12\x12\n" +
	"\x04Port\x18\x01 \x01(\x05R\x04Port\x12\x1a\n" +
	"\bProtocol\x18\x02 \x01(\tR\bProtocol\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x12\x18\n" +
	"\aProduct\x18\x04 \x01(\tR\aProduct\x12\x18\n" +
	"\aVersion\x18\x05 \x01(\tR\aVersion\x12\x16\n" +
	"\x06Banner\x18\x06 \x01(\tR\x06Banner\x12\x14\n" +
	"\x05State\x18\a \x01(\tR\x05State\"\xcd\x01\n" +
	"\x0eHostScanResult\x12\x1a\n" +
	"\bHostUUID\x18\x01 \x01(\tR\bHostUUID\x12\x1c\n" +
	"\tIPAddress\x18\x02 \x01(\tR\tIPAddress\x12\x1a\n" +
	"\bHostname\x18\x03 \x01(\tR\bHostname\x12\x1c\n" +
	"\tOSVersion\x18\x04 \x01(\tR\tOSVersion\x121\n" +
	"\bServices\x18\x05 \x03(\v2\x15.clientpb.HostServiceR\bServices\x12\x14\n" +
	"\x05IsNew\x18\x06 \x01(\bR\x05IsNew\"\xa5\x01\n" +
	"\x0fHostScanResults\x122\n" +
	"\aResults\x18\x01 \x03(\v2\x18.clientpb.HostScanResultR\aResults\x12\x1e\n" +
	"\n" +
	"TotalHosts\x18\x02 \x01(\x05R\n" +
	"TotalHosts\x12\x1a\n" +
	"\bNewHosts\x18\x03 \x01(\x05R\bNewHosts\x12\"\n" +
	"\fScanDuration\x18\x04 \x01(\tR\fScanDuration\"P\n" +
	"\bReconReq\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\tR\x04Type\x12\x16\n" +
	"\x06Target\x18\x02 \x01(\tR\x06Target\x12\x18\n" +
	"\aTimeout\x18\x03 \x01(\x05R\aTimeout\"\xa3\x01\n" +
	"\vReconResult\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\tR\x04Type\x12\x16\n" +
	"\x06Target\x18\x02 \x01(\tR\x06Target\x12\x16\n" +
	"\x06LootID\x18\x03 \x01(\tR\x06LootID\x12\x1e\n" +
	"\n" +
	"ItemsFound\x18\x04 \x01(\x05R\n" +
	"ItemsFound\x12\x1a\n" +
	"\bDuration\x18\x05 \x01(\tR\bDuration\x12\x14\n" +
	"\x05Tools\x18\x06 \x03(\tR\x05Tools\"\x87\x02\n" +
	"\fDllHijackReq\x12*\n" +
	"\x10ReferenceDLLPath\x18\x01 \x01(\tR\x10ReferenceDLLPath\x12&\n" +
	"\x0eTargetLocation\x18\x02 \x01(\tR\x0eTargetLocation\x12\"\n" +
	"\fReferenceDLL\x18\x03 \x01(\fR\fReferenceDLL\x12\x1c\n" +
	"\tTargetDLL\x18\x04 \x01(\fR\tTargetDLL\x12 \n" +
	"\vProfileName\x18\x05 \x01(\tR\vProfileName\x12\x12\n" +
	"\x04Name\x18\x06 \x01(\tR\x04Name\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\";\n" +
	"\tDllHijack\x12.\n" +
	"\bResponse\x18\t \x01(\v2\x12.commonpb.ResponseR\bResponse\"\x8c\x01\n" +
	"\vBackdoorReq\x12\x1a\n" +
	"\bFilePath\x18\x01 \x01(\tR\bFilePath\x12 \n" +
	"\vProfileName\x18\x02 \x01(\tR\vProfileName\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\":\n" +
	"\bBackdoor\x12.\n" +
	"\bResponse\x18\t \x01(\v2\x12.commonpb.ResponseR\bResponse\"\xeb\x01\n" +
	"\x12ShellcodeEncodeReq\x124\n" +
	"\aEncoder\x18\x01 \x01(\x0e2\x1a.clientpb.ShellcodeEncoderR\aEncoder\x12\"\n" +
	"\fArchitecture\x18\x02 \x01(\tR\fArchitecture\x12\x1e\n" +
	"\n" +
	"Iterations\x18\x03 \x01(\rR\n" +
	"Iterations\x12\x1a\n" +
	"\bBadChars\x18\x04 \x01(\fR\bBadChars\x12\x12\n" +
	"\x04Data\x18\b \x01(\fR\x04Data\x12+\n" +
	"\aRequest\x18\t \x01(\v2\x11.commonpb.RequestR\aRequest\"U\n" +
	"\x0fShellcodeEncode\x12\x12\n" +
	"\x04Data\x18\b \x01(\fR\x04Data\x12.\n" +
	"\bResponse\x18\t \x01(\v2\x12.commonpb.ResponseR\bResponse\"\xb7\x01\n" +
	"\x13ShellcodeEncoderMap\x12G\n" +
	"\bEncoders\x18\x01 \x03(\v2+.clientpb.ShellcodeEncoderMap.EncodersEntryR\bEncoders\x1aW\n" +
	"\rEncodersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1a.clientpb.ShellcodeEncoderR\x05value:\x028\x01\"|\n" +
	"\x13ExternalGenerateReq\x12/\n" +
	"\x06Config\x18\x01 \x01(\v2\x17.clientpb.ImplantConfigR\x06Config\x12 \n" +
	"\vBuilderName\x18\x02 \x01(\tR\vBuilderName\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\"9\n" +
	"\bBuilders\x12-\n" +
	"\bBuilders\x18\x01 \x03(\v2\x11.clientpb.BuilderR\bBuilders\"\x80\x02\n" +
	"\aBuilder\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\"\n" +
	"\fOperatorName\x18\x02 \x01(\tR\fOperatorName\x12\x12\n" +
	"\x04GOOS\x18\x03 \x01(\tR\x04GOOS\x12\x16\n" +
	"\x06GOARCH\x18\x04 \x01(\tR\x06GOARCH\x12\x1c\n" +
	"\tTemplates\x18\x05 \x03(\tR\tTemplates\x122\n" +
	"\aTargets\x18\x06 \x03(\v2\x18.clientpb.CompilerTargetR\aTargets\x12?\n" +
	"\x0eCrossCompilers\x18\a \x03(\v2\x17.clientpb.CrossCompilerR\x0eCrossCompilers\"A\n" +
	"\rHTTPC2Configs\x120\n" +
	"\aconfigs\x18\x01 \x03(\v2\x16.clientpb.HTTPC2ConfigR\aconfigs\"\"\n" +
	"\fC2ProfileReq\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\"c\n" +
	"\x0fHTTPC2ConfigReq\x12\x1c\n" +
	"\toverwrite\x18\x01 \x01(\bR\toverwrite\x122\n" +
	"\bC2Config\x18\x02 \x01(\v2\x16.clientpb.HTTPC2ConfigR\bC2Config\"\xd3\x01\n" +
	"\fHTTPC2Config\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x18\n" +
	"\aCreated\x18\x02 \x01(\x03R\aCreated\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x12@\n" +
	"\fServerConfig\x18\x04 \x01(\v2\x1c.clientpb.HTTPC2ServerConfigR\fServerConfig\x12C\n" +
	"\rImplantConfig\x18\x05 \x01(\v2\x1d.clientpb.HTTPC2ImplantConfigR\rImplantConfig\"\xbc\x01\n" +
	"\x12HTTPC2ServerConfig\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x122\n" +
	"\x14RandomVersionHeaders\x18\x02 \x01(\bR\x14RandomVersionHeaders\x120\n" +
	"\aHeaders\x18\x03 \x03(\v2\x16.clientpb.HTTPC2HeaderR\aHeaders\x120\n" +
	"\aCookies\x18\x04 \x03(\v2\x16.clientpb.HTTPC2CookieR\aCookies\"\xbc\x05\n" +
	"\x13HTTPC2ImplantConfig\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x1c\n" +
	"\tUserAgent\x18\x02 \x01(\tR\tUserAgent\x12,\n" +
	"\x11ChromeBaseVersion\x18\x03 \x01(\x05R\x11ChromeBaseVersion\x12\"\n" +
	"\fMacOSVersion\x18\x04 \x01(\tR\fMacOSVersion\x12.\n" +
	"\x12NonceQueryArgChars\x18\x05 \x01(\tR\x12NonceQueryArgChars\x12L\n" +
	"\x12ExtraURLParameters\x18\x06 \x03(\v2\x1c.clientpb.HTTPC2URLParameterR\x12ExtraURLParameters\x120\n" +
	"\aHeaders\x18\a \x03(\v2\x16.clientpb.HTTPC2HeaderR\aHeaders\x12\x1e\n" +
	"\n" +
	"MaxFileGen\x18\b \x01(\x05R\n" +
	"MaxFileGen\x12\x1e\n" +
	"\n" +
	"MinFileGen\x18\t \x01(\x05R\n" +
	"MinFileGen\x12\x1e\n" +
	"\n" +
	"MaxPathGen\x18\n" +
	" \x01(\x05R\n" +
	"MaxPathGen\x12\x1e\n" +
	"\n" +
	"MinPathGen\x18\v \x01(\x05R\n" +
	"MinPathGen\x12$\n" +
	"\rMaxPathLength\x18\f \x01(\x05R\rMaxPathLength\x12$\n" +
	"\rMinPathLength\x18\r \x01(\x05R\rMinPathLength\x12\x1e\n" +
	"\n" +
	"extensions\x18\x0e \x03(\tR\n" +
	"extensions\x12?\n" +
	"\fPathSegments\x18\x11 \x03(\v2\x1b.clientpb.HTTPC2PathSegmentR\fPathSegments\x12*\n" +
	"\x10NonceQueryLength\x18\x12 \x01(\x05R\x10NonceQueryLength\x12\x1c\n" +
	"\tNonceMode\x18\x13 \x01(\tR\tNonceMode\"2\n" +
	"\fHTTPC2Cookie\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\"\x82\x01\n" +
	"\fHTTPC2Header\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x16\n" +
	"\x06Method\x18\x02 \x01(\tR\x06Method\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x12\x14\n" +
	"\x05Value\x18\x04 \x01(\tR\x05Value\x12 \n" +
	"\vProbability\x18\x05 \x01(\x05R\vProbability\"\x88\x01\n" +
	"\x12HTTPC2URLParameter\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x16\n" +
	"\x06Method\x18\x02 \x01(\tR\x06Method\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x12\x14\n" +
	"\x05Value\x18\x04 \x01(\tR\x05Value\x12 \n" +
	"\vProbability\x18\x05 \x01(\x05R\vProbability\"Q\n" +
	"\x11HTTPC2PathSegment\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x16\n" +
	"\x06IsFile\x18\x02 \x01(\bR\x06IsFile\x12\x14\n" +
	"\x05Value\x18\x03 \x01(\tR\x05Value\"\x80\x02\n" +
	"\n" +
	"Credential\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x1a\n" +
	"\bUsername\x18\x02 \x01(\tR\bUsername\x12\x1c\n" +
	"\tPlaintext\x18\x03 \x01(\tR\tPlaintext\x12\x12\n" +
	"\x04Hash\x18\x04 \x01(\tR\x04Hash\x12.\n" +
	"\bHashType\x18\x05 \x01(\x0e2\x12.clientpb.HashTypeR\bHashType\x12\x1c\n" +
	"\tIsCracked\x18\x06 \x01(\bR\tIsCracked\x12&\n" +
	"\x0eOriginHostUUID\x18\a \x01(\tR\x0eOriginHostUUID\x12\x1e\n" +
	"\n" +
	"Collection\x18\b \x01(\tR\n" +
	"Collection\"E\n" +
	"\vCredentials\x126\n" +
	"\vCredentials\x18\x01 \x03(\v2\x14.clientpb.CredentialR\vCredentials\"M\n" +
	"\rCrackstations\x12<\n" +
	"\rCrackstations\x18\x01 \x03(\v2\x16.clientpb.CrackstationR\rCrackstations\"\xed\x01\n" +
	"\x12CrackstationStatus\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x1a\n" +
	"\bHostUUID\x18\x02 \x01(\tR\bHostUUID\x12&\n" +
	"\x05State\x18\x03 \x01(\x0e2\x10.clientpb.StatesR\x05State\x12,\n" +
	"\x11CurrentCrackJobID\x18\x04 \x01(\tR\x11CurrentCrackJobID\x12\x1c\n" +
	"\tIsSyncing\x18\x05 \x01(\bR\tIsSyncing\x123\n" +
	"\aSyncing\x18\x06 \x01(\v2\x19.clientpb.CrackSyncStatusR\aSyncing\"\xa9\x01\n" +
	"\x0fCrackSyncStatus\x12\x14\n" +
	"\x05Speed\x18\x01 \x01(\x02R\x05Speed\x12C\n" +
	"\bProgress\x18\x02 \x03(\v2'.clientpb.CrackSyncStatus.ProgressEntryR\bProgress\x1a;\n" +
	"\rProgressEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\"\xc9\x01\n" +
	"\x0eCrackBenchmark\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x1a\n" +
	"\bHostUUID\x18\x02 \x01(\tR\bHostUUID\x12H\n" +
	"\n" +
	"Benchmarks\x18\x03 \x03(\v2(.clientpb.CrackBenchmark.BenchmarksEntryR\n" +
	"Benchmarks\x1a=\n" +
	"\x0fBenchmarksEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xd9\x01\n" +
	"\tCrackTask\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x1a\n" +
	"\bHostUUID\x18\x02 \x01(\tR\bHostUUID\x12\x1c\n" +
	"\tCreatedAt\x18\x03 \x01(\x03R\tCreatedAt\x12\x1c\n" +
	"\tStartedAt\x18\x04 \x01(\x03R\tStartedAt\x12 \n" +
	"\vCompletedAt\x18\x05 \x01(\x03R\vCompletedAt\x12\x10\n" +
	"\x03Err\x18\a \x01(\tR\x03Err\x120\n" +
	"\aCommand\x18\t \x01(\v2\x16.clientpb.CrackCommandR\aCommand\"\xfd\x03\n" +
	"\fCrackstation\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12\"\n" +
	"\fOperatorName\x18\x03 \x01(\tR\fOperatorName\x12\x12\n" +
	"\x04GOOS\x18\x04 \x01(\tR\x04GOOS\x12\x16\n" +
	"\x06GOARCH\x18\x05 \x01(\tR\x06GOARCH\x12&\n" +
	"\x0eHashcatVersion\x18\x06 \x01(\tR\x0eHashcatVersion\x12\x1a\n" +
	"\bHostUUID\x18\a \x01(\tR\bHostUUID\x12\x18\n" +
	"\aVersion\x18\b \x01(\tR\aVersion\x12F\n" +
	"\n" +
	"Benchmarks\x18\t \x03(\v2&.clientpb.Crackstation.BenchmarksEntryR\n" +
	"Benchmarks\x12-\n" +
	"\x04CUDA\x18d \x03(\v2\x19.clientpb.CUDABackendInfoR\x04CUDA\x120\n" +
	"\x05Metal\x18e \x03(\v2\x1a.clientpb.MetalBackendInfoR\x05Metal\x123\n" +
	"\x06OpenCL\x18f \x03(\v2\x1b.clientpb.OpenCLBackendInfoR\x06OpenCL\x1a=\n" +
	"\x0fBenchmarksEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xa1\x02\n" +
	"\x0fCUDABackendInfo\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\tR\x04Type\x12\x1a\n" +
	"\bVendorID\x18\x02 \x01(\x05R\bVendorID\x12\x16\n" +
	"\x06Vendor\x18\x03 \x01(\tR\x06Vendor\x12\x12\n" +
	"\x04Name\x18\x04 \x01(\tR\x04Name\x12\x18\n" +
	"\aVersion\x18\x05 \x01(\tR\aVersion\x12\x1e\n" +
	"\n" +
	"Processors\x18\x06 \x01(\x05R\n" +
	"Processors\x12\x14\n" +
	"\x05Clock\x18\a \x01(\x05R\x05Clock\x12 \n" +
	"\vMemoryTotal\x18\b \x01(\tR\vMemoryTotal\x12\x1e\n" +
	"\n" +
	"MemoryFree\x18\t \x01(\tR\n" +
	"MemoryFree\x12 \n" +
	"\vCUDAVersion\x18\n" +
	" \x01(\tR\vCUDAVersion\"\xd9\x02\n" +
	"\x11OpenCLBackendInfo\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\tR\x04Type\x12\x1a\n" +
	"\bVendorID\x18\x02 \x01(\x05R\bVendorID\x12\x16\n" +
	"\x06Vendor\x18\x03 \x01(\tR\x06Vendor\x12\x12\n" +
	"\x04Name\x18\x04 \x01(\tR\x04Name\x12\x18\n" +
	"\aVersion\x18\x05 \x01(\tR\aVersion\x12\x1e\n" +
	"\n" +
	"Processors\x18\x06 \x01(\x05R\n" +
	"Processors\x12\x14\n" +
	"\x05Clock\x18\a \x01(\x05R\x05Clock\x12 \n" +
	"\vMemoryTotal\x18\b \x01(\tR\vMemoryTotal\x12\x1e\n" +
	"\n" +
	"MemoryFree\x18\t \x01(\tR\n" +
	"MemoryFree\x12$\n" +
	"\rOpenCLVersion\x18\n" +
	" \x01(\tR\rOpenCLVersion\x120\n" +
	"\x13OpenCLDriverVersion\x18\v \x01(\tR\x13OpenCLDriverVersion\"\xa4\x02\n" +
	"\x10MetalBackendInfo\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\tR\x04Type\x12\x1a\n" +
	"\bVendorID\x18\x02 \x01(\x05R\bVendorID\x12\x16\n" +
	"\x06Vendor\x18\x03 \x01(\tR\x06Vendor\x12\x12\n" +
	"\x04Name\x18\x04 \x01(\tR\x04Name\x12\x18\n" +
	"\aVersion\x18\x05 \x01(\tR\aVersion\x12\x1e\n" +
	"\n" +
	"Processors\x18\x06 \x01(\x05R\n" +
	"Processors\x12\x14\n" +
	"\x05Clock\x18\a \x01(\x05R\x05Clock\x12 \n" +
	"\vMemoryTotal\x18\b \x01(\tR\vMemoryTotal\x12\x1e\n" +
	"\n" +
	"MemoryFree\x18\t \x01(\tR\n" +
	"MemoryFree\x12\"\n" +
	"\fMetalVersion\x18\n" +
	" \x01(\tR\fMetalVersion\"\xb9\x1e\n" +
	"\fCrackCommand\x129\n" +
	"\n" +
	"AttackMode\x18\x01 \x01(\x0e2\x19.clientpb.CrackAttackModeR\n" +
	"AttackMode\x12.\n" +
	"\bHashType\x18\x02 \x01(\x0e2\x12.clientpb.HashTypeR\bHashType\x12\x16\n" +
	"\x06Hashes\x18\x03 \x03(\tR\x06Hashes\x12\x14\n" +
	"\x05Quiet\x18\x04 \x01(\bR\x05Quiet\x12\x1e\n" +
	"\n" +
	"HexCharset\x18\x05 \x01(\bR\n" +
	"HexCharset\x12\x18\n" +
	"\aHexSalt\x18\x06 \x01(\bR\aHexSalt\x12 \n" +
	"\vHexWordlist\x18\a \x01(\bR\vHexWordlist\x12\x14\n" +
	"\x05Force\x18\b \x01(\bR\x05Force\x126\n" +
	"\x16DeprecatedCheckDisable\x18\t \x01(\bR\x16DeprecatedCheckDisable\x12\x16\n" +
	"\x06Status\x18\n" +
	" \x01(\bR\x06Status\x12\x1e\n" +
	"\n" +
	"StatusJSON\x18\v \x01(\bR\n" +
	"StatusJSON\x12 \n" +
	"\vStatusTimer\x18\f \x01(\rR\vStatusTimer\x12,\n" +
	"\x11StdinTimeoutAbort\x18\r \x01(\rR\x11StdinTimeoutAbort\x12(\n" +
	"\x0fMachineReadable\x18\x0e \x01(\bR\x0fMachineReadable\x12\"\n" +
	"\fKeepGuessing\x18\x0f \x01(\bR\fKeepGuessing\x12(\n" +
	"\x0fSelfTestDisable\x18\x10 \x01(\bR\x0fSelfTestDisable\x12\x1a\n" +
	"\bLoopback\x18\x11 \x01(\bR\bLoopback\x12$\n" +
	"\rMarkovHcstat2\x18\x12 \x01(\fR\rMarkovHcstat2\x12$\n" +
	"\rMarkovDisable\x18\x13 \x01(\bR\rMarkovDisable\x12$\n" +
	"\rMarkovClassic\x18\x14 \x01(\bR\rMarkovClassic\x12$\n" +
	"\rMarkovInverse\x18\x15 \x01(\bR\rMarkovInverse\x12(\n" +
	"\x0fMarkovThreshold\x18\x16 \x01(\rR\x0fMarkovThreshold\x12\x18\n" +
	"\aRuntime\x18\x17 \x01(\rR\aRuntime\x12\x18\n" +
	"\aSession\x18\x18 \x01(\tR\aSession\x12\x18\n" +
	"\aRestore\x18\x19 \x01(\bR\aRestore\x12&\n" +
	"\x0eRestoreDisable\x18\x1a \x01(\bR\x0eRestoreDisable\x12 \n" +
	"\vRestoreFile\x18\x1b \x01(\fR\vRestoreFile\x12B\n" +
	"\rOutfileFormat\x18\x1d \x03(\x0e2\x1c.clientpb.CrackOutfileFormatR\rOutfileFormat\x124\n" +
	"\x15OutfileAutohexDisable\x18\x1e \x01(\bR\x15OutfileAutohexDisable\x12,\n" +
	"\x11OutfileCheckTimer\x18\x1f \x01(\rR\x11OutfileCheckTimer\x126\n" +
	"\x16WordlistAutohexDisable\x18  \x01(\bR\x16WordlistAutohexDisable\x12\x1c\n" +
	"\tSeparator\x18! \x01(\tR\tSeparator\x12\x16\n" +
	"\x06Stdout\x18\" \x01(\bR\x06Stdout\x12\x12\n" +
	"\x04Show\x18# \x01(\bR\x04Show\x12\x12\n" +
	"\x04Left\x18$ \x01(\bR\x04Left\x12\x1a\n" +
	"\bUsername\x18% \x01(\bR\bUsername\x12\x16\n" +
	"\x06Remove\x18& \x01(\bR\x06Remove\x12 \n" +
	"\vRemoveTimer\x18' \x01(\rR\vRemoveTimer\x12&\n" +
	"\x0ePotfileDisable\x18( \x01(\bR\x0ePotfileDisable\x12\x18\n" +
	"\aPotfile\x18) \x01(\fR\aPotfile\x12;\n" +
	"\fEncodingFrom\x18* \x01(\x0e2\x17.clientpb.CrackEncodingR\fEncodingFrom\x127\n" +
	"\n" +
	"EncodingTo\x18+ \x01(\x0e2\x17.clientpb.CrackEncodingR\n" +
	"EncodingTo\x12\x1c\n" +
	"\tDebugMode\x18, \x01(\rR\tDebugMode\x12&\n" +
	"\x0eLogfileDisable\x180 \x01(\bR\x0eLogfileDisable\x12,\n" +
	"\x11HccapxMessagePair\x181 \x01(\rR\x11HccapxMessagePair\x124\n" +
	"\x15NonceErrorCorrections\x182 \x01(\rR\x15NonceErrorCorrections\x124\n" +
	"\x15KeyboardLayoutMapping\x183 \x01(\fR\x15KeyboardLayoutMapping\x12\x1c\n" +
	"\tBenchmark\x188 \x01(\bR\tBenchmark\x12\"\n" +
	"\fBenchmarkAll\x189 \x01(\bR\fBenchmarkAll\x12\x1c\n" +
	"\tSpeedOnly\x18: \x01(\bR\tSpeedOnly\x12\"\n" +
	"\fProgressOnly\x18; \x01(\bR\fProgressOnly\x12 \n" +
	"\vSegmentSize\x18< \x01(\rR\vSegmentSize\x12\x1c\n" +
	"\tBitmapMin\x18= \x01(\rR\tBitmapMin\x12\x1c\n" +
	"\tBitmapMax\x18> \x01(\rR\tBitmapMax\x12 \n" +
	"\vCPUAffinity\x18? \x03(\rR\vCPUAffinity\x12 \n" +
	"\vHookThreads\x18@ \x01(\rR\vHookThreads\x12\x1a\n" +
	"\bHashInfo\x18A \x01(\bR\bHashInfo\x12,\n" +
	"\x11BackendIgnoreCUDA\x18C \x01(\bR\x11BackendIgnoreCUDA\x12*\n" +
	"\x10BackendIgnoreHip\x18D \x01(\bR\x10BackendIgnoreHip\x12.\n" +
	"\x12BackendIgnoreMetal\x18E \x01(\bR\x12BackendIgnoreMetal\x120\n" +
	"\x13BackendIgnoreOpenCL\x18F \x01(\bR\x13BackendIgnoreOpenCL\x12 \n" +
	"\vBackendInfo\x18G \x01(\bR\vBackendInfo\x12&\n" +
	"\x0eBackendDevices\x18H \x03(\rR\x0eBackendDevices\x12,\n" +
	"\x11OpenCLDeviceTypes\x18I \x03(\rR\x11OpenCLDeviceTypes\x124\n" +
	"\x15OptimizedKernelEnable\x18J \x01(\bR\x15OptimizedKernelEnable\x124\n" +
	"\x15MultiplyAccelDisabled\x18K \x01(\bR\x15MultiplyAccelDisabled\x12H\n" +
	"\x0fWorkloadProfile\x18L \x01(\x0e2\x1e.clientpb.CrackWorkloadProfileR\x0fWorkloadProfile\x12 \n" +
	"\vKernelAccel\x18M \x01(\rR\vKernelAccel\x12 \n" +
	"\vKernelLoops\x18N \x01(\rR\vKernelLoops\x12$\n" +
	"\rKernelThreads\x18O \x01(\rR\rKernelThreads\x12.\n" +
	"\x12BackendVectorWidth\x18P \x01(\rR\x12BackendVectorWidth\x12\x1a\n" +
	"\bSpinDamp\x18Q \x01(\rR\bSpinDamp\x12\"\n" +
	"\fHwmonDisable\x18R \x01(\bR\fHwmonDisable\x12&\n" +
	"\x0eHwmonTempAbort\x18S \x01(\rR\x0eHwmonTempAbort\x12\x1e\n" +
	"\n" +
	"ScryptTMTO\x18T \x01(\rR\n" +
	"ScryptTMTO\x12\x12\n" +
	"\x04Skip\x18U \x01(\x04R\x04Skip\x12\x14\n" +
	"\x05Limit\x18V \x01(\x04R\x05Limit\x12\x1a\n" +
	"\bKeyspace\x18W \x01(\bR\bKeyspace\x12\x1c\n" +
	"\tRulesFile\x18Z \x01(\fR\tRulesFile\x12$\n" +
	"\rGenerateRules\x18[ \x01(\rR\rGenerateRules\x120\n" +
	"\x13GenerateRulesFunMin\x18\\ \x01(\rR\x13GenerateRulesFunMin\x120\n" +
	"\x13GenerateRulesFunMax\x18] \x01(\rR\x13GenerateRulesFunMax\x122\n" +
	"\x14GenerateRulesFuncSel\x18^ \x01(\tR\x14GenerateRulesFuncSel\x12,\n" +
	"\x11GenerateRulesSeed\x18_ \x01(\x05R\x11GenerateRulesSeed\x12&\n" +
	"\x0eCustomCharset1\x18` \x01(\tR\x0eCustomCharset1\x12&\n" +
	"\x0eCustomCharset2\x18a \x01(\tR\x0eCustomCharset2\x12&\n" +
	"\x0eCustomCharset3\x18b \x01(\tR\x0eCustomCharset3\x12&\n" +
	"\x0eCustomCharset4\x18c \x01(\tR\x0eCustomCharset4\x12\x1a\n" +
	"\bIdentify\x18d \x01(\tR\bIdentify\x12\x1c\n" +
	"\tIncrement\x18e \x01(\bR\tIncrement\x12\"\n" +
	"\fIncrementMin\x18f \x01(\rR\fIncrementMin\x12\"\n" +
	"\fIncrementMax\x18g \x01(\rR\fIncrementMax\x12&\n" +
	"\x0eSlowCandidates\x18h \x01(\bR\x0eSlowCandidates\x12 \n" +
	"\vBrainServer\x18i \x01(\bR\vBrainServer\x12*\n" +
	"\x10BrainServerTimer\x18j \x01(\rR\x10BrainServerTimer\x12 \n" +
	"\vBrainClient\x18k \x01(\bR\vBrainClient\x120\n" +
	"\x13BrainClientFeatures\x18l \x01(\tR\x13BrainClientFeatures\x12\x1c\n" +
	"\tBrainHost\x18m \x01(\tR\tBrainHost\x12\x1c\n" +
	"\tBrainPort\x18n \x01(\rR\tBrainPort\x12$\n" +
	"\rBrainPassword\x18o \x01(\tR\rBrainPassword\x12\"\n" +
	"\fBrainSession\x18p \x01(\tR\fBrainSession\x124\n" +
	"\x15BrainSessionWhitelist\x18q \x01(\tR\x15BrainSessionWhitelist\"\x8d\x01\n" +
	"\vCrackConfig\x12\x1a\n" +
	"\bAutoFire\x18\x01 \x01(\bR\bAutoFire\x12 \n" +
	"\vMaxFileSize\x18\x02 \x01(\x03R\vMaxFileSize\x12\x1c\n" +
	"\tChunkSize\x18\x03 \x01(\x03R\tChunkSize\x12\"\n" +
	"\fMaxDiskUsage\x18\x04 \x01(\x03R\fMaxDiskUsage\"\x87\x01\n" +
	"\n" +
	"CrackFiles\x12)\n" +
	"\x05Files\x18\x01 \x03(\v2\x13.clientpb.CrackFileR\x05Files\x12*\n" +
	"\x10CurrentDiskUsage\x18\x02 \x01(\x03R\x10CurrentDiskUsage\x12\"\n" +
	"\fMaxDiskUsage\x18\x03 \x01(\x03R\fMaxDiskUsage\"\xfb\x02\n" +
	"\tCrackFile\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x1c\n" +
	"\tCreatedAt\x18\x02 \x01(\x03R\tCreatedAt\x12\"\n" +
	"\fLastModified\x18\x03 \x01(\x03R\fLastModified\x12\x12\n" +
	"\x04Name\x18\x04 \x01(\tR\x04Name\x12*\n" +
	"\x10UncompressedSize\x18\x05 \x01(\x03R\x10UncompressedSize\x12\x19\n" +
	"\bSha2_256\x18\x06 \x01(\tR\aSha2256\x12+\n" +
	"\x04Type\x18\a \x01(\x0e2\x17.clientpb.CrackFileTypeR\x04Type\x12\"\n" +
	"\fIsCompressed\x18\b \x01(\bR\fIsCompressed\x12 \n" +
	"\vMaxFileSize\x18\t \x01(\x03R\vMaxFileSize\x12\x1c\n" +
	"\tChunkSize\x18\n" +
	" \x01(\x03R\tChunkSize\x120\n" +
	"\x06Chunks\x18d \x03(\v2\x18.clientpb.CrackFileChunkR\x06Chunks\"d\n" +
	"\x0eCrackFileChunk\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12 \n" +
	"\vCrackFileID\x18\x02 \x01(\tR\vCrackFileID\x12\f\n" +
	"\x01N\x18\x03 \x01(\rR\x01N\x12\x12\n" +
	"\x04Data\x18\t \x01(\fR\x04Data\"Q\n" +
	"\x13MonitoringProviders\x12:\n" +
	"\tproviders\x18\x01 \x03(\v2\x1c.clientpb.MonitoringProviderR\tproviders\"r\n" +
	"\x12MonitoringProvider\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Type\x18\x02 \x01(\tR\x04Type\x12\x16\n" +
	"\x06APIKey\x18\x03 \x01(\tR\x06APIKey\x12 \n" +
	"\vAPIPassword\x18\x04 \x01(\tR\vAPIPassword\"Z\n" +
	"\n" +
	"ResourceID\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x12\n" +
	"\x04Type\x18\x02 \x01(\tR\x04Type\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x12\x14\n" +
	"\x05Value\x18\x04 \x01(\x04R\x05Value\"K\n" +
	"\x0fCertificatesReq\x12(\n" +
	"\x0fCategoryFilters\x18\x01 \x01(\rR\x0fCategoryFilters\x12\x0e\n" +
	"\x02CN\x18\x02 \x01(\tR\x02CN\"\xdb\x01\n" +
	"\x0fCertificateData\x12\x0e\n" +
	"\x02CN\x18\x01 \x01(\tR\x02CN\x12\"\n" +
	"\fCreationTime\x18\x02 \x01(\tR\fCreationTime\x12$\n" +
	"\rValidityStart\x18\x03 \x01(\tR\rValidityStart\x12&\n" +
	"\x0eValidityExpiry\x18\x04 \x01(\tR\x0eValidityExpiry\x12\x12\n" +
	"\x04Type\x18\x05 \x01(\tR\x04Type\x12\"\n" +
	"\fKeyAlgorithm\x18\x06 \x01(\tR\fKeyAlgorithm\x12\x0e\n" +
	"\x02ID\x18\a \x01(\tR\x02ID\"@\n" +
	"\x0fCertificateInfo\x12-\n" +
	"\x04info\x18\x01 \x03(\v2\x19.clientpb.CertificateDataR\x04info*[\n" +
	"\fOutputFormat\x12\x0e\n" +
	"\n" +
	"SHARED_LIB\x10\x00\x12\r\n" +
	"\tSHELLCODE\x10\x01\x12\x0e\n" +
	"\n" +
	"EXECUTABLE\x10\x02\x12\v\n" +
	"\aSERVICE\x10\x03\x12\x0f\n" +
	"\vTHIRD_PARTY\x10\x04*-\n" +
	"\rStageProtocol\x12\a\n" +
	"\x03TCP\x10\x00\x12\b\n" +
	"\x04HTTP\x10\x01\x12\t\n" +
	"\x05HTTPS\x10\x02*-\n" +
	"\bFileType\x12\v\n" +
	"\aNO_FILE\x10\x00\x12\n" +
	"\n" +
	"\x06BINARY\x10\x01\x12\b\n" +
	"\x04TEXT\x10\x02*0\n" +
	"\x10ShellcodeEncoder\x12\b\n" +
	"\x04NONE\x10\x00\x12\x12\n" +
	"\x0eSHIKATA_GA_NAI\x10\x01*5\n" +
	"\x11HTTPC2SegmentType\x12\b\n" +
	"\x04POLL\x10\x00\x12\v\n" +
	"\aSESSION\x10\x01\x12\t\n" +
	"\x05CLOSE\x10\x02*\x98\x13\n" +
	"\bHashType\x12\a\n" +
	"\x03MD5\x10\x00\x12\b\n" +
	"\x03MD4\x10\x84\a\x12\b\n" +
	"\x04SHA1\x10d\x12\r\n" +
	"\bSHA2_224\x10\x94\n" +
	"\x12\r\n" +
	"\bSHA2_256\x10\xf8\n" +
	"\x12\r\n" +
	"\bSHA2_384\x10\xb0T\x12\r\n" +
	"\bSHA2_512\x10\xa4\r\x12\x0e\n" +
	"\bSHA3_224\x10\x94\x87\x01\x12\x0e\n" +
	"\bSHA3_256\x10\xf8\x87\x01\x12\x0e\n" +
	"\bSHA3_384\x10܈\x01\x12\x0e\n" +
	"\bSHA3_512\x10\xc0\x89\x01\x12\x0f\n" +
	"\n" +
	"RIPEMD_160\x10\xf0.\x12\x10\n" +
	"\vBLAKE2B_256\x10\xd8\x04\x12\x1a\n" +
	"\x15GOST_R_32_11_2012_256\x10\xb4[\x12\x1a\n" +
	"\x15GOST_R_32_11_2012_512\x10\x98\\\x12\x14\n" +
	"\x0fGOST_R_34_11_94\x10\xf45\x12\t\n" +
	"\x03GPG\x10\xf2\x84\x01\x12\r\n" +
	"\bHALF_MD5\x10\xec'\x12\x10\n" +
	"\n" +
	"KECCAK_224\x10\xa4\x8a\x01\x12\x10\n" +
	"\n" +
	"KECCAK_256\x10\x88\x8b\x01\x12\x10\n" +
	"\n" +
	"KECCAK_384\x10\xec\x8b\x01\x12\x10\n" +
	"\n" +
	"KECCAK_512\x10Ќ\x01\x12\x0e\n" +
	"\tWHIRLPOOL\x10\xd4/\x12\f\n" +
	"\aSIPHASH\x10\xf4N\x12\x0f\n" +
	"\vMD5_UTF16LE\x10F\x12\x11\n" +
	"\fSHA1_UTF16LE\x10\xaa\x01\x12\x13\n" +
	"\x0eSHA256_UTF16LE\x10\xbe\v\x12\x13\n" +
	"\x0eSHA384_UTF16LE\x10\xf6T\x12\x13\n" +
	"\x0eSHA512_UTF16LE\x10\xea\r\x12\x18\n" +
	"\x13BLAKE2B_512_PW_SALT\x10\xe2\x04\x12\x18\n" +
	"\x13BLAKE2B_512_SALT_PW\x10\xec\x04\x12\x0f\n" +
	"\vMD5_PW_SALT\x10\n" +
	"\x12\x0f\n" +
	"\vMD5_SALT_PW\x10\x14\x12\x15\n" +
	"\x10MD5_SALT_PW_SALT\x10\xd8\x1d\x12\x14\n" +
	"\x0fMD5_SALT_MD5_PW\x10\xfe\x1c\x12\n" +
	"\n" +
	"\x05CRC32\x10\xecY\x12\f\n" +
	"\x06CRC32C\x10\xfc\xd9\x01\x12\x10\n" +
	"\n" +
	"CRC64Jones\x10\xe0\xda\x01\x12\x11\n" +
	"\vJAVA_OBJECT\x10\x8c\x92\x01\x12\f\n" +
	"\x06MURMUR\x10\xe4\xc8\x01\x12\r\n" +
	"\aMURMUR3\x10\x98\xd9\x01\x12\x0e\n" +
	"\tTHREE_DES\x10\x94n\x12\b\n" +
	"\x03DES\x10\xb0m\x12\x11\n" +
	"\vAES_128_ECB\x10\xa1\xce\x01\x12\x11\n" +
	"\vAES_192_ECB\x10\xa2\xce\x01\x12\x11\n" +
	"\vAES_256_ECB\x10\xa3\xce\x01\x12\x0f\n" +
	"\n" +
	"CHA_CHA_20\x10\xa8x\x12\x1f\n" +
	"\x1aLINUX_KERNEL_CRYPTO_API_24\x10\xa4q\x12\f\n" +
	"\aSKIP_32\x10\xb4t\x12\x14\n" +
	"\x0fPBKDF2_HMAC_MD5\x10\xfc\\\x12\x15\n" +
	"\x10PBKDF2_HMAC_SHA1\x10\xe0]\x12\x17\n" +
	"\x12PBKDF2_HMAC_SHA256\x10\x94U\x12\x17\n" +
	"\x12PBKDF2_HMAC_SHA512\x10\xc4^\x12\v\n" +
	"\x06SCRYPT\x10\xc4E\x12\v\n" +
	"\x06PHPASS\x10\x90\x03\x12\x10\n" +
	"\vTACACS_PLUS\x10\xe4}\x12\x0f\n" +
	"\n" +
	"SIP_DIGEST\x10\x88Y\x12\f\n" +
	"\aIKE_MD5\x10\xb4)\x12\r\n" +
	"\bIKE_SHA1\x10\x98*\x12\x19\n" +
	"\x13SNMP_V3_HMAC_MD5_96\x10\x8c\xc4\x01\x12\"\n" +
	"\x1cSNMP_V3_HMAC_MD5_96__SHA1_96\x10\xa8\xc3\x01\x12\x1a\n" +
	"\x14SNMP_V3_HMAC_SHA1_96\x10\xf0\xc4\x01\x12\x1d\n" +
	"\x17SNMP_V3_HMAC_SHA224_128\x10\xcc\xd0\x01\x12\x1d\n" +
	"\x17SNMP_V3_HMAC_SHA256_192\x10\xb0\xd1\x01\x12\x1d\n" +
	"\x17SNMP_V3_HMAC_SHA384_256\x10\x94\xd2\x01\x12\x1d\n" +
	"\x17SNMP_V3_HMAC_SHA512_384\x10\xa4\xd5\x01\x12\x15\n" +
	"\x10WPA_EAPOL_PBKDF2\x10\xc4\x13\x12\x12\n" +
	"\rWPA_EAPOL_PMK\x10\xc5\x13\x12\x1c\n" +
	"\x16WPA_PBKDF2_PMKID_EAPOL\x10\xf0\xab\x01\x12\x19\n" +
	"\x13WPA_PMK_PMKID_EAPOL\x10\xf1\xab\x01\x12\x16\n" +
	"\x10WPA_PMKID_PBKDF2\x10\xa0\x83\x01\x12\x13\n" +
	"\rWPA_PMKID_PMK\x10\xa1\x83\x01\x12\x19\n" +
	"\x14IPMI2_PAKP_HMAC_SHA1\x10\x849\x12\r\n" +
	"\bCRAM_MD5\x10\xd8O\x12\t\n" +
	"\x03JWT\x10\xf4\x80\x01\x12\x0e\n" +
	"\bRADMIN_3\x10\x90\xe4\x01\x12\x19\n" +
	"\x13KERBEROS_17_TGS_REP\x10\x90\x99\x01\x12\x19\n" +
	"\x13KERBEROS_17_PREAUTH\x10ؚ\x01\x12\x14\n" +
	"\x0eKERBEROS_17_DB\x10\x80\xe1\x01\x12\x19\n" +
	"\x13KERBEROS_18_TGS_REP\x10\xf4\x99\x01\x12\x19\n" +
	"\x13KERBEROS_18_PREAUTH\x10\xbc\x9b\x01\x12\x14\n" +
	"\x0eKERBEROS_18_DB\x10\xe4\xe1\x01\x12\x1f\n" +
	"\x1aKERBEROS_23_SA_REQ_PREAUTH\x10\xcc:\x12\x18\n" +
	"\x13KERBEROS_23_TGS_REP\x10\xacf\x12\x18\n" +
	"\x12KERBEROS_23_AS_REP\x10\x98\x8e\x01\x12\x10\n" +
	"\vNET_NTLM_V1\x10\xfc*\x12\x14\n" +
	"\x0eNET_NTLM_V1_NT\x10\xf8\xd2\x01\x12\x10\n" +
	"\vNET_NTLM_V2\x10\xe0+\x12\x14\n" +
	"\x0eNET_NTLM_V2_NT\x10\xdc\xd3\x01\x12\v\n" +
	"\x05FLASK\x10\xac\xe3\x01\x12\x0f\n" +
	"\n" +
	"ISCSI_CHAP\x10\xc0%\x12\t\n" +
	"\x04RACF\x10\xb4B\x12\r\n" +
	"\bAIX_SMD5\x10\x9c1\x12\x0e\n" +
	"\tAIX_SSHA1\x10\xac4\x12\x10\n" +
	"\vAIX_SSHA256\x10\x802\x12\x10\n" +
	"\vAIX_SSHA512\x10\xe42\x12\a\n" +
	"\x02LM\x10\xb8\x17\x12\r\n" +
	"\aQNX_MD5\x10\xb8\x94\x01\x12\x10\n" +
	"\n" +
	"QNX_SHA256\x10\x9c\x95\x01\x12\x10\n" +
	"\n" +
	"QNX_SHA512\x10\x80\x96\x01\x12\x19\n" +
	"\x14DPAPI_V1_CTX_1_AND_2\x10\xc4w\x12\x13\n" +
	"\x0eDPAPI_V1_CTX_3\x10\xcew\x12\x19\n" +
	"\x14DPAPI_V2_CTX_1_AND_2\x10\x9c|\x12\x13\n" +
	"\x0eDPAPI_V2_CTX_3\x10\xa6|\x12\v\n" +
	"\x06GRUB_2\x10\xa08\x12\x12\n" +
	"\rMS_AZURE_SYNC\x10\x80d\x12\x0f\n" +
	"\n" +
	"BSDI_CRYPT\x10\xf0`\x12\t\n" +
	"\x04NTLM\x10\xe8\a\x12\f\n" +
	"\aRADMIN2\x10\xacM\x12\x14\n" +
	"\x0fSAMSUNG_ANDROID\x10\xa8-\x12\x17\n" +
	"\x11WINDOWS_HELLO_PIN\x10\xc4\xdb\x01\x12\x12\n" +
	"\rWINDOWS_PHONE\x10\xe8k\x12\x12\n" +
	"\rCISCO_ASA_MD5\x10\xea\x12\x12\x1c\n" +
	"\x17CISCO_IOS_PBKDF2_SHA256\x10\xf0G\x12\x15\n" +
	"\x10CISCO_IOS_SCRYPT\x10\xd4H\x12\x12\n" +
	"\rCISCO_PIX_MD5\x10\xe0\x12\x12\x1a\n" +
	"\x15CITRIX_NETSCALER_SHA1\x10\xa4?\x12\x1d\n" +
	"\x17CITRIX_NETSCALER_SHA512\x10\xb8\xad\x01\x12\b\n" +
	"\x03DCC\x10\xcc\b\x12\t\n" +
	"\x04DCC2\x10\xb4\x10\x12\x0f\n" +
	"\n" +
	"MACOS_10_8\x10\xbc7\x12\f\n" +
	"\aINVALID\x10\x8fN\x12\x10\n" +
	"\vBCRYPT_UNIX\x10\x80\x19\x12\x16\n" +
	"\x11SHA512_CRYPT_UNIX\x10\x88\x0e*2\n" +
	"\x06States\x12\b\n" +
	"\x04IDLE\x10\x00\x12\f\n" +
	"\bCRACKING\x10\x01\x12\x10\n" +
	"\fINITIALIZING\x10\x02*<\n" +
	"\x0eCrackJobStatus\x12\x0f\n" +
	"\vIN_PROGRESS\x10\x00\x12\r\n" +
	"\tCOMPLETED\x10\x01\x12\n" +
	"\n" +
	"\x06FAILED\x10\x02*\x94\x01\n" +
	"\x0fCrackAttackMode\x12\f\n" +
	"\bSTRAIGHT\x10\x00\x12\x0f\n" +
	"\vCOMBINATION\x10\x01\x12\x0e\n" +
	"\n" +
	"BRUTEFORCE\x10\x03\x12\x18\n" +
	"\x14HYBRID_WORDLIST_MASK\x10\x06\x12\x18\n" +
	"\x14HYBRID_MASK_WORDLIST\x10\a\x12\x0f\n" +
	"\vASSOCIATION\x10\t\x12\r\n" +
	"\tNO_ATTACK\x10\n" +
	"*D\n" +
	"\rCrackEncoding\x12\x14\n" +
	"\x10INVALID_ENCODING\x10\x00\x12\x0f\n" +
	"\vISO_8859_15\x10\x01\x12\f\n" +
	"\bUTF_32LE\x10\x02*\x90\x01\n" +
	"\x12CrackOutfileFormat\x12\x12\n" +
	"\x0eINVALID_FORMAT\x10\x00\x12\r\n" +
	"\tHASH_SALT\x10\x01\x12\t\n" +
	"\x05PLAIN\x10\x02\x12\r\n" +
	"\tHEX_PLAIN\x10\x03\x12\r\n" +
	"\tCRACK_POS\x10\x04\x12\x16\n" +
	"\x12TIMESTAMP_ABSOLUTE\x10\x05\x12\x16\n" +
	"\x12TIMESTAMP_RELATIVE\x10\x06*c\n" +
	"\x14CrackWorkloadProfile\x12\x1c\n" +
	"\x18INVALID_WORKLOAD_PROFILE\x10\x00\x12\a\n" +
	"\x03LOW\x10\x01\x12\v\n" +
	"\aDEFAULT\x10\x02\x12\b\n" +
	"\x04HIGH\x10\x03\x12\r\n" +
	"\tNIGHTMARE\x10\x04*N\n" +
	"\rCrackFileType\x12\x10\n" +
	"\fINVALID_TYPE\x10\x00\x12\f\n" +
	"\bWORDLIST\x10\x01\x12\t\n" +
	"\x05RULES\x10\x02\x12\x12\n" +
	"\x0eMARKOV_HCSTAT2\x10\x03B/Z-github.com/bishopfox/sliver/protobuf/clientpbb\x06proto3"

var (
	file_clientpb_client_proto_rawDescOnce sync.Once
	file_clientpb_client_proto_rawDescData []byte
)

func file_clientpb_client_proto_rawDescGZIP() []byte {
	file_clientpb_client_proto_rawDescOnce.Do(func() {
		file_clientpb_client_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_clientpb_client_proto_rawDesc), len(file_clientpb_client_proto_rawDesc)))
	})
	return file_clientpb_client_proto_rawDescData
}

var file_clientpb_client_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_clientpb_client_proto_msgTypes = make([]protoimpl.MessageInfo, 139)
var file_clientpb_client_proto_goTypes = []any{
	(OutputFormat)(0),              // 0: clientpb.OutputFormat
	(StageProtocol)(0),             // 1: clientpb.StageProtocol
	(FileType)(0),                  // 2: clientpb.FileType
	(ShellcodeEncoder)(0),          // 3: clientpb.ShellcodeEncoder
	(HTTPC2SegmentType)(0),         // 4: clientpb.HTTPC2SegmentType
	(HashType)(0),                  // 5: clientpb.HashType
	(States)(0),                    // 6: clientpb.States
	(CrackJobStatus)(0),            // 7: clientpb.CrackJobStatus
	(CrackAttackMode)(0),           // 8: clientpb.CrackAttackMode
	(CrackEncoding)(0),             // 9: clientpb.CrackEncoding
	(CrackOutfileFormat)(0),        // 10: clientpb.CrackOutfileFormat
	(CrackWorkloadProfile)(0),      // 11: clientpb.CrackWorkloadProfile
	(CrackFileType)(0),             // 12: clientpb.CrackFileType
	(*Version)(nil),                // 13: clientpb.Version
	(*ClientLogData)(nil),          // 14: clientpb.ClientLogData
	(*Session)(nil),                // 15: clientpb.Session
	(*Beacon)(nil),                 // 16: clientpb.Beacon
	(*Beacons)(nil),                // 17: clientpb.Beacons
	(*BeaconTask)(nil),             // 18: clientpb.BeaconTask
	(*BeaconTasks)(nil),            // 19: clientpb.BeaconTasks
	(*BeaconIntegrity)(nil),        // 20: clientpb.BeaconIntegrity
	(*ImplantC2)(nil),              // 21: clientpb.ImplantC2
	(*ImplantConfig)(nil),          // 22: clientpb.ImplantConfig
	(*BuildDiversityConfig)(nil),   // 23: clientpb.BuildDiversityConfig
	(*TrafficEncoder)(nil),         // 24: clientpb.TrafficEncoder
	(*TrafficEncoderMap)(nil),      // 25: clientpb.TrafficEncoderMap
	(*TrafficEncoderTest)(nil),     // 26: clientpb.TrafficEncoderTest
	(*TrafficEncoderTests)(nil),    // 27: clientpb.TrafficEncoderTests
	(*ExternalImplantConfig)(nil),  // 28: clientpb.ExternalImplantConfig
	(*ExternalImplantBinary)(nil),  // 29: clientpb.ExternalImplantBinary
	(*ImplantBuilds)(nil),          // 30: clientpb.ImplantBuilds
	(*ImplantStageReq)(nil),        // 31: clientpb.ImplantStageReq
	(*ImplantBuild)(nil),           // 32: clientpb.ImplantBuild
	(*CompilerTarget)(nil),         // 33: clientpb.CompilerTarget
	(*CrossCompiler)(nil),          // 34: clientpb.CrossCompiler
	(*Compiler)(nil),               // 35: clientpb.Compiler
	(*DeleteReq)(nil),              // 36: clientpb.DeleteReq
	(*DNSCanary)(nil),              // 37: clientpb.DNSCanary
	(*Canaries)(nil),               // 38: clientpb.Canaries
	(*UniqueWGIP)(nil),             // 39: clientpb.UniqueWGIP
	(*ImplantProfile)(nil),         // 40: clientpb.ImplantProfile
	(*ImplantProfiles)(nil),        // 41: clientpb.ImplantProfiles
	(*RegenerateReq)(nil),          // 42: clientpb.RegenerateReq
	(*Job)(nil),                    // 43: clientpb.Job
	(*Jobs)(nil),                   // 44: clientpb.Jobs
	(*KillJobReq)(nil),             // 45: clientpb.KillJobReq
	(*RestartJobReq)(nil),          // 46: clientpb.RestartJobReq
	(*KillJob)(nil),                // 47: clientpb.KillJob
	(*ListenerJob)(nil),            // 48: clientpb.ListenerJob
	(*MultiplayerListenerReq)(nil), // 49: clientpb.MultiplayerListenerReq
	(*MTLSListenerReq)(nil),        // 50: clientpb.MTLSListenerReq
	(*WGListenerReq)(nil),          // 51: clientpb.WGListenerReq
	(*DNSListenerReq)(nil),         // 52: clientpb.DNSListenerReq
	(*HTTPListenerReq)(nil),        // 53: clientpb.HTTPListenerReq
	(*NamedPipesReq)(nil),          // 54: clientpb.NamedPipesReq
	(*NamedPipes)(nil),             // 55: clientpb.NamedPipes
	(*TCPPivotReq)(nil),            // 56: clientpb.TCPPivotReq
	(*TCPPivot)(nil),               // 57: clientpb.TCPPivot
	(*Sessions)(nil),               // 58: clientpb.Sessions
	(*RenameReq)(nil),              // 59: clientpb.RenameReq
	(*GenerateReq)(nil),            // 60: clientpb.GenerateReq
	(*GenerateStageReq)(nil),       // 61: clientpb.GenerateStageReq
	(*Generate)(nil),               // 62: clientpb.Generate
	(*MSFReq)(nil),                 // 63: clientpb.MSFReq
	(*MSFRemoteReq)(nil),           // 64: clientpb.MSFRemoteReq
	(*StagerListenerReq)(nil),      // 65: clientpb.StagerListenerReq
	(*StagerListener)(nil),         // 66: clientpb.StagerListener
	(*ShellcodeRDIReq)(nil),        // 67: clientpb.ShellcodeRDIReq
	(*ShellcodeRDI)(nil),           // 68: clientpb.ShellcodeRDI
	(*GetSystemReq)(nil),           // 69: clientpb.GetSystemReq
	(*MigrateReq)(nil),             // 70: clientpb.MigrateReq
	(*CreateTunnelReq)(nil),        // 71: clientpb.CreateTunnelReq
	(*CreateTunnel)(nil),           // 72: clientpb.CreateTunnel
	(*CloseTunnelReq)(nil),         // 73: clientpb.CloseTunnelReq
	(*PivotGraphEntry)(nil),        // 74: clientpb.PivotGraphEntry
	(*PivotGraph)(nil),             // 75: clientpb.PivotGraph
	(*Client)(nil),                 // 76: clientpb.Client
	(*Event)(nil),                  // 77: clientpb.Event
	(*Operators)(nil),              // 78: clientpb.Operators
	(*Operator)(nil),               // 79: clientpb.Operator
	(*WebContent)(nil),             // 80: clientpb.WebContent
	(*WebsiteAddContent)(nil),      // 81: clientpb.WebsiteAddContent
	(*WebsiteRemoveContent)(nil),   // 82: clientpb.WebsiteRemoveContent
	(*Website)(nil),                // 83: clientpb.Website
	(*Websites)(nil),               // 84: clientpb.Websites
	(*WGClientConfig)(nil),         // 85: clientpb.WGClientConfig
	(*Loot)(nil),                   // 86: clientpb.Loot
	(*AllLoot)(nil),                // 87: clientpb.AllLoot
	(*IOC)(nil),                    // 88: clientpb.IOC
	(*ExtensionData)(nil),          // 89: clientpb.ExtensionData
	(*Host)(nil),                   // 90: clientpb.Host
	(*AllHosts)(nil),               // 91: clientpb.AllHosts
	(*HostScanReq)(nil),            // 92: clientpb.HostScanReq
	(*HostService)(nil),            // 93: clientpb.HostService
	(*HostScanResult)(nil),         // 94: clientpb.HostScanResult
	(*HostScanResults)(nil),        // 95: clientpb.HostScanResults
	(*ReconReq)(nil),               // 96: clientpb.ReconReq
	(*ReconResult)(nil),            // 97: clientpb.ReconResult
	(*DllHijackReq)(nil),           // 98: clientpb.DllHijackReq
	(*DllHijack)(nil),              // 99: clientpb.DllHijack
	(*BackdoorReq)(nil),            // 100: clientpb.BackdoorReq
	(*Backdoor)(nil),               // 101: clientpb.Backdoor
	(*ShellcodeEncodeReq)(nil),     // 102: clientpb.ShellcodeEncodeReq
	(*ShellcodeEncode)(nil),        // 103: clientpb.ShellcodeEncode
	(*ShellcodeEncoderMap)(nil),    // 104: clientpb.ShellcodeEncoderMap
	(*ExternalGenerateReq)(nil),    // 105: clientpb.ExternalGenerateReq
	(*Builders)(nil),               // 106: clientpb.Builders
	(*Builder)(nil),                // 107: clientpb.Builder
	(*HTTPC2Configs)(nil),          // 108: clientpb.HTTPC2Configs
	(*C2ProfileReq)(nil),           // 109: clientpb.C2ProfileReq
	(*HTTPC2ConfigReq)(nil),        // 110: clientpb.HTTPC2ConfigReq
	(*HTTPC2Config)(nil),           // 111: clientpb.HTTPC2Config
	(*HTTPC2ServerConfig)(nil),     // 112: clientpb.HTTPC2ServerConfig
	(*HTTPC2ImplantConfig)(nil),    // 113: clientpb.HTTPC2ImplantConfig
	(*HTTPC2Cookie)(nil),           // 114: clientpb.HTTPC2Cookie
	(*HTTPC2Header)(nil),           // 115: clientpb.HTTPC2Header
	(*HTTPC2URLParameter)(nil),     // 116: clientpb.HTTPC2URLParameter
	(*HTTPC2PathSegment)(nil),      // 117: clientpb.HTTPC2PathSegment
	(*Credential)(nil),             // 118: clientpb.Credential
	(*Credentials)(nil),            // 119: clientpb.Credentials
	(*Crackstations)(nil),          // 120: clientpb.Crackstations
	(*CrackstationStatus)(nil),     // 121: clientpb.CrackstationStatus
	(*CrackSyncStatus)(nil),        // 122: clientpb.CrackSyncStatus
	(*CrackBenchmark)(nil),         // 123: clientpb.CrackBenchmark
	(*CrackTask)(nil),              // 124: clientpb.CrackTask
	(*Crackstation)(nil),           // 125: clientpb.Crackstation
	(*CUDABackendInfo)(nil),        // 126: clientpb.CUDABackendInfo
	(*OpenCLBackendInfo)(nil),      // 127: clientpb.OpenCLBackendInfo
	(*MetalBackendInfo)(nil),       // 128: clientpb.MetalBackendInfo
	(*CrackCommand)(nil),           // 129: clientpb.CrackCommand
	(*CrackConfig)(nil),            // 130: clientpb.CrackConfig
	(*CrackFiles)(nil),             // 131: clientpb.CrackFiles
	(*CrackFile)(nil),              // 132: clientpb.CrackFile
	(*CrackFileChunk)(nil),         // 133: clientpb.CrackFileChunk
	(*MonitoringProviders)(nil),    // 134: clientpb.MonitoringProviders
	(*MonitoringProvider)(nil),     // 135: clientpb.MonitoringProvider
	(*ResourceID)(nil),             // 136: clientpb.ResourceID
	(*CertificatesReq)(nil),        // 137: clientpb.CertificatesReq
	(*CertificateData)(nil),        // 138: clientpb.CertificateData
	(*CertificateInfo)(nil),        // 139: clientpb.CertificateInfo
	nil,                            // 140: clientpb.TrafficEncoderMap.EncodersEntry
	nil,                            // 141: clientpb.ExternalImplantConfig.EncodersEntry
	nil,                            // 142: clientpb.ImplantBuilds.ConfigsEntry
	nil,                            // 143: clientpb.ImplantBuilds.ResourceIDsEntry
	nil,                            // 144: clientpb.ImplantBuilds.StagedEntry
	nil,                            // 145: clientpb.WebsiteAddContent.ContentsEntry
	nil,                            // 146: clientpb.Website.ContentsEntry
	nil,                            // 147: clientpb.Host.ExtensionDataEntry
	nil,                            // 148: clientpb.ShellcodeEncoderMap.EncodersEntry
	nil,                            // 149: clientpb.CrackSyncStatus.ProgressEntry
	nil,                            // 150: clientpb.CrackBenchmark.BenchmarksEntry
	nil,                            // 151: clientpb.Crackstation.BenchmarksEntry
	(*commonpb.File)(nil),          // 152: commonpb.File
	(*commonpb.Request)(nil),       // 153: commonpb.Request
	(*commonpb.Response)(nil),      // 154: commonpb.Response
}
var file_clientpb_client_proto_depIdxs = []int32{
	16,  // 0: clientpb.Beacons.Beacons:type_name -> clientpb.Beacon
	18,  // 1: clientpb.BeaconTasks.Tasks:type_name -> clientpb.BeaconTask
	32,  // 2: clientpb.ImplantConfig.ImplantBuilds:type_name -> clientpb.ImplantBuild
	21,  // 3: clientpb.ImplantConfig.C2:type_name -> clientpb.ImplantC2
	0,   // 4: clientpb.ImplantConfig.Format:type_name -> clientpb.OutputFormat
	152, // 5: clientpb.ImplantConfig.Assets:type_name -> commonpb.File
	23,  // 6: clientpb.ImplantConfig.DiversityConfig:type_name -> clientpb.BuildDiversityConfig
	152, // 7: clientpb.TrafficEncoder.Wasm:type_name -> commonpb.File
	140, // 8: clientpb.TrafficEncoderMap.Encoders:type_name -> clientpb.TrafficEncoderMap.EncodersEntry
	24,  // 9: clientpb.TrafficEncoderTests.Encoder:type_name -> clientpb.TrafficEncoder
	26,  // 10: clientpb.TrafficEncoderTests.Tests:type_name -> clientpb.TrafficEncoderTest
	22,  // 11: clientpb.ExternalImplantConfig.Config:type_name -> clientpb.ImplantConfig
	32,  // 12: clientpb.ExternalImplantConfig.Build:type_name -> clientpb.ImplantBuild
	111, // 13: clientpb.ExternalImplantConfig.HTTPC2:type_name -> clientpb.HTTPC2Config
	141, // 14: clientpb.ExternalImplantConfig.encoders:type_name -> clientpb.ExternalImplantConfig.EncodersEntry
	152, // 15: clientpb.ExternalImplantBinary.File:type_name -> commonpb.File
	142, // 16: clientpb.ImplantBuilds.Configs:type_name -> clientpb.ImplantBuilds.ConfigsEntry
	143, // 17: clientpb.ImplantBuilds.ResourceIDs:type_name -> clientpb.ImplantBuilds.ResourceIDsEntry
	144, // 18: clientpb.ImplantBuilds.staged:type_name -> clientpb.ImplantBuilds.StagedEntry
	0,   // 19: clientpb.CompilerTarget.Format:type_name -> clientpb.OutputFormat
	33,  // 20: clientpb.Compiler.Targets:type_name -> clientpb.CompilerTarget
	34,  // 21: clientpb.Compiler.CrossCompilers:type_name -> clientpb.CrossCompiler
	33,  // 22: clientpb.Compiler.UnsupportedTargets:type_name -> clientpb.CompilerTarget
	37,  // 23: clientpb.Canaries.Canaries:type_name -> clientpb.DNSCanary
	22,  // 24: clientpb.ImplantProfile.Config:type_name -> clientpb.ImplantConfig
	40,  // 25: clientpb.ImplantProfiles.Profiles:type_name -> clientpb.ImplantProfile
	43,  // 26: clientpb.Jobs.Active:type_name -> clientpb.Job
	50,  // 27: clientpb.ListenerJob.MTLSConf:type_name -> clientpb.MTLSListenerReq
	51,  // 28: clientpb.ListenerJob.WGConf:type_name -> clientpb.WGListenerReq
	52,  // 29: clientpb.ListenerJob.DNSConf:type_name -> clientpb.DNSListenerReq
	53,  // 30: clientpb.ListenerJob.HTTPConf:type_name -> clientpb.HTTPListenerReq
	49,  // 31: clientpb.ListenerJob.MultiConf:type_name -> clientpb.MultiplayerListenerReq
	65,  // 32: clientpb.ListenerJob.TCPConf:type_name -> clientpb.StagerListenerReq
	153, // 33: clientpb.NamedPipesReq.Request:type_name -> commonpb.Request
	154, // 34: clientpb.NamedPipes.Response:type_name -> commonpb.Response
	153, // 35: clientpb.TCPPivotReq.Request:type_name -> commonpb.Request
	154, // 36: clientpb.TCPPivot.Response:type_name -> commonpb.Response
	15,  // 37: clientpb.Sessions.Sessions:type_name -> clientpb.Session
	22,  // 38: clientpb.GenerateReq.Config:type_name -> clientpb.ImplantConfig
	152, // 39: clientpb.Generate.File:type_name -> commonpb.File
	153, // 40: clientpb.MSFReq.Request:type_name -> commonpb.Request
	153, // 41: clientpb.MSFRemoteReq.Request:type_name -> commonpb.Request
	1,   // 42: clientpb.StagerListenerReq.Protocol:type_name -> clientpb.StageProtocol
	22,  // 43: clientpb.GetSystemReq.Config:type_name -> clientpb.ImplantConfig
	153, // 44: clientpb.GetSystemReq.Request:type_name -> commonpb.Request
	22,  // 45: clientpb.MigrateReq.Config:type_name -> clientpb.ImplantConfig
	3,   // 46: clientpb.MigrateReq.Encoder:type_name -> clientpb.ShellcodeEncoder
	153, // 47: clientpb.MigrateReq.Request:type_name -> commonpb.Request
	153, // 48: clientpb.CreateTunnelReq.Request:type_name -> commonpb.Request
	153, // 49: clientpb.CloseTunnelReq.Request:type_name -> commonpb.Request
	15,  // 50: clientpb.PivotGraphEntry.Session:type_name -> clientpb.Session
	74,  // 51: clientpb.PivotGraphEntry.Children:type_name -> clientpb.PivotGraphEntry
	74,  // 52: clientpb.PivotGraph.Children:type_name -> clientpb.PivotGraphEntry
	79,  // 53: clientpb.Client.Operator:type_name -> clientpb.Operator
	15,  // 54: clientpb.Event.Session:type_name -> clientpb.Session
	43,  // 55: clientpb.Event.Job:type_name -> clientpb.Job
	76,  // 56: clientpb.Event.Client:type_name -> clientpb.Client
	79,  // 57: clientpb.Operators.Operators:type_name -> clientpb.Operator
	145, // 58: clientpb.WebsiteAddContent.Contents:type_name -> clientpb.WebsiteAddContent.ContentsEntry
	146, // 59: clientpb.Website.Contents:type_name -> clientpb.Website.ContentsEntry
	83,  // 60: clientpb.Websites.Websites:type_name -> clientpb.Website
	2,   // 61: clientpb.Loot.FileType:type_name -> clientpb.FileType
	152, // 62: clientpb.Loot.File:type_name -> commonpb.File
	86,  // 63: clientpb.AllLoot.Loot:type_name -> clientpb.Loot
	88,  // 64: clientpb.Host.IOCs:type_name -> clientpb.IOC
	147, // 65: clientpb.Host.ExtensionData:type_name -> clientpb.Host.ExtensionDataEntry
	90,  // 66: clientpb.AllHosts.Hosts:type_name -> clientpb.Host
	93,  // 67: clientpb.HostScanResult.Services:type_name -> clientpb.HostService
	94,  // 68: clientpb.HostScanResults.Results:type_name -> clientpb.HostScanResult
	153, // 69: clientpb.DllHijackReq.Request:type_name -> commonpb.Request
	154, // 70: clientpb.DllHijack.Response:type_name -> commonpb.Response
	153, // 71: clientpb.BackdoorReq.Request:type_name -> commonpb.Request
	154, // 72: clientpb.Backdoor.Response:type_name -> commonpb.Response
	3,   // 73: clientpb.ShellcodeEncodeReq.Encoder:type_name -> clientpb.ShellcodeEncoder
	153, // 74: clientpb.ShellcodeEncodeReq.Request:type_name -> commonpb.Request
	154, // 75: clientpb.ShellcodeEncode.Response:type_name -> commonpb.Response
	148, // 76: clientpb.ShellcodeEncoderMap.Encoders:type_name -> clientpb.ShellcodeEncoderMap.EncodersEntry
	22,  // 77: clientpb.ExternalGenerateReq.Config:type_name -> clientpb.ImplantConfig
	107, // 78: clientpb.Builders.Builders:type_name -> clientpb.Builder
	33,  // 79: clientpb.Builder.Targets:type_name -> clientpb.CompilerTarget
	34,  // 80: clientpb.Builder.CrossCompilers:type_name -> clientpb.CrossCompiler
	111, // 81: clientpb.HTTPC2Configs.configs:type_name -> clientpb.HTTPC2Config
	111, // 82: clientpb.HTTPC2ConfigReq.C2Config:type_name -> clientpb.HTTPC2Config
	112, // 83: clientpb.HTTPC2Config.ServerConfig:type_name -> clientpb.HTTPC2ServerConfig
	113, // 84: clientpb.HTTPC2Config.ImplantConfig:type_name -> clientpb.HTTPC2ImplantConfig
	115, // 85: clientpb.HTTPC2ServerConfig.Headers:type_name -> clientpb.HTTPC2Header
	114, // 86: clientpb.HTTPC2ServerConfig.Cookies:type_name -> clientpb.HTTPC2Cookie
	116, // 87: clientpb.HTTPC2ImplantConfig.ExtraURLParameters:type_name -> clientpb.HTTPC2URLParameter
	115, // 88: clientpb.HTTPC2ImplantConfig.Headers:type_name -> clientpb.HTTPC2Header
	117, // 89: clientpb.HTTPC2ImplantConfig.PathSegments:type_name -> clientpb.HTTPC2PathSegment
	5,   // 90: clientpb.Credential.HashType:type_name -> clientpb.HashType
	118, // 91: clientpb.Credentials.Credentials:type_name -> clientpb.Credential
	125, // 92: clientpb.Crackstations.Crackstations:type_name -> clientpb.Crackstation
	6,   // 93: clientpb.CrackstationStatus.State:type_name -> clientpb.States
	122, // 94: clientpb.CrackstationStatus.Syncing:type_name -> clientpb.CrackSyncStatus
	149, // 95: clientpb.CrackSyncStatus.Progress:type_name -> clientpb.CrackSyncStatus.ProgressEntry
	150, // 96: clientpb.CrackBenchmark.Benchmarks:type_name -> clientpb.CrackBenchmark.BenchmarksEntry
	129, // 97: clientpb.CrackTask.Command:type_name -> clientpb.CrackCommand
	151, // 98: clientpb.Crackstation.Benchmarks:type_name -> clientpb.Crackstation.BenchmarksEntry
	126, // 99: clientpb.Crackstation.CUDA:type_name -> clientpb.CUDABackendInfo
	128, // 100: clientpb.Crackstation.Metal:type_name -> clientpb.MetalBackendInfo
	127, // 101: clientpb.Crackstation.OpenCL:type_name -> clientpb.OpenCLBackendInfo
	8,   // 102: clientpb.CrackCommand.AttackMode:type_name -> clientpb.CrackAttackMode
	5,   // 103: clientpb.CrackCommand.HashType:type_name -> clientpb.HashType
	10,  // 104: clientpb.CrackCommand.OutfileFormat:type_name -> clientpb.CrackOutfileFormat
	9,   // 105: clientpb.CrackCommand.EncodingFrom:type_name -> clientpb.CrackEncoding
	9,   // 106: clientpb.CrackCommand.EncodingTo:type_name -> clientpb.CrackEncoding
	11,  // 107: clientpb.CrackCommand.WorkloadProfile:type_name -> clientpb.CrackWorkloadProfile
	132, // 108: clientpb.CrackFiles.Files:type_name -> clientpb.CrackFile
	12,  // 109: clientpb.CrackFile.Type:type_name -> clientpb.CrackFileType
	133, // 110: clientpb.CrackFile.Chunks:type_name -> clientpb.CrackFileChunk
	135, // 111: clientpb.MonitoringProviders.providers:type_name -> clientpb.MonitoringProvider
	138, // 112: clientpb.CertificateInfo.info:type_name -> clientpb.CertificateData
	24,  // 113: clientpb.TrafficEncoderMap.EncodersEntry.value:type_name -> clientpb.TrafficEncoder
	22,  // 114: clientpb.ImplantBuilds.ConfigsEntry.value:type_name -> clientpb.ImplantConfig
	136, // 115: clientpb.ImplantBuilds.ResourceIDsEntry.value:type_name -> clientpb.ResourceID
	80,  // 116: clientpb.WebsiteAddContent.ContentsEntry.value:type_name -> clientpb.WebContent
	80,  // 117: clientpb.Website.ContentsEntry.value:type_name -> clientpb.WebContent
	89,  // 118: clientpb.Host.ExtensionDataEntry.value:type_name -> clientpb.ExtensionData
	3,   // 119: clientpb.ShellcodeEncoderMap.EncodersEntry.value:type_name -> clientpb.ShellcodeEncoder
	120, // [120:120] is the sub-list for method output_type
	120, // [120:120] is the sub-list for method input_type
	120, // [120:120] is the sub-list for extension type_name
	120, // [120:120] is the sub-list for extension extendee
	0,   // [0:120] is the sub-list for field type_name
}

func init() { file_clientpb_client_proto_init() }
func file_clientpb_client_proto_init() {
	if File_clientpb_client_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_clientpb_client_proto_rawDesc), len(file_clientpb_client_proto_rawDesc)),
			NumEnums:      13,
			NumMessages:   139,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clientpb_client_proto_goTypes,
		DependencyIndexes: file_clientpb_client_proto_depIdxs,
		EnumInfos:         file_clientpb_client_proto_enumTypes,
		MessageInfos:      file_clientpb_client_proto_msgTypes,
	}.Build()
	File_clientpb_client_proto = out.File
	file_clientpb_client_proto_goTypes = nil
	file_clientpb_client_proto_depIdxs = nil
}
